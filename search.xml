<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/06/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>python学习笔记</title>
    <url>/2023/07/14/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="python3-学习笔记"><a href="#python3-学习笔记" class="headerlink" title="python3 学习笔记"></a>python3 学习笔记</h1><h2 id="1-基础"><a href="#1-基础" class="headerlink" title="1. 基础"></a>1. 基础</h2><p><strong>多行语句</strong>：\用反斜杠后换行，在 [], {}, 或 () 中的多行语句，不需要使用反斜杠，直接换</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#导入模块格式</span>
<span class="token keyword">from</span> somemodule <span class="token keyword">import</span> firstfunc<span class="token punctuation">,</span> secondfunc<span class="token punctuation">,</span> thirdfunc
<span class="token keyword">from</span> somemodule <span class="token keyword">import</span> <span class="token operator">*</span>	<span class="token comment" spellcheck="true">#导入模块中的所有函数</span>
<span class="token keyword">import</span> somemodule
<span class="token keyword">from</span> sys <span class="token keyword">import</span> argv<span class="token punctuation">,</span>path  <span class="token comment" spellcheck="true">#  导入特定的成员</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'path:'</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 因为已经导入path成员，所以此处引用时不需要加sys.path</span>

</code></pre>
<h3 id="输出方法"><a href="#输出方法" class="headerlink" title="输出方法"></a>输出方法</h3><blockquote>
<p>chr()   ascii码转为string，chr(65)表示A</p>
<p>ord()   字符串转int类型的ascii码,ord(“0”)表示48</p>
<p>range(5,10)  区间左闭右开</p>
</blockquote>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8 #设置编码为utf-8</span>
<span class="token comment" spellcheck="true">#print()自带换行</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token string">'jay zhou'</span>
    age <span class="token operator">=</span> <span class="token number">29</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"yes"</span>\
                                r<span class="token string">"\n"</span><span class="token punctuation">)</span>
    <span class="token triple-quoted-string string">'''
    同一行两句代码分号隔开
    第一个\表示代码换行继续写
    加r表示不转义\n
    '''</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">"""我的年龄是 """</span><span class="token operator">+</span>str<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 不换行输出</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"大家好，我是&amp;#123;name&amp;#125;,今年&amp;#123;age&amp;#125;岁"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大家好，我是&amp;#123;0&amp;#125;,今年&amp;#123;1&amp;#125;岁"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大家好，我是%s,今年%d岁"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span>
    w <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"who":8,"am":5,"i":7&amp;#125;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'&amp;#123;w["who"]&amp;#125; &amp;#123;w["am"]&amp;#125; &amp;#123;w["i"]&amp;#125; '</span><span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">)</span>#<span class="token number">8</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">666</span>
    <span class="token comment" spellcheck="true">#不同数据类型逗号隔开</span>
</code></pre>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/07/14/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230712215456679.png" class="lozad post-image"src="/2023/07/14/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230712215456679.png"></p>
<h3 id="输入方法"><a href="#输入方法" class="headerlink" title="输入方法"></a>输入方法</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span>
name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入一个名字: \n"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#表示不换行</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#表示换行</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. 数据类型</h2><p>数字，字符串，布尔类型，列表，元组，集合，字典。</p>
<p>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；<br>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</p>
<p>变量都具有三个基本要素：分别是 id，type，value。</p>
<p><strong>赋值方法</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#同时为多个变量赋值,id相同</span>
a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span>

<span class="token comment" spellcheck="true">#为多个对象指定多个变量。例如：</span>
a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"runoob"</span>
</code></pre>
<p><strong>变量命名规则：</strong></p>
<blockquote>
<ol>
<li>变量名必须以字母或下划线字符开头</li>
<li>变量名不能以数字开头</li>
<li>变量名称只能包含字母数字字符和下划线</li>
<li>变量名区分大小写</li>
<li>不能与关键字重复</li>
</ol>
</blockquote>
<p><strong>关键字</strong></p>
<table>
<thead>
<tr>
<th>and</th>
<th>exec</th>
<th>not</th>
<th>assert</th>
<th>finally</th>
<th>or</th>
</tr>
</thead>
<tbody><tr>
<td><strong>break</strong></td>
<td><strong>for</strong></td>
<td><strong>pass</strong></td>
<td><strong>class</strong></td>
<td><strong>from</strong></td>
<td><strong>print</strong></td>
</tr>
<tr>
<td><strong>continue</strong></td>
<td><strong>global</strong></td>
<td><strong>raise</strong></td>
<td><strong>def</strong></td>
<td><strong>if</strong></td>
<td><strong>return</strong></td>
</tr>
<tr>
<td><strong>del</strong></td>
<td><strong>import</strong></td>
<td><strong>try</strong></td>
<td><strong>elif</strong></td>
<td><strong>in</strong></td>
<td><strong>while</strong></td>
</tr>
<tr>
<td><strong>else</strong></td>
<td><strong>is</strong></td>
<td><strong>with</strong></td>
<td><strong>except</strong></td>
<td><strong>lambda</strong></td>
<td><strong>yield</strong></td>
</tr>
</tbody></table>
<h3 id="数据处理的一些函数"><a href="#数据处理的一些函数" class="headerlink" title="数据处理的一些函数"></a>数据处理的一些函数</h3><p>enumerate()函数用于将一个可遍历的数据对象（如列表、元组或字符串）组合为一个索引序列，同时列出数据和数据下标</p>
<pre class=" language-python"><code class="language-python">格式<span class="token punctuation">:</span>  enumerate<span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> <span class="token punctuation">[</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#start参数可以不填</span>
seasons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Spring'</span><span class="token punctuation">,</span> <span class="token string">'Summer'</span><span class="token punctuation">,</span> <span class="token string">'Fall'</span><span class="token punctuation">,</span> <span class="token string">'Winter'</span><span class="token punctuation">]</span>
list<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>seasons<span class="token punctuation">,</span>start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 输出</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Summer'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Fall'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Winter'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre>
<p>map()函数</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x
r <span class="token operator">=</span> map<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">#[1, 4, 9, 16, 25, 36, 49, 64, 81]</span>
</code></pre>
<p>filter()函数</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#filter()函数返回的是一个Iterator，也就是一个惰性序列，所以要强迫filter()完成计算结果，需要用list()函数获得所有结果并返回list。</span>
<span class="token comment" spellcheck="true">#filter()也接收一个函数和一个序列。</span>
<span class="token comment" spellcheck="true"># 在一个list中，删掉偶数，只保留奇数</span>
<span class="token keyword">def</span> <span class="token function">is_odd</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span>is_odd<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">#[1, 3, 5, 7, 9]</span>
</code></pre>
<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a><strong>强制类型转换</strong></h3><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># x 输出结果为 1.0</span>
complex<span class="token punctuation">(</span>x<span class="token punctuation">)</span> 将x转换到一个复数，实数部分为 x，虚数部分为 <span class="token number">0</span>。
complex<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。
</code></pre>
<pre class=" language-python"><code class="language-python">int<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#强制转为int类型</span>
float<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#强制转为float类型</span>
str<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#转为string</span>
l1<span class="token operator">=</span>list<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#转为列表</span>
s3<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#转为集合</span>
ord<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#转数字</span>
chr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#转字符</span>
bin<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#转二进制</span>
hex<span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#转16进制</span>
bytes<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#转为字节数组，比如bytes('我喜欢python',encoding='utf-8')</span>
</code></pre>
<h3 id="Number数字"><a href="#Number数字" class="headerlink" title="Number数字"></a>Number数字</h3><p>支持 <strong>int、float、bool、complex（复数）</strong></p>
<pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token number">3.14</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#TRUE,bool在一定情况被解释成整数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">is</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#is来判断变量id是否一致</span>
<span class="token keyword">del</span> a<span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#del语句删除对象引用a,不会输出东西</span>

<span class="token keyword">from</span> decimal <span class="token keyword">import</span> Decimal<span class="token comment" spellcheck="true">#防止浮点数存储不精确</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'1.1'</span><span class="token punctuation">)</span><span class="token operator">+</span>Decimal<span class="token punctuation">(</span><span class="token string">'2.2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3.3</span>

<span class="token comment" spellcheck="true">#布尔值为False情况</span>
bool<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#False</span>
bool<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#False</span>
bool<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#False</span>
bool<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#False</span>
bool<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#False空列表</span>
bool<span class="token punctuation">(</span>list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#False空列表</span>
bool<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#False空元组</span>
bool<span class="token punctuation">(</span>tuple<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#False空元组</span>
bool<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;)#空字典</span>
bool<span class="token punctuation">(</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#空字典</span>
bool<span class="token punctuation">(</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#空集合</span>

<span class="token triple-quoted-string string">"""
复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型
"""</span>

<span class="token number">70.2E-12</span>表示<span class="token punctuation">[</span><span class="token number">70.2</span><span class="token operator">*</span>（<span class="token number">10</span><span class="token operator">**</span><span class="token operator">-</span><span class="token number">12</span>）<span class="token punctuation">]</span>
</code></pre>
<p>type() 函数用来查询变量所指的对象类型。</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'float'</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bool'</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'complex'</span><span class="token operator">></span>
type<span class="token punctuation">(</span><span class="token punctuation">)</span>不会认为子类是一种父类类型。
isinstance<span class="token punctuation">(</span><span class="token punctuation">)</span>会认为子类是一种父类类型。
</code></pre>
<h4 id="常见运算符"><a href="#常见运算符" class="headerlink" title="常见运算符"></a>常见运算符</h4><p>算术运算&gt;位运算&gt;比较运算&gt;布尔运算&gt;赋值运算</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述（由上至下对应优先级由高到低）</th>
</tr>
</thead>
<tbody><tr>
<td>**</td>
<td>幂运算</td>
</tr>
<tr>
<td>~ + -</td>
<td>取反、正号、负号</td>
</tr>
<tr>
<td>* &#x2F; % &#x2F;&#x2F;</td>
<td>乘、除、取模、取整除</td>
</tr>
<tr>
<td>+ -</td>
<td>加法、减法</td>
</tr>
<tr>
<td>&gt;&gt; &lt;&lt;</td>
<td>右移、左移</td>
</tr>
<tr>
<td>&amp;</td>
<td>与</td>
</tr>
<tr>
<td>^ |</td>
<td>异或、或</td>
</tr>
<tr>
<td>&lt;&#x3D; &lt; &gt; &gt;&#x3D; &#x3D;&#x3D; !&#x3D;</td>
<td>比较运算符(默认从右往左)</td>
</tr>
<tr>
<td>&#x3D; %&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; -&#x3D; +&#x3D; *&#x3D; **&#x3D;</td>
<td>赋值运算符</td>
</tr>
<tr>
<td>is is not</td>
<td>身份运算符</td>
</tr>
<tr>
<td>in not in</td>
<td>成员运算符</td>
</tr>
<tr>
<td>not and or</td>
<td>逻辑运算符</td>
</tr>
</tbody></table>
<pre class=" language-python"><code class="language-python"><span class="token operator">%</span>	取余
<span class="token operator">**</span>	乘方
<span class="token operator">/</span>	除法
<span class="token operator">//</span>	整除
<span class="token operator">%=</span> 	比如c<span class="token operator">%=</span>a相当于c<span class="token operator">=</span>c<span class="token operator">%</span>a

<span class="token comment" spellcheck="true">#注意is比较id的情况</span>
a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#True</span>
c<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">;</span>d<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>c <span class="token keyword">is</span> d<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#True</span>
e<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>f<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>e <span class="token keyword">is</span> f<span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#True</span>
g<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>h<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>g <span class="token keyword">is</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"&amp;#123;id(g)&amp;#125; &amp;#123;id(h)&amp;#125;"</span><span class="token punctuation">)</span>	#元组<span class="token boolean">True</span>
i<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>i <span class="token keyword">is</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"&amp;#123;id(i)&amp;#125; &amp;#123;id(j)&amp;#125;"</span><span class="token punctuation">)</span>	#列表<span class="token boolean">False</span>
score1<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'张三':100,'李四':98,'王五':45&amp;#125;</span>
score2<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'张三':100,'李四':98,'王五':45&amp;#125;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>score1 <span class="token keyword">is</span> score2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#字典False</span>
m1<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;100,'李四','王五'&amp;#125;</span>
m2<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;100,'李四','王五'&amp;#125;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>m1 <span class="token keyword">is</span> m2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#集合False</span>
</code></pre>
<h3 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h3><ul>
<li><p>以单引号 <code>&#39;</code>、双引号<code>&quot;</code>、三引号 <code>&#39;&#39;&#39;</code> 或 <code>&quot;&quot;&quot;</code>括起来的文本</p>
</li>
<li><p>单引号，双引号完全相同。</p>
</li>
<li><p>字符串有两种索引方式，从左往右以0开始，从右往左以-1开始</p>
</li>
</ul>
<p><strong>python字符串格式化符号:</strong></p>
<table>
<thead>
<tr>
<th align="left">符  号</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%c</td>
<td align="left">格式化字符及其ASCII码</td>
</tr>
<tr>
<td align="left">%s</td>
<td align="left">格式化字符串</td>
</tr>
<tr>
<td align="left">%d</td>
<td align="left">格式化整数</td>
</tr>
<tr>
<td align="left">%u</td>
<td align="left">格式化无符号整型</td>
</tr>
<tr>
<td align="left">%o</td>
<td align="left">格式化无符号八进制数</td>
</tr>
<tr>
<td align="left">%x</td>
<td align="left">格式化无符号十六进制数</td>
</tr>
<tr>
<td align="left">%X</td>
<td align="left">格式化无符号十六进制数（大写）</td>
</tr>
<tr>
<td align="left">%f</td>
<td align="left">格式化浮点数字，可指定小数点后的精度</td>
</tr>
<tr>
<td align="left">%e</td>
<td align="left">用科学计数法格式化浮点数</td>
</tr>
<tr>
<td align="left">%E</td>
<td align="left">作用同%e，用科学计数法格式化浮点数</td>
</tr>
<tr>
<td align="left">%g</td>
<td align="left">%f和%e的简写</td>
</tr>
<tr>
<td align="left">%G</td>
<td align="left">%f 和 %E 的简写</td>
</tr>
<tr>
<td align="left">%p</td>
<td align="left">用十六进制数格式化变量的地址</td>
</tr>
</tbody></table>
<p><strong>格式化操作符辅助指令:</strong></p>
<table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">定义宽度或者小数点精度</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">用做左对齐</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">在正数前面显示加号( + )</td>
</tr>
<tr>
<td align="left"><sp></sp></td>
<td align="left">在正数前面显示空格</td>
</tr>
<tr>
<td align="left">#</td>
<td align="left">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td>
</tr>
<tr>
<td align="left">0</td>
<td align="left">显示的数字前面填充’0’而不是默认的空格</td>
</tr>
<tr>
<td align="left">%</td>
<td align="left">‘%%’输出一个单一的’%’</td>
</tr>
<tr>
<td align="left">(var)</td>
<td align="left">映射变量(字典参数)</td>
</tr>
<tr>
<td align="left">m.n.</td>
<td align="left">m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td>
</tr>
</tbody></table>
<p><strong>字符串截取</strong>：</p>
<ul>
<li>使用三引号(<strong>‘’’</strong> 或 <strong>“””</strong>)可以指定一个多行字符串。</li>
<li>Python 中的字符串有两种索引方式，从左往右以 <strong>0</strong> 开始，从右往左以 <strong>-1</strong> 开始，区间左闭右开</li>
<li>Python 中的字符串不能改变。</li>
<li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</li>
<li>字符串的截取的语法格式如下：<strong>变量[头下标:尾下标:步长]</strong></li>
</ul>
<pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token string">"abcdef"</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>			<span class="token comment" spellcheck="true">#fedcba</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#abcdef</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#abcdef</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 输出第一个到倒数第二个的所有字符,abcde</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 输出字符串第一个字符，a</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 输出从第三个开始到第五个的字符，cde</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 输出从第三个开始后的所有字符,cdef</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>			<span class="token comment" spellcheck="true">#ab</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># bd</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 输出字符串两次,abcdefabcdef</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">'你好'</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 连接字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"this"</span><span class="token string">"is"</span><span class="token string">"string"</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#thisisstring</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>			<span class="token comment" spellcheck="true">#ef</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&amp;#123;0:.3&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">)</span>#输出<span class="token number">3.14</span>表示一共输出<span class="token number">3</span>位数
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&amp;#123;0:.3f&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">)</span>#输出<span class="token number">3.142</span>输出三位小数

var1<span class="token punctuation">[</span>a<span class="token punctuation">:</span>b<span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">#如果a>=b, 默认输出为空。</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>var1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>var1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true"># \r后面的内容移到字符串开头，并逐一替换开头部分的字符，</span>
m<span class="token operator">=</span><span class="token string">"jkloli\rdj"</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#dj</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#倒序打印</span>
</code></pre>
<p><strong>字符串增删改查</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#字符串的查询操作</span>

s<span class="token operator">=</span><span class="token string">'hello,hello'</span>
<span class="token comment" spellcheck="true">#index()查询字串第一次出现的位置，若不存在则抛出ValueError</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'lo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span>
<span class="token comment" spellcheck="true">#find()查询字串第一次出现的位置，若不存在则返回-1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'lo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span>
<span class="token comment" spellcheck="true">#rindex()查询字串最后一次出现的位置，若不存在则抛出ValueError</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span><span class="token string">'lo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#9</span>
<span class="token comment" spellcheck="true">#rfind()查询字串最后一次出现的位置，若不存在则返回-1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'lo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#9</span>

<span class="token comment" spellcheck="true">#大小写转换操作</span>
name<span class="token operator">=</span><span class="token string">"i love you"</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#首字母大写I Love You</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#I LOVE YOU</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#i love you</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#I love you</span>
name<span class="token operator">=</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>swapcase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#i lOVE yOU</span>

<span class="token comment" spellcheck="true">#对齐操作</span>
s<span class="token operator">=</span><span class="token string">'i love you'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#居中对齐，若第二个参数不指定填充符，默认为空格，指定小于原字符串则返回原字符串,***i love you**</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#左对齐,i love you*****</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#右对齐,*****i love you</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#右对齐，左侧用0对齐,00000i love you</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-8910'</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-0008910</span>

<span class="token comment" spellcheck="true">#拆分操作</span>
a<span class="token operator">=</span><span class="token string">"i got a smoke"</span>
l<span class="token operator">=</span>a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#['i', 'got', 'a', 'smoke']</span>
b<span class="token operator">=</span><span class="token string">"i#got#you#all#my#mind"</span>
l2<span class="token operator">=</span>b<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">#['i', 'got', 'you', 'all', 'my', 'mind']</span>
l3<span class="token operator">=</span>b<span class="token punctuation">.</span>split<span class="token punctuation">(</span>sep<span class="token operator">=</span><span class="token string">"#"</span><span class="token punctuation">,</span>maxsplit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">#设置最大分割次数，['i', 'got', 'you#all#my#mind']</span>
l4<span class="token operator">=</span>b<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span>sep<span class="token operator">=</span><span class="token string">"#"</span><span class="token punctuation">,</span>maxsplit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">#['i#got#you#all', 'my', 'mind']</span>

<span class="token comment" spellcheck="true">#字符串判断相关</span>
s<span class="token operator">=</span><span class="token string">'hello,python'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>isidentifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#False,判断是否是合法的标识符字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#True,判断是否是全部由空白字符组成（回车、换行、水平制表符）</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'abc张三'</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#True,判断是否全部由字符组成</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">.</span>isdecimal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#True,判断是否全部是十进制数字</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'123四Ⅳ'</span><span class="token punctuation">.</span>isnumeric<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#True,判断是否全由数字组成</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'abc1'</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#True,是否全部由字母和数字组成</span>

<span class="token comment" spellcheck="true">#合并成一个字符串，join函数</span>
 <span class="token string">'sep'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>seq<span class="token punctuation">)</span>
      sep：分隔符。可以为空
    seq：要连接的元素列表、字符串、元组、字典
    
d <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'hello':1,'good':2,'boy':3,'doiido':4&amp;#125;</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#boy:good:doiido:hello</span>
s <span class="token operator">=</span> <span class="token string">"hello good boy doiido"</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#h:e:l:l:o: :g:o:o:d: :b:o:y: :d:o:i:i:d:o</span>
t<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span><span class="token string">'bb'</span><span class="token punctuation">,</span><span class="token string">'cc'</span><span class="token punctuation">,</span><span class="token string">'dd'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#aa:bb:cc:dd</span>

<span class="token comment" spellcheck="true">#编码转换</span>
s<span class="token operator">=</span><span class="token string">'海上生明月'</span>
<span class="token comment" spellcheck="true">#编码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'GBK'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#在GBK这种编码格式中，一个中文占两个字节</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#一个中文占三个字节</span>
 
<span class="token comment" spellcheck="true">#解码</span>
byte<span class="token operator">=</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'GBK'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>byte<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'GBK'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#编码格式和解码格式要相同</span>
</code></pre>
<p><strong>字符串驻留机制</strong>(不重要)</p>
<blockquote>
<pre class=" language-python"><code class="language-python">字符串驻留机制的定义：仅保存一份相同且不可变字符串的方法，不同的值被存放在字符串的驻留池中。python的驻留机制对相同的字符串只保留一份拷贝，后续创建相同字符串时，不会开辟新空间，而是把该字符串的地址赋给新创建的变量。需
</code></pre>
<p>前提：</p>
<ol>
<li>要在控制台进入python(交互模式)</li>
<li>字符串的长度为0或1时</li>
<li>符合标识符（只含有数字、字母、下划线，不能以数字开头，不能以关键字重名）的字符串</li>
<li>字符串只在编译时进行驻留，而非运行时(join函数只在运行时才会输出结果)</li>
<li>[-5,256]之间的整数数字</li>
</ol>
<p>特点:</p>
<ol>
<li>拼接字符串和修改字符串是会比较影响性能的。(用join方法解决)</li>
</ol>
<p>强行驻留:</p>
<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b<span class="token operator">=</span><span class="token string">'1abc'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> sys
<span class="token operator">>></span><span class="token operator">></span> a<span class="token operator">=</span>sys<span class="token punctuation">.</span>intern<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token keyword">is</span> b
<span class="token boolean">True</span>
</code></pre>
</blockquote>
<p>对于长字符串使用“&#x3D;&#x3D;”比较时可能会出现意外的结果，应该使用“is”进行比较。</p>
<p>+++</p>
<p>\000空    \a响铃 \n换行  </p>
<h3 id="List列表"><a href="#List列表" class="headerlink" title="List列表"></a>List列表</h3><p>有序的可变序列</p>
<p>根据需要动态分配和回收内存</p>
<p>任意数据类型混存</p>
<p>列表是写在方括号 <strong>[]</strong> 之间、用逗号分隔开的元素列表。</p>
<p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p>
<p><strong>列表创建</strong></p>
<pre class=" language-python"><code class="language-python">l1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
l2<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'abc'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
l3<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token operator">*</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre>
<p><strong>列表截取</strong></p>
<pre class=" language-python"><code class="language-python">list <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span> <span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token number">70.2</span> <span class="token punctuation">]</span>
Genshin<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 从第二个开始输出到第三个元素</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>list <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输出两次列表</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>list <span class="token operator">+</span> Genshin<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 连接列表</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#步长可以为负  </span>
a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># 将对应的元素值设置为空</span>
</code></pre>
<p><strong>列表增删改查</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 从第二位开始（包含）截取到倒数第二位（不包含）</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"list[1:-2]: "</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 查询操作</span>
l<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0,index查索引(第一次出现位置)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0,从第一个元素查到第五个元素</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2，a元素出现两次</span>
<span class="token comment" spellcheck="true">#添加操作1</span>
list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">]</span>
list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#末尾加B元素</span>

l<span class="token punctuation">[</span>len<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#l末尾加上三个元素</span>
l<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>list1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#末尾依次加上list1的全部元素</span>

k<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">]</span>
k<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#在第二个元素前插入一个元素</span>
    <span class="token comment" spellcheck="true">#['q', 80, 'w', 'e', 'r']</span>

squares <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
squares <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 3, 4, 5, 6]</span>
b<span class="token operator">=</span>squares<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#相当于b=squares[:]</span>

<span class="token comment" spellcheck="true">#添加操作2（列表被当成一个元素）</span>
l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#末尾加元素list1(有括号括起来)</span>
    <span class="token comment" spellcheck="true">#['a', 'b', 'c', 'd', 'a', ['G', 'R', 'T', 'B']]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#T</span>

k<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">]</span>
k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#['q', [1, 2], 'e', 'r']</span>
k<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#[[1, 2], 'q', [1, 2], 'e', 'r']</span>

a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>
n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
x <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> n<span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#嵌套成二维数组 [['a', 'b', 'c'], [1, 2, 3]]</span>

<span class="token comment" spellcheck="true">#删除表中元素</span>
l<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">]</span>
<span class="token keyword">del</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#删除第一个元素</span>
l<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#删除表内第一个值为'a'的元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#[['a', 2], 3]</span>

l<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#列表置空</span>
l<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#删除表最后一个元素</span>
l<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#删除表第三个元素</span>
l<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#删除表中所有元素</span>
<span class="token keyword">del</span> l <span class="token comment" spellcheck="true">#删除列表对象l</span>

<span class="token comment" spellcheck="true">#修改操作</span>
l<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>	<span class="token comment" spellcheck="true">#覆盖第二个元素到第三个元素，并在后面补上没覆盖的元素</span>
l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>	
<span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#[0, 8, 9, 7, 6, 4, 5]</span>

l<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#升序排序</span>
l<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#降序排序</span>
m<span class="token operator">=</span>sorted<span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#升序排序</span>
m<span class="token operator">=</span>sorted<span class="token punctuation">(</span>l<span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#降序排序</span>

l<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#倒排列表中的元素。</span>
<span class="token comment" spellcheck="true">#列表比较需要引入 operator 模块的 eq 方法</span>
</code></pre>
<h3 id="Tuple元组"><a href="#Tuple元组" class="headerlink" title="Tuple元组"></a>Tuple元组</h3><blockquote>
<p>有序不可变序列</p>
</blockquote>
<blockquote>
<p>tuple(iterable)将可迭代系列转换为元组。</p>
</blockquote>
<p><strong>元组创建</strong></p>
<pre class=" language-python"><code class="language-python">t <span class="token operator">=</span> tuple<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
t2<span class="token operator">=</span>tuple<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
t3<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#只包含一个元素的元组要加逗号,不然当成数字</span>
t4<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'py'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
t5<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token comment" spellcheck="true">#空元组</span>
</code></pre>
<p><strong>元组操作</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#查询</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>max<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#打印元组中的最大值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>min<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#打印元组中的最小值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组</span>
<span class="token keyword">del</span> tup
<span class="token comment" spellcheck="true">#元组中元素不能被修改，我们要用重新赋值的方式操作</span>

<span class="token comment" spellcheck="true">#与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</span>
</code></pre>
<p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p>
<p> len(tuple) 计算元组元素个数。</p>
<h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><p>无序不重复数据集合</p>
<p>注意：创建一个空集合必须用 <strong>set()</strong> 而不是 **{ }**，因为 <strong>{ }</strong> 是用来创建一个空字典。</p>
<p><strong>集合创建</strong></p>
<pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;x for x in 'abracadabra' if x not in 'abc'&amp;#125;</span>
s1<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;2, 3, 4, 5, 5, 6, 7, 7&amp;#125;#集合中元素不允许重复</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#&amp;#123;2, 3, 4, 5, 6, 7&amp;#125;</span>
s2<span class="token operator">=</span>set<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#&amp;#123;0, 1, 2, 3, 4&amp;#125;</span>
s3<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#转为集合,&amp;#123;1, 2, 3, 4, 5&amp;#125;</span>
s4<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#生成空集合</span>
s<span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;''&amp;#125; #生成集合&amp;#123;''&amp;#125;</span>
</code></pre>
<p><strong>集合增删改查</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#添加方法</span>
s<span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#集合添加一个d</span>
s<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">#无序，大概长这样&amp;#123;'b', 1, 2, 3, 4, 5, 6, 'd', 'a', 'c'&amp;#125;</span>
<span class="token comment" spellcheck="true">#删除方法</span>
s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 删除集合中的元素<span class="token number">1</span>
s<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
a<span class="token operator">=</span>s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#随机删除一个元素，数字为0的概率比较高</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#展示被删除的删除元素</span>
s<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#清空集合</span>
<span class="token comment" spellcheck="true">#查询方法</span>
a<span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</code></pre>
<p><strong>集合关系与运算</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#集合关系</span>
s1 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;10, 20, 30, 40, 50, 60&amp;#125;</span>
s2 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;10, 20, 30, 40&amp;#125;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#True，s2是s1的子集</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>issuperset<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#True，s1是s2的超集</span>
<span class="token comment" spellcheck="true">#两个集合是否含有交集</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>isdisjoint<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#False 有交集为False</span>
<span class="token comment" spellcheck="true"># set可以进行集合运算</span>
a <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'alacazam'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># a 和 b 的差集，a.difference(b)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># a 和 b 的并集，a.union(b)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># a 和 b 的交集，a.intersection(b)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># a 和 b 中不同时存在的元素，a.symmetric_difference(b)</span>

</code></pre>
<h3 id="Dictionary字典"><a href="#Dictionary字典" class="headerlink" title="Dictionary字典"></a>Dictionary字典</h3><ol>
<li><p>字典是无序的key-value集合。(python3.6以前)</p>
</li>
<li><p>字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>
</li>
<li><p>键(key)必须使用不可变类型。</p>
</li>
<li><p>在同一个字典中，键(key)必须是唯一的。</p>
</li>
<li><p>print(d[‘one’])不存在抛出异常，print(d.get(“one”))不存在输出None</p>
</li>
</ol>
<h4 id="zip函数"><a href="#zip函数" class="headerlink" title="zip函数"></a>zip函数</h4><pre class=" language-python"><code class="language-python">zip<span class="token punctuation">(</span><span class="token punctuation">)</span>函数返回的是一个tuple的迭代器<span class="token punctuation">,</span>需要强制转换成list<span class="token punctuation">(</span><span class="token punctuation">)</span>或dict<span class="token punctuation">(</span><span class="token punctuation">)</span>对象
names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'John'</span><span class="token punctuation">,</span> <span class="token string">'Amy'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">]</span>
scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">]</span>  
data <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>names<span class="token punctuation">,</span> scores<span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token comment" spellcheck="true">#元组列表[('John', 98), ('Amy', 100), ('Jack', 85)]</span>
data2<span class="token operator">=</span> dict<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>names<span class="token punctuation">,</span>scores<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">#&amp;#123;'John': 98, 'Amy': 100, 'Jack': 85&amp;#125;</span>
<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>
    dict_one <span class="token operator">=</span> dict<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'jack'</span><span class="token punctuation">)</span>
    dict_two <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"yi"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"er"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>k1<span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>k2<span class="token punctuation">,</span> v2<span class="token punctuation">)</span> <span class="token keyword">in</span> zip<span class="token punctuation">(</span>dict_one<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dict_two<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>k1<span class="token punctuation">,</span> <span class="token string">'->'</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>k2<span class="token punctuation">,</span> <span class="token string">'->'</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span>
a <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span>
<span class="token number">1</span> <span class="token operator">-</span><span class="token operator">></span> yi
b <span class="token operator">-</span><span class="token operator">></span> <span class="token number">2</span>
<span class="token number">2</span> <span class="token operator">-</span><span class="token operator">></span> er
c <span class="token operator">-</span><span class="token operator">></span> jack
one <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span>
</code></pre>
<p><strong>字典创建</strong></p>
<pre class=" language-python"><code class="language-python">d<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;;d[1]="666";d[2]="888" #先创建空字典对象，再赋值</span>
d1<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;1:'yi',2:'er',3:'san','one':1&amp;#125;</span>
d2<span class="token operator">=</span>dict<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'jack'</span><span class="token punctuation">)</span>
d3<span class="token operator">=</span>dict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"yi"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"er"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

key<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"ABC"</span><span class="token punctuation">,</span><span class="token string">"MN"</span><span class="token punctuation">,</span><span class="token string">"K"</span><span class="token punctuation">]</span>
value<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">]</span>
d4<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;k.lower():v for k,v in zip(key,value)&amp;#125;</span>
    <span class="token comment" spellcheck="true">#&amp;#123;'abc': '1', 'mn': '2', 'k': '3'&amp;#125;</span>
d5 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;k:len(k) for k in key&amp;#125;</span>
    <span class="token comment" spellcheck="true">#&amp;#123;'ABC': 3, 'MN': 2, 'K': 1&amp;#125;</span>
d6<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;x: x**2 for x in (2, 4, 6)&amp;#125;</span>
    <span class="token comment" spellcheck="true">#&amp;#123;2: 4, 4: 16, 6: 36&amp;#125;</span>
</code></pre>
<p><strong>字典增删改查</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#查询操作</span>
d<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;1:'yi',2:'er',3:'san','one':1&amp;#125;</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 输出键为 'one' 的值</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 输出键为 2 的值</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 输出完整的字典</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>		<span class="token comment" spellcheck="true">#当成字符串，输出完整字典字典</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出所有键dict_keys([1, 2, 3, 'one'])</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出所有值dict_values(['yi', 'er', 'san', 1])</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#获取所有键值对</span>
    <span class="token comment" spellcheck="true">#dict_items([(1, 'yi'), (2, 'er'), (3, 'san'), ('one', 1)])</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'one'</span> <span class="token keyword">in</span> d<span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#True</span>
<span class="token comment" spellcheck="true">#增加操作</span>
d<span class="token punctuation">[</span><span class="token string">"dj"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"qwe"</span>
<span class="token comment" spellcheck="true">#修改操作</span>
d<span class="token punctuation">[</span><span class="token string">"dj"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"rty"</span> <span class="token comment" spellcheck="true">#修改value</span>

my_dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'a': 4, 'b': 2, 'c': 1, 'd': 3&amp;#125;</span>
sorted_dict <span class="token operator">=</span> dict<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>my_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token triple-quoted-string string">'''
    1. 使用items()方法将字典转换为元组列表，元组的第一个元素为键，第二个元素为值。
    2. 在sorted()函数中，使用lambda表达式指定排序规则，例如按值从小到大排序：key=lambda x: x[1]。
    3. 使用dict()方法将排序后的元组列表转换回字典。
    '''</span>
<span class="token comment" spellcheck="true">#删除操作</span>

<span class="token keyword">del</span> d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 删除键3</span>
d<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 清空字典</span>
<span class="token keyword">del</span> d         <span class="token comment" spellcheck="true"># 删除字典</span>
str<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出字典，可以打印的字符串表示。</span>
<span class="token comment" spellcheck="true">#不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住</span>
<span class="token comment" spellcheck="true">#键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行</span>
</code></pre>
<h3 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h3><p>参考:<a href="https://github.com/familyld/learnpython/blob/master/Difference_between_DeepCopy_and_ShallowCopy.md">https://github.com/familyld/learnpython/blob/master/Difference_between_DeepCopy_and_ShallowCopy.md</a></p>
<ul>
<li>非容器类型（如数字、字符串、和其他’原子’类型的对象）不存在拷贝。</li>
<li>只包含原子类型对象的元组变量不存在拷贝。</li>
</ul>
<p>​		首先，如果我们不进行拷贝，而是直接赋值，很有可能会出现意料之外的结果。比如a是一个列表，b&#x3D;a，那么修改a的同时，b也会同样被修改，因为Python对象的赋值都是进行引用（内存地址）传递的，实际上a和b指向的都是同一个对象。</p>
<p>​	浅拷贝会创建一个新的对象，然后把生成的新对象赋值给新变量，新的对象是指copy创建了一个新的<strong>列表对象</strong>，而不是列表里的int对象。这样a和b这两个变量指向的列表对象就不是同一个，但和两个列表<strong>对象里面的元素依然是按引用传递</strong>的，所以a列表中的对象1和b列表中的对象1是同一个。这时只有修改a列表的<strong>可变</strong>对象，b列表才会受到影响。</p>
<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> copy
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token keyword">is</span> a
<span class="token boolean">False</span>
<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">is</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>
<span class="token operator">>></span><span class="token operator">></span> a
<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> b
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">]</span>	<span class="token comment" spellcheck="true">#可变对象[3,]</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token keyword">is</span> b
<span class="token boolean">False</span>
<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> b
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre>
<p>​		深拷贝不仅重新创建对象，还重新创建对象里的元素。但是对于对象中的不可变元素，深拷贝不会重新生成，变量改动时会自动生成另一个不可变对象，然后改变引用的地址。</p>
<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token keyword">is</span> b
<span class="token boolean">False</span>
<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">is</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">is</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token boolean">False</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> b
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre>
<h3 id="generator生成器"><a href="#generator生成器" class="headerlink" title="generator生成器"></a>generator生成器</h3><p>在 Python 中，生成器是一种特殊的迭代器，它使用了 yield 语句来实现迭代器的协议，并且可以动态地生成值，避免了一次性生成大量数据所带来的内存消耗。</p>
<p>在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 示例 1：使用生成器函数创建生成器</span>
<span class="token keyword">def</span> <span class="token function">my_generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">yield</span> <span class="token number">1</span>
    <span class="token keyword">yield</span> <span class="token number">2</span>
    <span class="token keyword">yield</span> <span class="token number">3</span>

<span class="token comment" spellcheck="true"># 使用 for 循环遍历生成器</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> my_generator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 示例 2：使用生成器表达式创建生成器</span>
gen <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment" spellcheck="true"># 使用 for 循环遍历生成器</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> gen<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre>
<h3 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h3><p>Iterable 可迭代对象：可以直接作用于for循环的对象</p>
<p>Iterator迭代器：可以被next()函数调用并不断返回下一个值的对象。</p>
<ul>
<li>生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。</li>
<li>把list、dict、str等Iterable变成Iterator可以使用iter()函数，iter(list1)</li>
</ul>
<pre class=" language-python"><code class="language-python">list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
it <span class="token operator">=</span> iter<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建迭代器对象</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>next<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#1 输出迭代器的下一个元素</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>next<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#2</span>

<span class="token comment" spellcheck="true">#目录遍历</span>
list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
it <span class="token operator">=</span> iter<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建迭代器对象</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> it<span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#输出1 2 3 4</span>

<span class="token comment" spellcheck="true">#用next()函数</span>
<span class="token keyword">import</span> sys         <span class="token comment" spellcheck="true"># 引入 sys 模块</span>
list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
it <span class="token operator">=</span> iter<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建迭代器对象</span>
 
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span>next<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#把一个类作为一个迭代器使用需要在类中实现两个方法 __iter__() 与 __next__() 。</span>

<span class="token comment" spellcheck="true">#在 __next__() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。</span>

<span class="token comment" spellcheck="true">#迭代20次终止</span>
<span class="token keyword">class</span> <span class="token class-name">MyNumbers</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> self
  <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> self<span class="token punctuation">.</span>a <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">:</span>
      x <span class="token operator">=</span> self<span class="token punctuation">.</span>a
      self<span class="token punctuation">.</span>a <span class="token operator">+=</span> <span class="token number">1</span>
      <span class="token keyword">return</span> x
    <span class="token keyword">else</span><span class="token punctuation">:</span>
      <span class="token keyword">raise</span> StopIteration	<span class="token comment" spellcheck="true">#标识迭代的完成</span>
myclass <span class="token operator">=</span> MyNumbers<span class="token punctuation">(</span><span class="token punctuation">)</span>
myiter <span class="token operator">=</span> iter<span class="token punctuation">(</span>myclass<span class="token punctuation">)</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> myiter<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre>
<h2 id="3-条件语句和循环语句"><a href="#3-条件语句和循环语句" class="headerlink" title="3. 条件语句和循环语句"></a>3. 条件语句和循环语句</h2><h3 id="if…elif-else…"><a href="#if…elif-else…" class="headerlink" title="if…elif..else…"></a>if…elif..else…</h3><p>两种写法如下</p>
<pre class=" language-python"><code class="language-python">score<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入一个成绩:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> score<span class="token operator">>=</span><span class="token number">90</span> <span class="token operator">and</span> score<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A级'</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> score<span class="token operator">>=</span><span class="token number">80</span> <span class="token operator">and</span> score<span class="token operator">&lt;=</span><span class="token number">89</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B级'</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> score<span class="token operator">>=</span><span class="token number">70</span> <span class="token operator">and</span> score<span class="token operator">&lt;=</span><span class="token number">79</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C级'</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> score<span class="token operator">>=</span><span class="token number">60</span> <span class="token operator">and</span> score<span class="token operator">&lt;=</span><span class="token number">69</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'D级'</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> score<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> score<span class="token operator">&lt;=</span><span class="token number">59</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'E级'</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"对不起，您的输入有误"</span><span class="token punctuation">)</span>

score2<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入第二个成绩:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'score>score2'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> score<span class="token operator">></span>score2 <span class="token keyword">else</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'score&lt;=score2'</span><span class="token punctuation">)</span>

</code></pre>
<h3 id="range函数创建列表"><a href="#range函数创建列表" class="headerlink" title="range函数创建列表"></a>range函数创建列表</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#range的三种创建方式</span>
r<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#默认从0开始，默认相差1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#range(0,10)，区间左闭右开</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#可用该方法查看range对象中的整数序列</span>
 
r<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#指定了起始值，从1开始不包含10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>
 
r<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#指定了起始值结束值和步长</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token number">0</span>
sum<span class="token operator">=</span><span class="token number">0</span>
<span class="token keyword">while</span> a<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> bool<span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        sum<span class="token operator">+=</span>a
    a<span class="token operator">+=</span><span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1-100的偶数和'</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span>
</code></pre>
<h3 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h3><pre class=" language-pythonthon"><code class="language-pythonthon">for item in 'Python':
    print(item)
 
for i in range(10):
    print(i)
    
list = ['chinese','english','japanese']
u = 'say:'
for i, j in enumerate(list):
    list[i] = u + j.title()
print(list)	#输出['say:Chinese', 'say:English', 'say:Japanese']

#循环语句可以有 else 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行，但循环被 break 终止时不执行。
pass 不做任何事情，一般用做占位语句
</code></pre>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/07/14/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/break-continue-536.png" class="lozad post-image"src="/2023/07/14/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/break-continue-536.png"></p>
<pre class=" language-python"><code class="language-python"> 
<span class="token keyword">import</span> sys
 
<span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 生成器函数 - 斐波那契</span>
    a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">></span> n<span class="token punctuation">)</span><span class="token punctuation">:</span> 
            <span class="token keyword">return</span>
        <span class="token keyword">yield</span> a
        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b
        counter <span class="token operator">+=</span> <span class="token number">1</span>
f <span class="token operator">=</span> fibonacci<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># f 是一个迭代器，由生成器返回生成</span>
 
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span>next<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h2><ul>
<li><p>函数代码块以 <strong>def</strong> 关键词开头，后接函数标识符名称和圆括号 **()**。</p>
</li>
<li><p>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</p>
</li>
<li><p>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</p>
</li>
<li><p>函数内部定义的变量前面加global可以让该变量变为全局变量</p>
</li>
<li><p><strong>return [表达式]</strong> 结束函数，选择性地返回一个值给调用方，不带表达式的 return 相当于返回 None。</p>
<p>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p>
<ul>
<li><strong>不可变类型：</strong>变量赋值 <strong>a&#x3D;5</strong> 后再赋值 <strong>a&#x3D;10</strong>，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变 a 的值，相当于新生成了 a。</li>
<li><strong>可变类型：</strong>变量赋值 <strong>la&#x3D;[1,2,3,4]</strong> 后再赋值 <strong>la[2]&#x3D;5</strong> 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li>
</ul>
<p>python 函数的参数传递：</p>
<ul>
<li><strong>不可变类型：</strong>值传递，如整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象。</li>
<li><strong>可变类型：</strong>引用传递，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响</li>
</ul>
<p>可变对象在函数里修改了参数，那么在调用这个函数的函数里，原始的参数也被改变了</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#py传递不可变对象</span>
<span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 指向的是同一个对象</span>
    a<span class="token operator">=</span><span class="token number">10</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 一个新对象</span>
a<span class="token operator">=</span><span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
change<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#输出</span>
<span class="token number">3177650651376</span>
<span class="token number">3177650651376</span>
<span class="token number">3177650651664</span>
<span class="token number">3177650651376</span>
<span class="token comment" spellcheck="true">#可以看见在调用函数前后，形参和实参指向的是同一个对象（对象 id 相同），在函数内部修改形参后，形参指向的是不同的 id。</span>
参数
</code></pre>
</li>
</ul>
<h3 id="1-参数类型"><a href="#1-参数类型" class="headerlink" title="1. 参数类型"></a>1. 参数类型</h3><ul>
<li>位置参数 ：调用函数时根据函数定义的<strong>参数位置</strong>来传递参数。</li>
<li>关键字参数：函数调用时通过“<strong>键&#x3D;值</strong>”形式传递参数。</li>
<li>缺省参数：也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不传入该默认参数的值。</li>
<li>不定长参数：不定长参数也叫可变参数，用于不确定调用的时候会传递多少个参数（包括不传参）的场景。</li>
</ul>
<p>注意：</p>
<p>​	定义函数时，要遵循普通参数，默认参数，第一种不定长参数，第二种不定长参数的顺序。def func(a,b&#x3D;3,*c,**d)</p>
<p>​	调用函数时，位置参数必须在关键字参数的前面，普通参数必须赋值。</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span>
<span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">35</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 默认参数age=35需要放在普通参数后面，不然会报错</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"名字: "</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"年龄: "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>
   <span class="token keyword">return</span>
<span class="token comment" spellcheck="true">#调用函数</span>
printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"a"</span> <span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#关键字参数</span>
printinfo<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">"a"</span> <span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#name必须传值</span>
printinfo<span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#位置参数</span>
    名字<span class="token punctuation">:</span>  a 年龄<span class="token punctuation">:</span>  <span class="token number">50</span>
    名字<span class="token punctuation">:</span>  a 年龄<span class="token punctuation">:</span>  <span class="token number">35</span>
    名字<span class="token punctuation">:</span>  zhangsan 年龄<span class="token punctuation">:</span>  <span class="token number">25</span>

<span class="token comment" spellcheck="true">#不定长参数</span>
<span class="token number">1</span><span class="token punctuation">.</span> 位置传递：以<span class="token operator">*</span>标记一个形式参数，以元组的形式接受参数，一般命名为args。
<span class="token number">2</span><span class="token punctuation">.</span> 关键字传递：以<span class="token operator">**</span>标记一个形式参数，以字典的形式接受参数，一般命名为kwargs。

<span class="token keyword">def</span> <span class="token function">sun</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token operator">**</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
sun<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token triple-quoted-string string">'''
    (1, 2)
    &amp;#123;'x': 3, 'y': 4&amp;#125;
    '''</span>

<span class="token comment" spellcheck="true"># 使用不定长参数传固定值,注意，*a、**b可省略，name不可省略,否则报错</span>
<span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span>age <span class="token operator">=</span> <span class="token number">35</span> <span class="token punctuation">,</span><span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token operator">**</span>b<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#定义函数</span>
    <span class="token comment" spellcheck="true"># 默认参数age=35需要放在最后，不然会报错</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span> name<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span> age<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token keyword">return</span>
<span class="token comment" spellcheck="true">#调用函数</span>
printinfo<span class="token punctuation">(</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#注意顺序</span>

<span class="token comment" spellcheck="true"># 如果单独出现星号 *，则星号 * 后的参数必须用关键字传入：</span>
<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>
lst<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span>
fun<span class="token punctuation">(</span><span class="token operator">*</span>lst<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#11 22 33,在函数调用时，将列表中的每个元素都转换为位置实参传入</span>
dic<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'a':111,'b':222,'c':333&amp;#125;	#a=111,b=222,c=333</span>
fun<span class="token punctuation">(</span><span class="token operator">**</span>dic<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#111 222 333,在函数调用时，将字典中的键值对都转换为关键字实参传入</span>
</code></pre>
<h3 id="2-匿名函数"><a href="#2-匿名函数" class="headerlink" title="2. 匿名函数"></a>2. 匿名函数</h3><blockquote>
<p>Python 使用 <strong>lambda</strong> 来创建匿名函数。</p>
<p>lambda 传入参数:函数体</p>
<ul>
<li>lambda 的主体是一个表达式，而不是一个代码块。仅仅能在 lambda 表达式中封装有限的逻辑进去。</li>
<li>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。</li>
<li>虽然 lambda 函数看起来只能写一行，却不等同于 C 或 C++ 的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</li>
</ul>
</blockquote>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span>
sum <span class="token operator">=</span> <span class="token keyword">lambda</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> arg1 <span class="token operator">+</span> arg2	<span class="token comment" spellcheck="true">#只能写一行</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span> sum<span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 30</span>

rs<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x <span class="token keyword">if</span> x<span class="token operator">>=</span>y <span class="token keyword">else</span> y<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 20</span>
</code></pre>
<pre class=" language-python"><code class="language-python">我们可以将匿名函数封装在一个函数内，这样可以使用同样的代码来创建多个匿名函数。
<span class="token keyword">def</span> <span class="token function">myfunc</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">return</span> <span class="token keyword">lambda</span> a <span class="token punctuation">:</span> a <span class="token operator">*</span> n
 
mydoubler <span class="token operator">=</span> myfunc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
mytripler <span class="token operator">=</span> myfunc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
 
<span class="token keyword">print</span><span class="token punctuation">(</span>mydoubler<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 22</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mytripler<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 33</span>
</code></pre>
<h2 id="5-面向对象"><a href="#5-面向对象" class="headerlink" title="5. 面向对象"></a>5. 面向对象</h2><h3 id="1-基础-1"><a href="#1-基础-1" class="headerlink" title="1. 基础"></a>1. 基础</h3><p>在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student2</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""docstring for Student"""</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#构造方法</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用了构造函数"</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name	<span class="token comment" spellcheck="true">#私有属性赋值</span>
        self<span class="token punctuation">.</span>__score <span class="token operator">=</span> score
    <span class="token keyword">def</span> <span class="token function">print_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>	<span class="token comment" spellcheck="true">#类的方法必须有self参数</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s : %s '</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__score<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__name <span class="token comment" spellcheck="true">#外部通过get_name函数访问私有属性</span>
    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用了析构函数"</span><span class="token punctuation">)</span>
     
bartt <span class="token operator">=</span> Student2<span class="token punctuation">(</span><span class="token string">'bart'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span>
bartt<span class="token punctuation">.</span>print_score<span class="token punctuation">(</span><span class="token punctuation">)</span>
bartt<span class="token punctuation">.</span>swecore<span class="token operator">=</span><span class="token number">89</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>bartt<span class="token punctuation">.</span>swecore<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>bartt<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#Python解释器对外把__name变量改成了_Student__name,所以，仍然可以通过_Student__name来访问__name变量：</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>bartt<span class="token punctuation">.</span>_Student2__name<span class="token punctuation">)</span>
</code></pre>
<h3 id="2-魔术方法"><a href="#2-魔术方法" class="headerlink" title="2.魔术方法"></a>2.魔术方法</h3><h4 id="简单的"><a href="#简单的" class="headerlink" title="简单的"></a>简单的</h4><pre class=" language-python"><code class="language-python">__init__	构造函数
__del__		析构函数
__dict__ 获取对象属性和方法
__mro__	查看类的方法的解析顺序<span class="token punctuation">(</span>类的调用顺序<span class="token punctuation">)</span>
</code></pre>
<h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student2</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 构造方法</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用了构造函数"</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name  <span class="token comment" spellcheck="true"># 私有属性赋值</span>
        self<span class="token punctuation">.</span>__score <span class="token operator">=</span> score
    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
c <span class="token operator">=</span> Student2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#先创建对象并调用构造函数</span>
c<span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#使得类实例对象可以像调用普通函数那样使用</span>

调用了构造函数
<span class="token number">3</span> <span class="token number">4</span>
</code></pre>
<h4 id="str和new"><a href="#str和new" class="headerlink" title="str和new"></a>str和new</h4><pre class=" language-python"><code class="language-python">__new__ 创建一个新的实例对象的静态方法
    至少传入一个参数cls，cls表示要实例化的类
    若__new__没有正确返回当前类cls的实例，那__init__是不会被调用的，即使是父类的实例也不行，将没有__init__被调用。

<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"into A __init__"</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value
    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"into A __new__"</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> object<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 不知道为啥这里参数只能是cls</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#子类重写父类__init__()方法</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"into B __init__"</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value

    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"into B __new__"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> super<span class="token punctuation">(</span>B<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 重写__str__方法，返回值必须是字符串</span>
        <span class="token keyword">return</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>
    b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 自动调用__str__方法</span>
<span class="token comment" spellcheck="true">#结果</span>
into B __new__
into A __new__
into B __init__
<span class="token number">10</span>
</code></pre>
<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PositiveInteger</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">:</span>	<span class="token comment" spellcheck="true">#自定义一个整数类型</span>
    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> super<span class="token punctuation">(</span>PositiveInteger<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> abs<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
 
i <span class="token operator">=</span> PositiveInteger<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#3</span>
</code></pre>
<h3 id="3-继承，重写"><a href="#3-继承，重写" class="headerlink" title="3. 继承，重写"></a>3. 继承，重写</h3><p>多重继承顺序:<a href="https://zhuanlan.zhihu.com/p/268136917">https://zhuanlan.zhihu.com/p/268136917</a></p>
<p>python使用C3 linearization算法搜索</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">people</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token string">""</span>
    age <span class="token operator">=</span> <span class="token number">0</span>
    __weight <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name<span class="token operator">=</span>n
        self<span class="token punctuation">.</span>age<span class="token operator">=</span>a
        self<span class="token punctuation">.</span>__weight<span class="token operator">=</span>w
    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 说：我今年 %d 岁了，体重 %d kg"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">,</span>self<span class="token punctuation">.</span>__weight<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">get_weight</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__weight
<span class="token comment" spellcheck="true">#单继承示例</span>
<span class="token keyword">class</span> <span class="token class-name">student</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#子类student继承父类people</span>
    grade<span class="token operator">=</span><span class="token string">''</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">,</span>g<span class="token punctuation">)</span><span class="token punctuation">:</span>
        super<span class="token punctuation">(</span>student<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用父类构造函数</span>
            <span class="token comment" spellcheck="true">#或者people.__init__(self,n,a,w)  使用这个可能会出现父类__init__多次调用的情况</span>
            <span class="token comment" spellcheck="true">#或者super().__init__(n,a,w)</span>
        <span class="token comment" spellcheck="true"># 也可以super().__init__(self,n,a,w)</span>
        self<span class="token punctuation">.</span>grade<span class="token operator">=</span>g
    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#子类重写父类方法</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 说：我今年 %d 岁，读 %d 年级，体重 %d kg"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">,</span>self<span class="token punctuation">.</span>grade<span class="token punctuation">,</span> self<span class="token punctuation">.</span>get_weight<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">speaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    topic <span class="token operator">=</span> <span class="token string">''</span>
    name <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> n
        self<span class="token punctuation">.</span>topic <span class="token operator">=</span> t
    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我叫 %s，我是一个演说家，我演讲的主题是 %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>topic<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#多继承</span>
<span class="token keyword">class</span> <span class="token class-name">sample</span><span class="token punctuation">(</span>speaker<span class="token punctuation">,</span>student<span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span><span class="token string">''</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">,</span>g<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>
        student<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span> self<span class="token punctuation">,</span>n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> w<span class="token punctuation">,</span> g<span class="token punctuation">)</span>
        super<span class="token punctuation">(</span>sample<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span> n<span class="token punctuation">,</span> t<span class="token punctuation">)</span>


test <span class="token operator">=</span> sample<span class="token punctuation">(</span><span class="token string">"Tim"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"Python"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sample<span class="token punctuation">.</span>__mro__<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#查看方法的搜索顺序</span>
test<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#方法名同，一般调用的是在括号中参数位置排前父类的方法(sample(speaker,student))</span>
    <span class="token comment" spellcheck="true">#我叫 Tim，我是一个演说家，我演讲的主题是 Python</span>
super<span class="token punctuation">(</span>student<span class="token punctuation">,</span>test<span class="token punctuation">)</span><span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用student父类方法</span>
    <span class="token comment" spellcheck="true">#Tim 说：我今年 25 岁了，体重 80 kg</span>

t2<span class="token operator">=</span>student<span class="token punctuation">(</span>test<span class="token punctuation">.</span>name<span class="token punctuation">,</span>test<span class="token punctuation">.</span>age<span class="token punctuation">,</span>test<span class="token punctuation">.</span>get_weight<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>test<span class="token punctuation">.</span>grade<span class="token punctuation">)</span>
t2<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#Tim 说：我今年 25 岁，读 4 年级，体重 80 kg</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>test<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#['Tim', 25, 80, 4]</span>
    <span class="token comment" spellcheck="true">#__dict__属性获取sample类对象test的属性字典</span>
    <span class="token comment" spellcheck="true">#提取字典的值，转为列表形式，截取前四个参数</span>
t3<span class="token operator">=</span>student<span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">(</span>test<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
t3<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#Tim 说：我今年 25 岁，读 4 年级，体重 80 kg</span>
</code></pre>
<h3 id="4-抽象类与多态"><a href="#4-抽象类与多态" class="headerlink" title="4. 抽象类与多态"></a>4. 抽象类与多态</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> abc<span class="token comment" spellcheck="true"># abstract base class</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>abc<span class="token punctuation">.</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#同一类事物:动物</span>
<span class="token comment" spellcheck="true">#或者class Animal(abc.ABC):</span>
    <span class="token comment" spellcheck="true">#metaclass 控制类的创建与行为</span>
    @abc<span class="token punctuation">.</span>abstractmethod
    <span class="token keyword">def</span> <span class="token function">talk</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#动物的形态之一:猫</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name
    <span class="token keyword">def</span> <span class="token function">talk</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'&amp;#123;self.name&amp;#125; say miaomiao'</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#动物的形态之二:狗</span>
    <span class="token keyword">def</span> <span class="token function">talk</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'say wangwang'</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Pig</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#动物的形态之三:猪</span>
    <span class="token keyword">def</span> <span class="token function">talk</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'say aoao'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 多态是指一类事物有多种形态，比如动物类，可以有猫，狗，猪等等。（一个抽象类有多个子类，因而多态的概念依赖于继承）</span>
<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>
    c<span class="token operator">=</span>Cat<span class="token punctuation">(</span><span class="token string">"power"</span><span class="token punctuation">)</span>
    c<span class="token punctuation">.</span>talk<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#结果</span>
power say miaomiao
</code></pre>
<h3 id="5-闭包与装饰器"><a href="#5-闭包与装饰器" class="headerlink" title="5. 闭包与装饰器"></a>5. 闭包与装饰器</h3><h4 id="1-闭包"><a href="#1-闭包" class="headerlink" title="1.闭包"></a>1.闭包</h4><ul>
<li>函数的返回值必须是被包函数对象(函数名)</li>
<li>闭包中必须引用了外层函数作用域内的变量或者形参</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span>n1<span class="token punctuation">)</span>
    <span class="token keyword">return</span> inner
<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>
    jk<span class="token operator">=</span>outer<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#此时jk可看作inner</span>
    jk<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#33 执行jk()就相当于执行inner()</span>
</code></pre>
<p><strong>闭包修改外部函数变量</strong></p>
<blockquote>
<p>函数内部想要修改全局变量，使用global关键字<br>在闭包函数内部，想要修改外部函数的局部变量，需要使用nonlocal关键字</p>
</blockquote>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    num <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># num = 100  ,这一行的num只是inner里面的num</span>
        nonlocal num  <span class="token comment" spellcheck="true"># 声明使用外部变量 num ，不重新定义</span>
        num <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'调用inner之前：&amp;#123;num&amp;#125;'</span><span class="token punctuation">)</span>
    inner<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'调用inner之后：&amp;#123;num&amp;#125;'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> inner

func <span class="token operator">=</span> outer<span class="token punctuation">(</span><span class="token punctuation">)</span>
调用inner之前：<span class="token number">10</span>
调用inner之后：<span class="token number">100</span>
</code></pre>
<p><strong>闭包陷阱</strong></p>
<blockquote>
<p><code>outer</code> 函数返回了一个包含三个闭包（<code>inner</code> 函数）的列表 <code>f_list</code>。每个闭包都捕获了循环变量 <code>i</code> 的引用，而不是在它们被创建时的值。因此，在循环结束后，这些闭包引用的 <code>i</code> 都指向了最终的循环结束值，即 <code>3</code>。</p>
</blockquote>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    f_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  
            <span class="token keyword">return</span> i <span class="token operator">*</span> i
        f_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>inner<span class="token punctuation">)</span>
    <span class="token keyword">return</span> f_list
<span class="token keyword">for</span> fun <span class="token keyword">in</span> outer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#输出</span>
<span class="token number">9</span>
<span class="token number">9</span>
<span class="token number">9</span>
<span class="token comment" spellcheck="true">#解决问题：创建闭包时传递参数来捕获循环变量的值</span>
<span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span>x<span class="token operator">=</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 使用参数 x 捕获循环变量值</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x 
</code></pre>
<h4 id="2-装饰器简介"><a href="#2-装饰器简介" class="headerlink" title="2. 装饰器简介"></a>2. 装饰器简介</h4><p>装饰器本质就是一个闭包函数，只不过比较特殊</p>
<p>​	1.定义外层函数(要求参数只有一个，类型是函数类型，调用时传参传递的是原函数）</p>
<p>​	2.定义内层函数，在内层函数中，书写新的功能，并在合适的时机调用原函数</p>
<p>​	3.返回内部函数的地址</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time
<span class="token keyword">def</span> <span class="token function">jkloli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我是jkloli"</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">count_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        func<span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#引用外部函数的形参func,实际是调用原函数jkloli()</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行时间为："</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t1<span class="token punctuation">)</span>
    <span class="token keyword">return</span> inner	<span class="token comment" spellcheck="true">#返回内层函数地址</span>
 
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    jk <span class="token operator">=</span> count_time<span class="token punctuation">(</span>jkloli<span class="token punctuation">)</span>
    jk<span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">#jk()相当于inner()</span>
我是jkloli
执行时间为： <span class="token number">2.0066511631011963</span>
</code></pre>
<h4 id="3-装饰器语法糖"><a href="#3-装饰器语法糖" class="headerlink" title="3. 装饰器语法糖"></a>3. 装饰器语法糖</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login_check</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 书写新的功能，使用print进行模拟</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录验证......'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 新的功能书写完成之后，调用原函数</span>
        fn<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> inner

<span class="token comment" spellcheck="true"># 装饰器的语法糖格式，</span>
@login_check  <span class="token comment" spellcheck="true"># comment =login_check(comment)</span>
<span class="token keyword">def</span> <span class="token function">comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 使用print输出模拟评论功能</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进行评论检查......'</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    comment<span class="token punctuation">(</span><span class="token punctuation">)</span>
登录验证<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
进行评论检查<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre>
<h4 id="4-装饰带返回值的原函数"><a href="#4-装饰带返回值的原函数" class="headerlink" title="4. 装饰带返回值的原函数"></a>4. 装饰带返回值的原函数</h4><ol>
<li><p>如果原函数有返回值，返回的就是原函数的返回值</p>
</li>
<li><p>如果没有返回的是None</p>
</li>
</ol>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">logger</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'&amp;#123;fn.__name__&amp;#125; enter....'</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'&amp;#123;fn.__name__&amp;#125; leave....'</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 函数没有书写返回值，默认返回None</span>
        <span class="token keyword">return</span> result
    <span class="token keyword">return</span> inner

@logger <span class="token comment" spellcheck="true"># func=logger(func)</span>
<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>into<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> into

@logger
<span class="token keyword">def</span> <span class="token function">my_sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#func('hello')相当于inner('hello')</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>my_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 结果</span>
func enter<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> func leave<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> hello
func enter<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> func leave<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
my_sum enter<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> my_sum leave<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">4</span>
</code></pre>
<h4 id="5-带参数的装饰器"><a href="#5-带参数的装饰器" class="headerlink" title="5. 带参数的装饰器"></a>5. 带参数的装饰器</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">p</span><span class="token punctuation">(</span>name<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span>fnc<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 捕获传递给它的函数f</span>
        <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span>j<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> fnc<span class="token punctuation">(</span>j<span class="token punctuation">)</span>		<span class="token comment" spellcheck="true">#注意return</span>
        <span class="token keyword">return</span> inner
    <span class="token keyword">return</span> outer
@p<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 将f函数传给装饰器工厂p,然后被包裹在outer和inner里</span>
<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> name

<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    k <span class="token operator">=</span> p<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 手动调用装饰器</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#结果</span>
abc
abc
</code></pre>
<h4 id="6-类装饰器"><a href="#6-类装饰器" class="headerlink" title="6. 类装饰器"></a>6. 类装饰器</h4><p>回到装饰器上的概念上来，装饰器要求接受一个callable对象，并返回一个callable对象（不太严谨）。那么用类来实现也是也可以的。我们可以让类的构造函数<code>__init__()</code>接受一个函数，然后重载<code>__call__()</code>并返回一个函数，也可以达到装饰器函数的效果。</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">logging</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"进入init函数"</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>func <span class="token operator">=</span> func

    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"进入call函数"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
    
@logging	<span class="token comment" spellcheck="true">#此时进入init函数</span>
<span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>something<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"say &amp;#123;&amp;#125;!"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>something<span class="token punctuation">)</span><span class="token punctuation">)</span>
say<span class="token punctuation">(</span><span class="token number">555</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#结果</span>
进入init函数
进入call函数
say <span class="token number">555</span>!

相当于
<span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>something<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"say &amp;#123;&amp;#125;!"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>something<span class="token punctuation">)</span><span class="token punctuation">)</span>
say<span class="token operator">=</span>logging<span class="token punctuation">(</span>say<span class="token punctuation">)</span>
say<span class="token punctuation">(</span><span class="token number">555</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="7-带参数的类装饰器"><a href="#7-带参数的类装饰器" class="headerlink" title="7. 带参数的类装饰器"></a>7. 带参数的类装饰器</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">logging</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"进入init函数"</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>a <span class="token operator">=</span> a
        self<span class="token punctuation">.</span>b <span class="token operator">=</span> b
    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fnc<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"进入call函数"</span><span class="token punctuation">)</span>
        <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
             <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"参数：&amp;#123;self.a&amp;#125; &amp;#123;self.b&amp;#125;"</span><span class="token punctuation">)</span>
             fnc<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
        <span class="token keyword">return</span> speak

@logging<span class="token punctuation">(</span><span class="token string">"come on"</span><span class="token punctuation">,</span> <span class="token string">"daddy"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>something<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"say &amp;#123;&amp;#125;!"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>something<span class="token punctuation">)</span><span class="token punctuation">)</span>

say<span class="token punctuation">(</span><span class="token number">888</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#结果</span>
进入init函数
进入call函数
参数：come on daddy
say <span class="token number">888</span>!
</code></pre>
<h2 id="6-文件操作"><a href="#6-文件操作" class="headerlink" title="6. 文件操作"></a>6. 文件操作</h2><h3 id="1-文件基本读写"><a href="#1-文件基本读写" class="headerlink" title="1. 文件基本读写"></a>1. 文件基本读写</h3><p><strong>模式</strong></p>
<pre class=" language-python"><code class="language-python">mode字符       意义
<span class="token string">'r'</span>       文本读取（默认）
<span class="token string">'w'</span>       文本写入，并先清空文件（慎用），文件不存在则创建
<span class="token string">'x'</span>       文本写，排它性创建，如果文件已存在则失败
<span class="token string">'a'</span>	      文本追加，如果文件存在则在末尾追加，不存在则创建
与mode组合字符	意义
<span class="token string">'b'</span>	    二进制模式，例如：<span class="token string">'rb'</span>表示二进制读，不需要encoding
<span class="token string">'t'</span>	    文本模式（默认），例如：rt 一般省略 t
<span class="token string">'+'</span>	    读取与写入，例如：<span class="token string">'r+'</span> 表示同时读写
</code></pre>
<p><strong>一些读写函数</strong></p>
<table>
<thead>
<tr>
<th>编号</th>
<th>关键字</th>
<th>使用方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>open</td>
<td>文件对象 &#x3D; open（file，mode，encoding）</td>
<td>打开文件获得指定文件对象</td>
</tr>
<tr>
<td>2</td>
<td>read</td>
<td>文件对象.read（num）</td>
<td>文本模式下读取num长度字符，二进制下读取num长度字节，不指定num读取文件全部</td>
</tr>
<tr>
<td>3</td>
<td>readline</td>
<td>文件对象.readline（）</td>
<td>读取一行</td>
</tr>
<tr>
<td>4</td>
<td>readlines</td>
<td>文件对象.readline（）</td>
<td>读取全部行，得到列表</td>
</tr>
<tr>
<td>5</td>
<td>for</td>
<td>for line in 文件对象</td>
<td>for循环文件行，一次循环得到一行数据</td>
</tr>
<tr>
<td>6</td>
<td>close</td>
<td>文件对象.close（）</td>
<td>关闭文件对象，具有flush的作用</td>
</tr>
<tr>
<td>7</td>
<td>with open</td>
<td>with open（） as fp</td>
<td>打开文件，不用fp.close()，可以自动关闭</td>
</tr>
<tr>
<td>8</td>
<td>flush</td>
<td>fp.flush()</td>
<td>当调用flush时，内容才会真正写入文件</td>
</tr>
<tr>
<td>9</td>
<td>write</td>
<td>fp.write()</td>
<td>直接调用write，内容并未真正写入文件，而是积攒在程序的内存中，称为缓冲区</td>
</tr>
<tr>
<td>10</td>
<td>tell</td>
<td>fp.tell()</td>
<td>文件指针距离文件开头的字节数</td>
</tr>
<tr>
<td>11</td>
<td>seek</td>
<td>fp.seek()</td>
<td>详见下面解析</td>
</tr>
</tbody></table>
<p><strong>注意文本模式下只允许从文件的开头进行偏移，也只支持 whence&#x3D;0</strong></p>
<p>seek 移动文件句柄</p>
<pre class=" language-python"><code class="language-python">seek 方法接收两个参数：
offset 表示偏移指针的字节数
whence 表示偏移参考，默认为 <span class="token number">0</span>
<span class="token number">0</span> 表示偏移参考文件的开头，offset 必须是 <span class="token operator">>=</span><span class="token number">0</span> 的整数
<span class="token number">1</span> 表示偏移参考当前位置，offset 可以是负数
<span class="token number">2</span> 表示偏移参考文件的结尾，offset 一般是负数

f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#建议二进制形式打开</span>
f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#ce.txt用记事本敲入下面内容</span>
i love you
 baby
<span class="token number">123456</span>
<span class="token number">78910</span>
</code></pre>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#展示读操作</span>
fp<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">"C:\\Users\\21609\\Desktop\\ce.txt"</span><span class="token punctuation">,</span><span class="token string">"rt"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#创建文件对象fp</span>
line<span class="token operator">=</span>fp<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token operator">=</span><span class="token string">""</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> line<span class="token punctuation">:</span>
    p<span class="token operator">+=</span>i
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">'''
i love you
 baby
123456
78910
'''</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#['i love you\n', ' baby\n', '123456\n', '78910']</span>
fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#展示写操作</span>
<span class="token keyword">with</span> open<span class="token punctuation">(</span>r<span class="token string">"C:\Users\21609\Desktop\ce.txt"</span><span class="token punctuation">,</span><span class="token string">"a+"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#r防止转义，创建文件对象fp</span>
    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n原神，启动！"</span><span class="token punctuation">)</span>
    fp<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#刷新一下</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>fp<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#文件指针距离文件开头的字节数</span>
    fp<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#文件指针回到开头</span>
    a<span class="token operator">=</span>fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">'''
52
i love you
 baby
123456
78910
原神，启动！
'''</span>
</code></pre>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python常用库</title>
    <url>/2023/08/24/python%E5%B8%B8%E7%94%A8%E5%BA%93/</url>
    <content><![CDATA[<h2 id="常见模块解析"><a href="#常见模块解析" class="headerlink" title="常见模块解析"></a>常见模块解析</h2><h3 id="1-math库"><a href="#1-math库" class="headerlink" title="1. math库"></a>1. math库</h3><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">返回值 ( 描述 )</th>
</tr>
</thead>
<tbody><tr>
<td align="left">abs(x)</td>
<td align="left">返回数字的绝对值，如abs(-10) 返回 10</td>
</tr>
<tr>
<td align="left">ceil(x)</td>
<td align="left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td>
</tr>
<tr>
<td align="left">cmp(x, y)</td>
<td align="left">如果 x &lt; y 返回 -1, 如果 x &#x3D;&#x3D; y 返回 0, 如果 x &gt; y 返回 1。 **Python 3 已废弃，使用 (x&gt;y)-(x。</td>
</tr>
<tr>
<td align="left">exp(x)</td>
<td align="left">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td>
</tr>
<tr>
<td align="left">fabs(x)</td>
<td align="left">返回数字的绝对值，如math.fabs(-10) 返回10.0</td>
</tr>
<tr>
<td align="left">floor(x)</td>
<td align="left">返回数字的下舍整数，如math.floor(4.9)返回 4</td>
</tr>
<tr>
<td align="left">log(x)</td>
<td align="left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td>
</tr>
<tr>
<td align="left">log10(x)</td>
<td align="left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td>
</tr>
<tr>
<td align="left">max(x1, x2,…)</td>
<td align="left">返回给定参数的最大值，参数可以为序列。</td>
</tr>
<tr>
<td align="left">min(x1, x2,…)</td>
<td align="left">返回给定参数的最小值，参数可以为序列。</td>
</tr>
<tr>
<td align="left">modf(x)</td>
<td align="left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td>
</tr>
<tr>
<td align="left">pow(x, y)</td>
<td align="left">x**y 运算后的值。</td>
</tr>
<tr>
<td align="left">round(x [,n])</td>
<td align="left">返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。<strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></td>
</tr>
<tr>
<td align="left">sqrt(x)</td>
<td align="left">返回数字x的平方根。</td>
</tr>
</tbody></table>
<hr>
<h4 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h4><p>Python的math库包括以下三角函数：(比如：math.sin(math.pi&#x2F;2))</p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">acos(x)</td>
<td align="left">返回x的反余弦弧度值。</td>
</tr>
<tr>
<td align="left">asin(x)</td>
<td align="left">返回x的反正弦弧度值。</td>
</tr>
<tr>
<td align="left">atan(x)</td>
<td align="left">返回x的反正切弧度值。</td>
</tr>
<tr>
<td align="left">atan2(y, x)</td>
<td align="left">返回给定的 X 及 Y 坐标值的反正切值。</td>
</tr>
<tr>
<td align="left">cos(x)</td>
<td align="left">返回x的弧度的余弦值。</td>
</tr>
<tr>
<td align="left">hypot(x, y)</td>
<td align="left">返回欧几里德范数 sqrt(x<em>x + y</em>y)。</td>
</tr>
<tr>
<td align="left">sin(x)</td>
<td align="left">返回的x弧度的正弦值。</td>
</tr>
<tr>
<td align="left">tan(x)</td>
<td align="left">返回x弧度的正切值。</td>
</tr>
<tr>
<td align="left">degrees(x)</td>
<td align="left">将弧度转换为角度,如degrees(math.pi&#x2F;2) ， 返回90.0</td>
</tr>
<tr>
<td align="left">radians(x)</td>
<td align="left">将角度转换为弧度</td>
</tr>
</tbody></table>
<hr>
<h4 id="数学常量"><a href="#数学常量" class="headerlink" title="数学常量"></a>数学常量</h4><table>
<thead>
<tr>
<th align="left">常量</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">math.pi</td>
<td align="left">数学常量 pi（圆周率，一般以π来表示）</td>
</tr>
<tr>
<td align="left">math.e</td>
<td align="left">数学常量 e，e即自然常数（自然常数）。</td>
</tr>
</tbody></table>
<h3 id="2-random库"><a href="#2-random库" class="headerlink" title="2. random库"></a>2. random库</h3><p>Python的random库包含以下常用随机数函数：</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random
<span class="token comment" spellcheck="true"># 生成一个 [0, 1) 范围内的随机小数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 生成一个 [1, 10] 范围内的随机整数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 生成一个 [0, 1] 范围内的随机小数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 从序列中随机选择一个元素</span>
seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 将序列中的元素随机打乱（shuffle洗牌）</span>
seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>seq<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span>
</code></pre>
<h3 id="3-re-模块"><a href="#3-re-模块" class="headerlink" title="3. re 模块"></a>3. re 模块</h3><h4 id="1-常用正则表达式"><a href="#1-常用正则表达式" class="headerlink" title="1. 常用正则表达式"></a>1. 常用正则表达式</h4><table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\w</td>
<td>匹配字母数字及下划线</td>
</tr>
<tr>
<td>\W</td>
<td>匹配非字母数字下划线</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任意空白字符，等价于[\t,\n,\r,\f]</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任意非空字符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配任意数字，等价于[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>匹配任意非数字</td>
</tr>
<tr>
<td>\A</td>
<td>匹配以xx字符串开始</td>
</tr>
<tr>
<td>\Z</td>
<td>匹配xx字符串结束，如果是存在换行，只匹配到换行前的结束字符串</td>
</tr>
<tr>
<td>\z</td>
<td>匹配xx字符串结束</td>
</tr>
<tr>
<td>\G</td>
<td>匹配最后匹配完成的位置</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开头</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的末尾</td>
</tr>
<tr>
<td><strong>.</strong></td>
<td>匹配任意字符, 除了换行符, 当 re.DOTALL 标记被指定时, 则可以匹配包括换行符的任意字符</td>
</tr>
<tr>
<td>[…]</td>
<td>用来表示一组字符， 单独列出：[amk] 匹配 ‘a’，‘m’ 或 ‘k’</td>
</tr>
<tr>
<td>[^…]</td>
<td>不在 [ ] 中的字符：[^abc] 匹配除了a， b， c之外的字符</td>
</tr>
<tr>
<td>*</td>
<td>匹配0个或多个的表达式</td>
</tr>
<tr>
<td>+</td>
<td>匹配1个或多个的表达式</td>
</tr>
<tr>
<td>?</td>
<td>匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</td>
</tr>
<tr>
<td>{n}</td>
<td>精确匹配n个前面表达式。</td>
</tr>
<tr>
<td>{n，m}</td>
<td>匹配n到m次由前面的正则表达式定义的片段，贪婪方式</td>
</tr>
<tr>
<td>alb</td>
<td>匹配a或b</td>
</tr>
<tr>
<td>()</td>
<td>匹配括号内的表达式，也表示一个组</td>
</tr>
</tbody></table>
<p><strong>注意</strong>：<code>[ ]</code>所有的特殊字符在字符集中都失去其原有的特殊含义,在字符集中如果要使用<code>]</code>、<code>-</code>或<code>^</code>，可以在前面加上<strong>反斜杠</strong>，或把<code>]</code>、<code>-</code>放在第一个字符，把<code>^</code>放在非第一个字符</p>
<h4 id="2-常用函数"><a href="#2-常用函数" class="headerlink" title="2. 常用函数"></a>2. 常用函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>re.match( )</td>
<td>从字符串的起始位置匹配, 匹配成功, 返回一个匹配的对象, 否则返回None</td>
</tr>
<tr>
<td>re.search( )</td>
<td>扫描整个字符串并返回第一个成功的匹配</td>
</tr>
<tr>
<td>re.findall( )</td>
<td>在字符串中找到正则表达式所匹配的所有子串, 并返回一个列表, 如果没有找到匹配的, 则返回空列表</td>
</tr>
<tr>
<td>re.split( )</td>
<td>将一个字符串按照正则表达式匹配结果进行分割, 返回列表类型</td>
</tr>
<tr>
<td>re.finditer( )</td>
<td>在字符串中找到正则表达式所匹配的所有子串, 并把它们作为一个迭代器返回</td>
</tr>
<tr>
<td>re.sub( )</td>
<td>把字符串中所有匹配正则表达式的地方替换成新的字符串</td>
</tr>
<tr>
<td>re.complie( )</td>
<td>将正则表达式传入, 返回一个匹配对象, 一般与其他方法组合使用</td>
</tr>
</tbody></table>
<h4 id="3-正则匹配使用示例"><a href="#3-正则匹配使用示例" class="headerlink" title="3. 正则匹配使用示例"></a>3. 正则匹配使用示例</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"llo"</span><span class="token punctuation">,</span><span class="token string">"ooo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># heooo</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># -1 (找不到返回 -1)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"he"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 0</span>

<span class="token keyword">import</span> re
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"\w"</span><span class="token punctuation">,</span><span class="token string">"ab* 12$ _"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['a', 'b', '1', '2', '_']</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"\s"</span><span class="token punctuation">,</span><span class="token string">"ab* 12$ _ "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [' ', ' ', ' ']</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"\Aab"</span><span class="token punctuation">,</span><span class="token string">"ab* 12$ _"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['ab']</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"\Aaa"</span><span class="token punctuation">,</span><span class="token string">"ab* 12$ _"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [] 没匹配到为空</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"_\Z"</span><span class="token punctuation">,</span><span class="token string">"ab* 12$ _"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># ['_']</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"0\Z"</span><span class="token punctuation">,</span><span class="token string">"ab* 12$ _"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># [] 没匹配到为空</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">,</span><span class="token string">"ab* 12$ \t_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ['\t']</span>
<span class="token comment" spellcheck="true">#"\s" 可以匹配"\t"和"\n"</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"^ab"</span><span class="token punctuation">,</span><span class="token string">"ab* 12$ _"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># ['ab']</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"_$"</span><span class="token punctuation">,</span><span class="token string">"ab* 12$ _\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['_']</span>
</code></pre>
<p>重复匹配</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#.匹配任意一个字符</span>
<span class="token keyword">import</span> re
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"a.b"</span><span class="token punctuation">,</span><span class="token string">"a\tb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['a\tb']</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"a.b"</span><span class="token punctuation">,</span><span class="token string">"a\nb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [] (换行符匹配不到,匹配为空)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"a.b"</span><span class="token punctuation">,</span><span class="token string">"a b a*b abb a_b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['a b', 'a*b', 'abb', 'a_b']</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"a.b"</span><span class="token punctuation">,</span><span class="token string">"a\nb"</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># ['a\nb'] (加入参数, 包含换行)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"a.b"</span><span class="token punctuation">,</span><span class="token string">"a\nb"</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># ['a\nb'] (同上效果一样)</span>

<span class="token comment" spellcheck="true">#* 匹配前面那个字符0个或者n个</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"a*"</span><span class="token punctuation">,</span><span class="token string">"aaaa aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['aaaa', '', 'aa', ''] (零个或多个a)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"ab*"</span><span class="token punctuation">,</span><span class="token string">"abab aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['ab', 'ab', 'a', 'a'] (一个a零个或多个b)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"a*b"</span><span class="token punctuation">,</span><span class="token string">"ababaaaba aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['ab', 'ab', 'aaab'] (零个或多个a一个b)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"ab*"</span><span class="token punctuation">,</span><span class="token string">"bbbbbbbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [] (没有匹配到一个a零个或多个b)</span>

<span class="token comment" spellcheck="true">#? 匹配前面那个字符0个或者1个</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"ab?"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># ['a']，匹配1个a，0个b</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"ab?"</span><span class="token punctuation">,</span><span class="token string">"abbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['ab']</span>

<span class="token comment" spellcheck="true">#&amp;#123;n,m&amp;#125; 匹配n~m个</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"a&amp;#123;2&amp;#125;"</span><span class="token punctuation">,</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     # <span class="token punctuation">[</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'aa'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"ab&amp;#123;2,6&amp;#125;"</span><span class="token punctuation">,</span><span class="token string">"abbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  # <span class="token punctuation">[</span><span class="token string">'abbb'</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>一个a<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">~</span><span class="token number">6</span>个b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"ab&amp;#123;1,&amp;#125;"</span><span class="token punctuation">,</span><span class="token string">"abbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   # <span class="token punctuation">[</span><span class="token string">'abbb'</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>相当于 ab<span class="token operator">+</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"ab&amp;#123;0,&amp;#125;"</span><span class="token punctuation">,</span><span class="token string">"abbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   # <span class="token punctuation">[</span><span class="token string">'abbb'</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>相当于 ab<span class="token operator">*</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#[ ]逐个匹配</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"a[*1_c-]b"</span><span class="token punctuation">,</span><span class="token string">"a*ba1b a_baaba-b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['a*b', 'a1b', 'a_b', 'a-b']</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"a[^a-zA-Z0-9]b"</span><span class="token punctuation">,</span><span class="token string">"a*banb aPbaa7b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['a*b'] (非a~z,A~Z,0~9)</span>

<span class="token comment" spellcheck="true">#( )分组</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'ab+'</span><span class="token punctuation">,</span><span class="token string">'ababab123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['ab', 'ab', 'ab']</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'(ab)+123'</span><span class="token punctuation">,</span><span class="token string">'ababab123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['ab']，匹配到末尾的 ab123 中的 ab</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'(?:ab)+123'</span><span class="token punctuation">,</span><span class="token string">'ababab123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token comment" spellcheck="true">#['ababab123']， findall的结果不是匹配的全部内容，而是组内的内容, ?: 可以让结果为匹配的全部内容,详见非捕获匹配</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'href="(.*?)"'</span><span class="token punctuation">,</span><span class="token string">'&lt;a href="http://www.baidu.com">点击&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['http://www.baidu.com']</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'href="(?:.*?)"'</span><span class="token punctuation">,</span><span class="token string">'&lt;a href="http://www.baidu.com">点击&lt;/a>&lt;a href="http://www.aiqiyi.com">点击2&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># ['href="http://www.baidu.com"', 'href="http://www.aiqiyi.com"']</span>


<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"a\.b"</span><span class="token punctuation">,</span><span class="token string">"a1b a.b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['a.b']</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"shawn|song"</span><span class="token punctuation">,</span><span class="token string">"shawn is man song is shawn"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['shawn', 'song', 'shawn']</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"A(?:abc|cba)A"</span><span class="token punctuation">,</span><span class="token string">"AabcA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['AabcA']</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"com(?:puter|e)"</span><span class="token punctuation">,</span><span class="token string">"come on! Here is a computer "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['come', 'computer']</span>

<span class="token comment" spellcheck="true">#匹配所有数字</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"\d+\.?\d*"</span><span class="token punctuation">,</span><span class="token string">"12as3.45qw2k7"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['12', '3.45', '2', '7']</span>
</code></pre>
<p><strong>贪婪匹配<code>.*</code>与懒惰匹配<code>.*?</code></strong></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"a.*b"</span><span class="token punctuation">,</span><span class="token string">"a11b22222b33"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['a11b22222b']</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"a.*?b"</span><span class="token punctuation">,</span><span class="token string">"a11b22222b3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['a11b']</span>
</code></pre>
<h4 id="4-方法示例"><a href="#4-方法示例" class="headerlink" title="4. 方法示例"></a>4. 方法示例</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#re.findall(pattern,string)</span>
    <span class="token comment" spellcheck="true">#在字符串中找到正则表达式所匹配的所有子串, 并返回一个列表, 如果没有找到匹配的, 则返回空列表</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"(ab)+(cd)+"</span><span class="token punctuation">,</span><span class="token string">"ababcdcd abcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">#[('ab', 'cd'), ('ab', 'cd')]，返回元组列表</span>

<span class="token comment" spellcheck="true">#re.search()</span>
    匹配整个字符串<span class="token punctuation">,</span> 只到找到第一个匹配然后返回一个包含匹配信息的对象<span class="token punctuation">(</span>re<span class="token punctuation">.</span>Match对象<span class="token punctuation">)</span>
    该对象可以通过调用 group<span class="token punctuation">(</span><span class="token punctuation">)</span>方法得到匹配的字符串<span class="token punctuation">,</span>如果字符串没有匹配，则返回None
    如果没有匹配到值就调用 group<span class="token punctuation">(</span><span class="token punctuation">)</span> 方法<span class="token punctuation">,</span> 抛出异常
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"112abc333abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(3, 6), match='abc'></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"112abc333abc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># abc</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">"12abc333abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># None</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">"12abc333abc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token comment" spellcheck="true"># 报错 "AttributeError" 因为没拿到这个对象,所以没有group()属性</span>

<span class="token comment" spellcheck="true">#re.match()</span>
    与 re<span class="token punctuation">.</span>search 功能相同<span class="token punctuation">,</span> 但必须匹配起始位置<span class="token punctuation">,</span> 不然返回 None
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"abc22abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token comment" spellcheck="true"># &lt;re.Match object; span=(0, 3), match='abc'></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"abc22abc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># abc</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"1abc22abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># None</span>

<span class="token comment" spellcheck="true">#re.split()</span>
    以规定字符作为分隔符对字符串进行切分<span class="token punctuation">,</span> 切分结果放入列表<span class="token punctuation">,</span> 没匹配到返回原字符串列表
    将规定字符放入 <span class="token punctuation">[</span> <span class="token punctuation">]</span> 则是逐个匹配
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">,</span><span class="token string">"abcoababcoabc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['', 'co', '', 'co', 'c']</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"nbc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#['nbc']，返回原字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"[ob]"</span><span class="token punctuation">,</span><span class="token string">"abcoabcoabc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['a', 'c', 'a', 'c', 'a', 'c']</span>

<span class="token comment" spellcheck="true">#re.sub()和re.subn()</span>
    匹配字符<span class="token punctuation">,</span> 并将其该成指定字符<span class="token punctuation">,</span> 返回改变后的字符串<span class="token punctuation">,</span> 后面可跟个数参数<span class="token punctuation">,</span> 不指定默认替换所有
    re<span class="token punctuation">.</span>subn<span class="token punctuation">(</span> <span class="token punctuation">)</span> 返回一个元组<span class="token punctuation">,</span> 第二个元素返回的是替换的个数
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"i am a man"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># i AAm AA mAAn</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"i am a man"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># i AAm AA mAAn，不报错</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>subn<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"i am a man"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ('i Am A mAn', 3) (显示替换的个数)</span>

<span class="token comment" spellcheck="true">#re.compile()  	返回一个对象</span>
obj<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"\d&amp;#123;2&amp;#125;"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># re.compile('\\d&amp;#123;2&amp;#125;')</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"ab123bc123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#['12', '12']</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"ab123bc123"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true"># 12</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"123ab123bc123"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true"># 12</span>
</code></pre>
<p>substitude 替换</p>
<h4 id="5-非捕获匹配"><a href="#5-非捕获匹配" class="headerlink" title="5. 非捕获匹配?: ?! ?&#x3D;"></a>5. 非捕获匹配?: ?! ?&#x3D;</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/python%E5%B8%B8%E7%94%A8%E5%BA%93/image-20230823124926567.png" class="lozad post-image"src="/2023/08/24/python%E5%B8%B8%E7%94%A8%E5%BA%93/image-20230823124926567.png"></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ?:</span>
    <span class="token punctuation">(</span>?<span class="token punctuation">:</span><span class="token punctuation">)</span>非捕获分组，只会进行单纯的模式匹配并不会将匹配到的值进行保存，与<span class="token punctuation">(</span><span class="token punctuation">)</span>区分
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"jk(loli)+"</span><span class="token punctuation">,</span><span class="token string">"jkloli"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['loli']</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"jk(?:loli)+"</span><span class="token punctuation">,</span><span class="token string">"jkloli"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['jkloli']</span>

<span class="token comment" spellcheck="true"># ?!	正向否定预查</span>
    <span class="token number">1</span><span class="token punctuation">.</span>在没匹配到字符串的前提下，再进行后续的正则，后续匹配仍然从被匹配字符串的头开始
res <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"(?![\d]+$)(?![a-zA-Z]+$)[\da-zA-Z]&amp;#123;6&amp;#125;$"</span><span class="token punctuation">,</span>passwd<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">#匹配6位数字与字母组合，不能纯数字或字母</span>
    <span class="token number">2</span><span class="token punctuation">.</span>匹配位置 后面 不能跟着指定表达式。
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"19(?!99)"</span><span class="token punctuation">,</span><span class="token string">"1999"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"\d&amp;#123;2&amp;#125;(?!99)"</span><span class="token punctuation">,</span><span class="token string">"1999 1988"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>#<span class="token punctuation">[</span><span class="token string">'99'</span><span class="token punctuation">,</span> <span class="token string">'19'</span><span class="token punctuation">,</span> <span class="token string">'88'</span><span class="token punctuation">]</span>
    <span class="token comment" spellcheck="true">#先尝试匹配"1999"，再'999 '(成功)，再"9 19"，再" 198"，再"1988"(成功)，再"88",理解下匹配的窗格移动</span>
    
<span class="token comment" spellcheck="true"># ?=  正向肯定预查</span>
    <span class="token number">1</span><span class="token punctuation">.</span>在匹配到字符串的前提下，再进行后续的正则，后续匹配仍然从被匹配字符串的头开始
res <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"(?=.*[\d])(?=.*[a-z])(?=.*[A-Z])(?=.*)(?=.*[!@#%&amp;])^([\da-zA-Z!@#%&amp;]&amp;#123;7,&amp;#125;)$"</span><span class="token punctuation">,</span>passwd<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">#至少七位密码，包含大小写，数字，特殊字符(!,@,#,%,&amp;)</span>
    
    <span class="token number">2</span><span class="token punctuation">.</span>匹配位置 后面 必须跟着指定表达式。
r<span class="token string">"foo(?=bar)"</span>可以匹配foobar中的foo，不能匹配foobaz中的foo
    

<span class="token comment" spellcheck="true"># ?&lt;=</span>
    匹配位置 前面 必须跟着指定表达式。
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"(?&lt;=jk).*?(?=li)"</span><span class="token punctuation">,</span><span class="token string">"mcjli jkloli liejk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#['lo']</span>

<span class="token comment" spellcheck="true"># ?&lt;!</span>
    匹配位置 前面 不能跟着指定表达式。
    <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"\\B(?&lt;!18)\d&amp;#123;2&amp;#125;\\b"</span><span class="token punctuation">,</span><span class="token string">"1988  1899"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> #<span class="token punctuation">[</span><span class="token string">'88'</span><span class="token punctuation">]</span>
    
</code></pre>
<h4 id="6-边界匹配问题"><a href="#6-边界匹配问题" class="headerlink" title="6. 边界匹配问题"></a>6. 边界匹配问题</h4><p>\b表示单词边界，\B表示非单词边界</p>
<blockquote>
<p>一般空格、换行、标点符号或者特殊符号来表示边界</p>
</blockquote>
<blockquote>
<p>或者说非数字、字母、下滑线、unicode汉字表示边界</p>
</blockquote>
<blockquote>
<p>中文字符串为边界的话要用re.A编码模式</p>
</blockquote>
<pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"\\b19(?:[^9]&amp;#123;2&amp;#125;)\\b"</span><span class="token punctuation">,</span><span class="token string">"1999  1988"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> #<span class="token punctuation">[</span><span class="token string">'1988'</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"\\b19(?:[^9]&amp;#123;2&amp;#125;)\\b"</span><span class="token punctuation">,</span><span class="token string">"你也玩1999?1988带我一个"</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># ['1988']</span>
</code></pre>
<h3 id="4-request模块"><a href="#4-request模块" class="headerlink" title="4. request模块"></a>4. request模块</h3><p>吐槽：b站王道的计算机网络好水。</p>
<h3 id="5-time库"><a href="#5-time库" class="headerlink" title="5. time库"></a>5. time库</h3>]]></content>
      <categories>
        <category>计算机语言基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>我的博客</title>
    <url>/2023/06/24/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2023/08/24/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="测试gregredvdsvs"><a href="#测试gregredvdsvs" class="headerlink" title="测试gregredvdsvs"></a>测试gregredvdsvs</h1><h2 id="1-标题二dhrthtrhsf"><a href="#1-标题二dhrthtrhsf" class="headerlink" title="1.标题二dhrthtrhsf"></a>1.标题二dhrthtrhsf</h2><h3 id="1-标题三gesgerhtrhr"><a href="#1-标题三gesgerhtrhr" class="headerlink" title="1.标题三gesgerhtrhr"></a>1.标题三gesgerhtrhr</h3><h4 id="1-标题四feewgegegre"><a href="#1-标题四feewgegegre" class="headerlink" title="1. 标题四feewgegegre"></a>1. 标题四feewgegegre</h4><h5 id="1-标题五ascaaddafsfegfsvssfsgrehde66482"><a href="#1-标题五ascaaddafsfegfsvssfsgrehde66482" class="headerlink" title="1.标题五ascaaddafsfegfsvssfsgrehde66482"></a>1.标题五ascaaddafsfegfsvssfsgrehde<code>66482</code></h5><pre class=" language-py"><code class="language-py">4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444
</code></pre>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%B5%8B%E8%AF%95/break-continue-536.png" class="lozad post-image"src="/2023/08/24/%E6%B5%8B%E8%AF%95/break-continue-536.png"></p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%B5%8B%E8%AF%95/image-20230712215456679.png" class="lozad post-image"src="/2023/08/24/%E6%B5%8B%E8%AF%95/image-20230712215456679.png"></p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%B5%8B%E8%AF%95/image-20230823124926567.png" class="lozad post-image"src="/2023/08/24/%E6%B5%8B%E8%AF%95/image-20230823124926567.png"></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
  <entry>
    <title>C语言基础</title>
    <url>/2023/10/05/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="C语言基础"><a href="#C语言基础" class="headerlink" title="C语言基础"></a>C语言基础</h1><h2 id="0基础"><a href="#0基础" class="headerlink" title="0基础"></a>0基础</h2><p>下载vc6，devc，visual studio 2022。建议visual studio 2022</p>
<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><blockquote>
<p>1字节1B，1024b&#x3D;1kb</p>
<p>内存四大区:CODE(代码区),DATA(全局数据区),STACK(栈),HEAP(堆内存)</p>
<p>一个C语言源程序是由函数组成.</p>
<p>C语言本身没有输入输出语句</p>
<p>C语言中的标识符只能由字母、数字和下划线三种字符组成，且第一个字符必须为字母或下划线</p>
<ol>
<li><strong>下列可作为C语言赋值语句的是</strong> i–;</li>
<li>目标程序是指源程序经编译可直接被计算机运行的 机器码 集合。目标程序文件的扩展名为.obj</li>
<li>函数一般由函数头和函数体组成</li>
<li>一个函数的函数体一般包括参数和返回值</li>
<li>程序是指一组计算机能识别和执行的指令</li>
</ol>
</blockquote>
<h3 id="2-简单快捷键"><a href="#2-简单快捷键" class="headerlink" title="2. 简单快捷键"></a>2. 简单快捷键</h3><blockquote>
<p>ctrl+s保存</p>
<p>vc6</p>
<p>alt+f8自动缩进</p>
<p>shift+tab往前缩进</p>
<p>tab往后缩进</p>
<p>DEVC</p>
<p>ctrl shift a</p>
<p>visual studio 2022</p>
<p>ctrl+D 复制这行到下一行</p>
</blockquote>
<h3 id="3-常见问题解决-重点"><a href="#3-常见问题解决-重点" class="headerlink" title="3. 常见问题解决(重点)"></a>3. 常见问题解决(重点)</h3><ol>
<li><p>判断整成赋值</p>
<p>a&#x3D;&#x3D;1，a&#x3D;1</p>
</li>
<li><p>忘记取地址符&amp;</p>
<pre><code>        scanf(&quot;%d&quot;,&amp;a);
</code></pre>
</li>
<li><p>控制台按回车键，getch()会识别成\r(13)，getchar()，scanf()会识别成\n(10)。</p>
</li>
<li><p>scanf(“%c”,&amp;op)吃回车键的问题</p>
</li>
</ol>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//解决方法</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//或者</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//或者</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d %c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<ol start="5">
<li>转义输出</li>
</ol>
<pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\\  %%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出\ %</span>
</code></pre>
<ol start="6">
<li>常见运算符顺序问题</li>
</ol>
<pre class=" language-c"><code class="language-c">a<span class="token operator">++</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于a*2;a++</span>
</code></pre>
<ol start="7">
<li>switch漏break</li>
</ol>
<pre><code>int a=2;
switch(a)&#123;
    case 2: printf(&quot;2 &quot;);
    case 1: printf(&quot;1\n&quot;);break;
&#125;//2 1
</code></pre>
<ol start="8">
<li><p>visual studio 2022需要#define _CRT_SECURE_NO_WARNINGS</p>
</li>
<li><p>数组越界。(自己看着办)</p>
</li>
<li><p>putchar(‘\n’);表示字符要单引号，而不是双引号</p>
</li>
<li><p>(*pointer_1)++相当于a++，要打括号，因为从右往左结合</p>
</li>
</ol>
<h3 id="4-基本输入输出的方法（重点）"><a href="#4-基本输入输出的方法（重点）" class="headerlink" title="4. 基本输入输出的方法（重点）"></a>4. 基本输入输出的方法（重点）</h3><h4 id="1-详解"><a href="#1-详解" class="headerlink" title="1. 详解"></a>1. 详解</h4><p>int i;</p>
<p>char a[20]&#x3D;’hello world’;</p>
<p>char b;char c;char d[50];</p>
<table>
<thead>
<tr>
<th>puts(a);</th>
<th>输出一个字符串遇到\0转换为\n,并结束输出。</th>
</tr>
</thead>
<tbody><tr>
<td>gets(a);</td>
<td>读入一个字符串，长度应该小于字符数组，<strong>可以输入空格</strong>。(C99后淘汰)</td>
</tr>
<tr>
<td>printf(“%d”,i);</td>
<td>格式化输出</td>
</tr>
<tr>
<td>scanf(“%d”,&amp;i);</td>
<td>格式化输入，scanf(%s)输入空格结束。</td>
</tr>
<tr>
<td>b&#x3D;getchar();</td>
<td>从输入缓冲区里面读取一个字符</td>
</tr>
<tr>
<td>putchar(b);</td>
<td>输出一个字符</td>
</tr>
<tr>
<td>c&#x3D;getch();</td>
<td>暂停输出控制台，直到按下一个键为止，它不使用任何缓冲区来存储输入字符，输入的字符将立即返回，而无需等待回车键，输入的字符不会显示在控制台上。需要&lt;conio.h&gt;</td>
</tr>
<tr>
<td>c&#x3D;getc(stdin);</td>
<td>从“流”中读入一个字符。stdin是标准输入流</td>
</tr>
<tr>
<td>ungetc(b,stdin);</td>
<td>将b中字符复制到输入流，可以用getchar()从输入流取出。</td>
</tr>
<tr>
<td>sprintf(d,”miku, %s\n”,a);</td>
<td>将格式化的数据写入字符串d中。</td>
</tr>
</tbody></table>
<p><strong>scanf()返回值</strong></p>
<p>scanf(“%d %d”, &amp;a, &amp;b);<br>a,b都正确输入，返回2（正确输入了两个变量）;<br>a,b中正确输入了一个变量,返回1。  </p>
<p>0 表示用户的输入不匹配，无法正确输入任何值。</p>
<p>EOF 这是在stdio.h里面定义的常量（通常值为-1，表示输入流已经结束， 遇到错误或者end of file）</p>
<p>结束输入流的方法：ctrl+z，回车。</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span> 
    <span class="token keyword">do</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一串正整数: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果读取的不是整数(返回值不为1)</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一串正整数: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/*
%后面跟*表示跳过相应的输入程序
scanf("%*d %d",a);输入66 55只会把55赋值给a，而忽略%*d读取的66
            */</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%*[^\n]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清除输入流的非数字字符，这边除了换行符都清理了</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你输入的数字是%d \n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// \n换行</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="2-实际操作"><a href="#2-实际操作" class="headerlink" title="2. 实际操作"></a>2. 实际操作</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//连续读一串数字</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span> 
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果输入流没结束(没按ctrl+z然后回车)</span>
            <span class="token comment" spellcheck="true">//注意，如果输入e，scanf会返回0，进入死循环，打印奇怪的内容。</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//输入1 2 3 4 5 </span>
</code></pre>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//屏蔽操作</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span> 
    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//scanf正常接收输入</span>
            sum<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只屏蔽空格</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结束while循环</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token function">ungetc</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将ch的值放回stdin输入流</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"总数:%d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token number">66</span> <span class="token number">55</span> <span class="token number">44</span> 
    <span class="token comment" spellcheck="true">//a第一次值为66，ch第一次为' '，然后ch为'5'，然后ch的值放回输入流,a第二次值为55</span>
总数<span class="token punctuation">:</span><span class="token number">165</span>
</code></pre>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//隐蔽输入</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;conio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello  \0world"</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> c<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> password<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//visual studio 2022写法</span>
        c <span class="token operator">=</span> <span class="token function">_getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实现隐蔽输入</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'\r'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遇回车键跳出循环</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        password<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印字符</span>
    <span class="token function">puts</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//让程序停一下,敲一个回车就停</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="5-注释方法"><a href="#5-注释方法" class="headerlink" title="5. 注释方法"></a>5. 注释方法</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//这是行注释</span>
<span class="token comment" spellcheck="true">/*多行
注释*/</span>
<span class="token macro property">#<span class="token directive keyword">if</span>(0)</span><span class="token comment" spellcheck="true">//if(0)不执行其中的代码</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
</code></pre>
<h2 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h2><h3 id="1-储存空间和内存四大区"><a href="#1-储存空间和内存四大区" class="headerlink" title="1. 储存空间和内存四大区"></a>1. 储存空间和内存四大区</h3><blockquote>
<ol>
<li><p>可以用sizeof(int)查看int类型的所占字节数</p>
</li>
<li><p>char&lt;int&lt;long int&lt;&#x3D;float&lt;double</p>
</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span>
<span class="token keyword">short</span> <span class="token number">2</span>
<span class="token keyword">float</span> <span class="token number">4</span>
<span class="token keyword">double</span> <span class="token number">8</span>
</code></pre>
<p>内存四大区：代码区，栈区(存放函数参数值，局部变量)，堆区（程序员分配），全局&#x2F;静态区（放常量，全局变量）。</p>
<h3 id="2-整型"><a href="#2-整型" class="headerlink" title="2. 整型"></a>2. 整型</h3><p>short,int,long</p>
<blockquote>
<p>%4d即限制输出的整数值最小宽度为4，默认右对齐，“-”使输出时左对齐，无“0标志”则空格填充。</p>
<p>int a&#x3D;5.5;&#x2F;&#x2F;强制转换成int类型，默认向下取整，a等于5</p>
</blockquote>
<p><strong>四舍五入</strong></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">float</span> b<span class="token operator">=</span><span class="token number">5.6</span><span class="token punctuation">;</span>
a<span class="token operator">=</span>b<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="3-浮点型"><a href="#3-浮点型" class="headerlink" title="3. 浮点型"></a>3. 浮点型</h3><p>double用%lf输出</p>
<p>float用%f输出</p>
<p>除法3&#x2F;2输出1，3.0&#x2F;2输出1.5，(double)3&#x2F;2输出1.500000</p>
<h3 id="4-布尔型"><a href="#4-布尔型" class="headerlink" title="4. 布尔型"></a>4. 布尔型</h3><blockquote>
<p>在支持C99标准中，新增了关键字<code>_Bool</code>，其值只能为<code>0</code>或<code>1</code>，这样只要导入 <code>stdbool.h</code> ，就能非常方便的使用我们常用的<code>bool false true</code>来操作布尔类型。</p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdbool.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    bool a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    bool b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    _Bool a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    _Bool b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="5-字符型"><a href="#5-字符型" class="headerlink" title="5. 字符型"></a>5. 字符型</h3><p>char</p>
<blockquote>
<ol>
<li>在内存中以ASCII码储存</li>
</ol>
</blockquote>
<p>常见ascii码</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>ascii码</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>48</td>
</tr>
<tr>
<td>A</td>
<td>65</td>
</tr>
<tr>
<td>a</td>
<td>97</td>
</tr>
<tr>
<td>空格</td>
<td>32</td>
</tr>
<tr>
<td>.</td>
<td>109</td>
</tr>
<tr>
<td>!</td>
<td>33</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"hello world"</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="6-常量"><a href="#6-常量" class="headerlink" title="6. 常量"></a>6. 常量</h3><h4 id="1-整数常量"><a href="#1-整数常量" class="headerlink" title="1. 整数常量"></a>1. 整数常量</h4><blockquote>
<p>U 表示无符号整数（unsigned）</p>
<p>0x 或 0X 表示十六进制</p>
<p>0 表示八进制</p>
<p>U 表示无符号整数（unsigned）</p>
<p>L 表示长整数（long）</p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token number">212</span>         <span class="token comment" spellcheck="true">/* 合法的 */</span>
<span class="token number">215u</span>        <span class="token comment" spellcheck="true">/* 合法的 */</span>
<span class="token number">0xFeeL</span>      <span class="token comment" spellcheck="true">/* 合法的 */</span>
<span class="token number">078</span>         <span class="token comment" spellcheck="true">/* 非法的：8 不是八进制的数字 */</span>
<span class="token number">032UU</span>       <span class="token comment" spellcheck="true">/* 非法的：不能重复后缀 */</span>
</code></pre>
<h4 id="2-浮点常量"><a href="#2-浮点常量" class="headerlink" title="2. 浮点常量"></a>2. 浮点常量</h4><pre class=" language-c"><code class="language-c"><span class="token number">3.14159</span>       <span class="token comment" spellcheck="true">/* 合法的 */</span>
<span class="token number">314159E-5L</span>    <span class="token comment" spellcheck="true">/* 合法的 */</span>
<span class="token number">1e-6</span>       <span class="token comment" spellcheck="true">//表示1*(10^-6)</span>
    
510E          <span class="token comment" spellcheck="true">/* 非法的：不完整的指数 */</span>
<span class="token number">210f</span>          <span class="token comment" spellcheck="true">/* 非法的：没有小数或指数 */</span>
<span class="token punctuation">.</span>e55          <span class="token comment" spellcheck="true">/* 非法的：缺少整数或分数 */</span>
<span class="token comment" spellcheck="true">//e的前面不能没有数字，e的后面不能有小数。</span>
</code></pre>
<h4 id="3-定义常量"><a href="#3-定义常量" class="headerlink" title="3. 定义常量"></a>3. 定义常量</h4><p>用define或const定义常量。</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> WIDTH  5</span>
<span class="token macro property">#<span class="token directive keyword">define</span> NEWLINE '\n'</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
   <span class="token keyword">const</span> <span class="token keyword">int</span>  LENGTH <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> area<span class="token punctuation">;</span>  
   area <span class="token operator">=</span> LENGTH <span class="token operator">*</span> WIDTH<span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"value of area : %d"</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> NEWLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="7-math-h库常见函数"><a href="#7-math-h库常见函数" class="headerlink" title="7. math.h库常见函数"></a>7. math.h库常见函数</h3><p>double pow(x, y)：x^y，x的y次幂</p>
<p>float powf(float x,float y); 功能与pow一致，只是输入与输出皆为浮点数</p>
<p>double modf(double value,double *iptr);拆分value值，返回它的小数部分，iptr指向整数部分。</p>
<p>double sqrt(x)：x的平方根</p>
<p>double exp(x)：指数函数 e^x，e ≈ 2.718</p>
<p>double log(x)：自然对数函数 ln(x)，x &gt; 0</p>
<p>double log10(x)：以10为底的对数log10(x)，x &gt; 0</p>
<p>绝对值</p>
<pre><code>        int abs(int i); 求整型的绝对值

        double fabs (double);求实型的绝对值

        double cabs(struct complex znum);求复数的绝对值
</code></pre>
<p>取整，取余</p>
<pre><code>        double ceil (double); 取上整，返回不比x小的最小整数

        double floor (double); 取下整，返回不比x大的最大整数
</code></pre>
<p>三角函数</p>
<pre><code>        double sin (double a); a的正弦值
        double cos (double a); a的余弦值
        double tan (double a); a的正切值
</code></pre>
<h3 id="8-printf-格式化输出"><a href="#8-printf-格式化输出" class="headerlink" title="8. printf 格式化输出"></a>8. printf 格式化输出</h3><p><code>%g</code>用来输出实数，输出格式为f格式或e格式，系统根据数据占宽度m大小，自动选择占宽度较小的某种格式输出，g格式符不输出小数点后无意义的零。</p>
<p>\1. <code>％d</code>整型输出，通常用来输出int型，%10d右对齐，%-10d左对齐</p>
<p>（“%”与字母之间可以插入数字表示场宽，如%2d表示输出2位整型数，不够2位右对齐；%-2d则表示左对齐</p>
<p>\2. <code>％ld</code>长整型输出，通常用来输出long型</p>
<p>\3. <code>％s</code>用来输出字符串，通常用来输出char型</p>
<p>\4. <code>％c</code>用来输出字符，char型</p>
<p>\5. <code>%p</code> 指针的值（打印指针地址）</p>
<p>\6. <code>％f</code>用来输出小数，默认情况下保留小数点6位，如1.000000；通常用来输出float型</p>
<p>%.2f用来输出小数，保留两位小数，如1.00</p>
<p>\7. <code>%ld</code>是双精度浮点型，默认情况下保留小数点6位，通常用来输出double型</p>
<p>\8. <code>％e</code>以指数形式输出实数，</p>
<p>\9. <code>％g</code>根据大小自动选f格式或e格式，且不输出无意义的零。</p>
<p>\10. <code>％o</code>以八进制数形式输出整数</p>
<p>\11. <code>％x</code>以十六进制数形式输出整数，或输出字符串的地址</p>
<p>\12. <code>％u</code>以十进制数输出unsigned型数据(无符号数)。</p>
<p>注意：<code>%d</code>与<code>%u</code>有无符号的数值范围，也就是极限的值，不然数值打印出来会有误</p>
<h4 id="1-一些用法"><a href="#1-一些用法" class="headerlink" title="1. 一些用法"></a>1. 一些用法</h4><blockquote>
<ol>
<li><p>%m.ns。输出占m列，但只取字符串中的左端n个字符，这n个字符输入输出在m列的右则，左则补空格。</p>
<p>-%m.ns。n个字符输出在m列的左侧，右侧补空格。　　#include &lt;stdio.h&gt;　　int main  ()　　{　　printf(“%3s,%7.2s,%.4s,%-5.3s\n”,”china”,”china”,”china”,”china”);　　}　　china,   ch,chin,chi</p>
</li>
</ol>
</blockquote>
<h4 id="2-坑点"><a href="#2-坑点" class="headerlink" title="2. 坑点"></a>2. 坑点</h4><blockquote>
<ol>
<li><p>%g,%e,%f都会在精度的下一位四舍五入</p>
</li>
<li><p>%g默认保留六位有效数字输出</p>
</li>
<li><p>而scanf(“%s”,s);这里不能有&amp;符号</p>
</li>
<li><p>%c输入函数只会对一个字节空间赋值. 而%s会一直赋值,直到输入中遇到空白字符为止.<br>用作输出时, %c传char类型,输出一个字符. %s传char*类型参数, 输出到\0为止.</p>
</li>
</ol>
</blockquote>
<h4 id="3-指针的打印"><a href="#3-指针的打印" class="headerlink" title="3. 指针的打印"></a>3. 指针的打印</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
 
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span>  var <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 实际变量的声明 */</span>
   <span class="token keyword">int</span>  <span class="token operator">*</span>ip<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 指针变量的声明 */</span>
   ip <span class="token operator">=</span> <span class="token operator">&amp;</span>var<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 指针存储 var 的地址 */</span>
 
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"var变量的地址: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>var  <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"指针的值,也就是var的地址: %p\n"</span><span class="token punctuation">,</span> ip <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出指针的值，也就是一个地址</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"指针指向的值，也就是var的值: %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>ip <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针解引用，输出指针指向的值。</span>
 <span class="token comment" spellcheck="true">//指针的值是一个地址，这个地址对应的内存存放着数据。</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
输出：
var变量的地址<span class="token punctuation">:</span> 0000002267CFF8F4
指针的值<span class="token punctuation">,</span>也就是var的地址<span class="token punctuation">:</span> 0000002267CFF8F4
指针指向的值，也就是var的值<span class="token punctuation">:</span> <span class="token number">20</span>    
</code></pre>
<h3 id="9-强制类型转换"><a href="#9-强制类型转换" class="headerlink" title="9. 强制类型转换"></a>9. 强制类型转换</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> b<span class="token operator">=</span>a<span class="token punctuation">;</span>
<span class="token keyword">double</span> c<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>
</code></pre>
<p>#include&lt;stdlib.h&gt;</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//字符串转为整数</span>
<span class="token keyword">double</span> <span class="token function">atof</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//字符串转为浮点数</span>
<span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">atol</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//字符串转为长整型</span>
</code></pre>
<h2 id="三-分支结构"><a href="#三-分支结构" class="headerlink" title="三.分支结构"></a>三.分支结构</h2><h3 id="1-if…else-if…else"><a href="#1-if…else-if…else" class="headerlink" title="1. if…else if…else"></a>1. if…else if…else</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入成绩(整数)："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不及格\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"良好\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"优秀\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="2-switch"><a href="#2-switch" class="headerlink" title="2. switch"></a>2. switch</h3><blockquote>
<p>教科书都会说switch只能用于整型变量,但是c语言中很显然int, short, long, enum, char(包括无符号类型和long long)都可以作为switch变量</p>
<p>在switch语句中每一个的case常量表达式的值不可以相同。</p>
<p>常见问题7。</p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> a<span class="token punctuation">;</span>
a<span class="token operator">=</span><span class="token function">getc</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从输入流读入一个字符</span>
<span class="token keyword">switch</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token punctuation">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">'b'</span><span class="token punctuation">:</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="四-运算符与顺序问题"><a href="#四-运算符与顺序问题" class="headerlink" title="四. 运算符与顺序问题"></a>四. 运算符与顺序问题</h2><blockquote>
<p>逻辑运算符两侧运算对象的数据类型可以是任何类型的数据.</p>
</blockquote>
<p>&amp;&amp; 两边为真才是真</p>
<p>|| 其中一边是真才是真</p>
<h3 id="优先级顺序表"><a href="#优先级顺序表" class="headerlink" title="优先级顺序表"></a>优先级顺序表</h3><table>
<thead>
<tr>
<th><strong>优先级</strong></th>
<th><strong>运算符</strong></th>
<th><strong>名称或含义</strong></th>
<th><strong>使用形式</strong></th>
<th><strong>结合方向</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>1</strong></td>
<td><strong>[]</strong></td>
<td>数组下标</td>
<td>数组名[常量表达式]</td>
<td>左到右</td>
<td>–</td>
</tr>
<tr>
<td><strong>()</strong></td>
<td>圆括号</td>
<td>(表达式）&#x2F;函数名(形参表)</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>.</strong></td>
<td>成员选择（对象）</td>
<td>对象.成员名</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>-&gt;</strong></td>
<td>成员选择（指针）</td>
<td>对象指针-&gt;成员名</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>2</strong></td>
<td><strong>-</strong></td>
<td>负号<a href="https://so.csdn.net/so/search?q=%E8%BF%90%E7%AE%97%E7%AC%A6&spm=1001.2101.3001.7020">运算符</a></td>
<td>-表达式</td>
<td><strong>右到左</strong></td>
<td>单目运算符</td>
</tr>
<tr>
<td><strong>~</strong></td>
<td>按位取反运算符</td>
<td>~表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>++</strong></td>
<td>自增运算符</td>
<td>++变量名&#x2F;变量名++</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>–</strong></td>
<td>自减运算符</td>
<td>–变量名&#x2F;变量名–</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>*****</td>
<td>取值运算符</td>
<td>*指针变量</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>&amp;</strong></td>
<td>取地址运算符</td>
<td>&amp;变量名</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>!</strong></td>
<td>逻辑非运算符</td>
<td>!表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>(类型)</strong></td>
<td>强制类型转换</td>
<td>(数据类型)表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>sizeof</strong></td>
<td>长度运算符</td>
<td>sizeof(表达式)</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>3</strong></td>
<td><strong>&#x2F;</strong></td>
<td>除</td>
<td>表达式&#x2F;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td>*****</td>
<td>乘</td>
<td>表达式*表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>%</strong></td>
<td>余数（取模）</td>
<td>整型表达式%整型表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>4</strong></td>
<td><strong>+</strong></td>
<td>加</td>
<td>表达式+表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td><strong>-</strong></td>
<td>减</td>
<td>表达式-表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>5</strong></td>
<td><strong>&lt;&lt;</strong></td>
<td>左移</td>
<td>变量&lt;&lt;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td><strong>&gt;&gt;</strong></td>
<td>右移</td>
<td>变量&gt;&gt;表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>6</strong></td>
<td><strong>&gt;</strong></td>
<td>大于</td>
<td>表达式&gt;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td><strong>&gt;&#x3D;</strong></td>
<td>大于等于</td>
<td>表达式&gt;&#x3D;表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>&lt;</strong></td>
<td>小于</td>
<td>表达式&lt;表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>&lt;&#x3D;</strong></td>
<td>小于等于</td>
<td>表达式&lt;&#x3D;表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>7</strong></td>
<td><strong>&#x3D;&#x3D;</strong></td>
<td>等于</td>
<td>表达式&#x3D;&#x3D;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td><strong>！&#x3D;</strong></td>
<td>不等于</td>
<td>表达式!&#x3D; 表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>8</strong></td>
<td><strong>&amp;</strong></td>
<td>按位与</td>
<td>表达式&amp;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td><strong>9</strong></td>
<td><strong>^</strong></td>
<td>按位异或</td>
<td>表达式^表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td><strong>10</strong></td>
<td><strong>|</strong></td>
<td>按位或</td>
<td>表达式|表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td><strong>11</strong></td>
<td><strong>&amp;&amp;</strong></td>
<td>逻辑与</td>
<td>表达式&amp;&amp;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td><strong>12</strong></td>
<td><strong>||</strong></td>
<td>逻辑或</td>
<td>表达式||表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>13</strong></td>
<td><strong>?:</strong></td>
<td>条件运算符</td>
<td>表达式1?  表达式2: 表达式3</td>
<td><strong>右到左</strong></td>
<td>三目运算符</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>14</strong></td>
<td><strong>&#x3D;</strong></td>
<td>赋值运算符</td>
<td>变量&#x3D;表达式</td>
<td><strong>右到左</strong></td>
<td>–</td>
</tr>
<tr>
<td><strong>&#x2F;&#x3D;</strong></td>
<td>除后赋值</td>
<td>变量&#x2F;&#x3D;表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>***&#x3D;**</td>
<td>乘后赋值</td>
<td>变量*&#x3D;表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>%&#x3D;</strong></td>
<td>取模后赋值</td>
<td>变量%&#x3D;表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>+&#x3D;</strong></td>
<td>加后赋值</td>
<td>变量+&#x3D;表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>-&#x3D;</strong></td>
<td>减后赋值</td>
<td>变量-&#x3D;表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>&lt;&lt;&#x3D;</strong></td>
<td>左移后赋值</td>
<td>变量&lt;&lt;&#x3D;表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>&gt;&gt;&#x3D;</strong></td>
<td>右移后赋值</td>
<td>变量&gt;&gt;&#x3D;表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>&amp;&#x3D;</strong></td>
<td>按位与后赋值</td>
<td>变量&amp;&#x3D;表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>^&#x3D;</strong></td>
<td>按位异或后赋值</td>
<td>变量^&#x3D;表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>|&#x3D;</strong></td>
<td>按位或后赋值</td>
<td>变量|&#x3D;表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>15</strong></td>
<td><strong>，</strong></td>
<td>逗号运算符</td>
<td>表达式,表达式,…</td>
<td>左到右</td>
<td>–</td>
</tr>
</tbody></table>
<p>x&gt;y?x:y 若x&gt;y为真则返回x，否则返回y</p>
<h3 id="赋值相关"><a href="#赋值相关" class="headerlink" title="赋值相关"></a>赋值相关</h3><pre class=" language-c"><code class="language-c"><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
 <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
 y<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>b<span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的y才=10。 </span>
 y<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>b<span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的y就直接等于6了</span>
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"y=%d,x=%d"</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//关于i++,i--赋值，是从右往左开始算的</span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d %d %d %d %d"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">++</span>i<span class="token punctuation">,</span><span class="token operator">-</span>i<span class="token operator">--</span><span class="token punctuation">,</span><span class="token operator">++</span>i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token operator">++</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i++好像没反应</span>
<span class="token comment" spellcheck="true">//输出</span>
    <span class="token number">2</span> <span class="token number">2</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>
</code></pre>
<h2 id="五-循环语句"><a href="#五-循环语句" class="headerlink" title="五.循环语句"></a>五.循环语句</h2><h3 id="0-单步调试方法"><a href="#0-单步调试方法" class="headerlink" title="0. 单步调试方法"></a>0. 单步调试方法</h3><p>F9插入断点开始调试</p>
<p>F11（汇编跟踪到循环语句）一般黄箭头在c&#x3D;max(a,b)这行时用，然后进入被调用的函数中</p>
<p>F10常用的，运行下一步</p>
<h3 id="1-while"><a href="#1-while" class="headerlink" title="1. while"></a>1. while</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> i<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="2-do…while…"><a href="#2-do…while…" class="headerlink" title="2. do…while…"></a>2. do…while…</h3><blockquote>
<p> do-while循环中，根据情况可以省略while</p>
</blockquote>
<p>先执行再判断while真假</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">do</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="3-for嵌套"><a href="#3-for嵌套" class="headerlink" title="3. for嵌套"></a>3. for嵌套</h3><pre class=" language-c"><code class="language-c">#先执行最内层<span class="token keyword">for</span>，这里因为内部嵌套每次只输出一个字符，所以可用<span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span>代替<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span>
<span class="token macro property">#for(;;)相当于while(1)会一直循环</span>
<span class="token macro property">#for(表达式1;表达式2;表达式3)</span>
<span class="token comment" spellcheck="true">/*
1.先求解表达式1；
2.求解表达式2,其值为真(非0),则执行for循环语句中的内嵌语句,然后执行第3步,其值为假,则结束循环,转到第五步.
3.求解表达式3.
4.转回上面第二步继续执行.
5.循环结束，执行for语句下面一个语句
*/</span>
在字符数组中’\<span class="token number">0</span>’是占一个位置的！
例如 定义<span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span>“hello”，而在内存中字符数组 c 则是<span class="token string">"hello\0"</span>；
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
 
<span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b<span class="token punctuation">,</span>a<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>b<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>b<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">*</span>
<span class="token operator">*</span><span class="token operator">*</span>
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>  
</code></pre>
<h3 id="5-break，continue"><a href="#5-break，continue" class="headerlink" title="5. break，continue"></a>5. break，continue</h3><blockquote>
<ol>
<li><p>break一次只跳出一层循环</p>
</li>
<li><p>while,do while,for可以用break跳出循环,continue结束本次循环，然后进入下次循环</p>
</li>
<li><p>goto,if语句不能break,continue进行控制，也就是说if语句里面的break终止的是if外一层的循环(比如for，while啥的)</p>
</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;conio.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> c<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    c<span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//变量赋初值</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">!=</span><span class="token number">13</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">!=</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//键盘接受字符直到按回车或者esc</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        c<span class="token operator">=</span><span class="token function">getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//，字符输入函数，不回显函数，无需按回车，要求头文件&lt;conio.h></span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">27</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断若esc键则跳出循环</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按下回键，i++</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The number is %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="6-精度判断-算pi"><a href="#6-精度判断-算pi" class="headerlink" title="6.精度判断,算pi"></a>6.精度判断,算pi</h3><blockquote>
<p>近似公式pi&#x2F;4约等于1-1&#x2F;3+1&#x2F;5-1&#x2F;7+…</p>
<p>1e-6表示1*(10^-6)</p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> s<span class="token punctuation">;</span><span class="token keyword">float</span> n<span class="token punctuation">,</span>t<span class="token punctuation">,</span>pi<span class="token punctuation">;</span>
    t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>pi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">;</span>s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1e-6</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        pi<span class="token operator">=</span>pi<span class="token operator">+</span>t<span class="token punctuation">;</span>n<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>s<span class="token operator">=</span><span class="token operator">-</span>s<span class="token punctuation">;</span>t<span class="token operator">=</span>s<span class="token operator">/</span>n<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    pi<span class="token operator">=</span>pi<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pi=%10.6f\n"</span><span class="token punctuation">,</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果输出的长度小于10则会在结果左端补充空格(右对齐)</span>
    <span class="token comment" spellcheck="true">/*float k=6.0;printf("%5.1f\n",k);左端空格为2个*/</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="7-素数判断"><a href="#7-素数判断" class="headerlink" title="7.素数判断"></a>7.素数判断</h3><blockquote>
<p>思路：让m被2到k整除，k&#x3D;sqrt(m),for(i&#x3D;2;i&lt;&#x3D;k;i++),n%i&#x3D;&#x3D;0</p>
</blockquote>
<h3 id="8-斐波那契"><a href="#8-斐波那契" class="headerlink" title="8.斐波那契"></a>8.斐波那契</h3><blockquote>
<p>思路：f1,f2覆盖过去就行了,比如f1&#x3D;f1+f2</p>
</blockquote>
<h2 id="六-数组"><a href="#六-数组" class="headerlink" title="六.数组"></a>六.数组</h2><h3 id="1-简介-string-h"><a href="#1-简介-string-h" class="headerlink" title="1. 简介+string.h"></a>1. 简介+string.h</h3><blockquote>
<ol>
<li>一维数组 类型说明符 数组名[常量表达式];</li>
<li>整型数组int a[10];有十个元素，从a[0]到a[9],,不存在a[10]</li>
<li>vc中int 4字节，float 8字节</li>
<li>对于同一个数组，其所有元素的数据类型都是相同的</li>
<li>允许int a,b,c,d,k1[10],k2[20];</li>
<li>C语言不允许对数组大小作动态定义（不能变量说明数组大小），即int n; scanf(“%d”,&amp;n);int a[n];是不允许的</li>
<li>float a[0]没有意义</li>
<li>合法的a[0]&#x3D;a[2]+a[5]-a[2*3];引用中a[i+j];引用中a[i++]</li>
<li>在c语言中只能逐个使用下标变量，不能一次性使用整个数组</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#string.h</span>
<span class="token function">strcmp</span><span class="token punctuation">(</span>字符数组一，字符数组二<span class="token punctuation">)</span>字符数组一比较字符串
<span class="token function">strlen</span><span class="token punctuation">(</span>字符数组<span class="token punctuation">)</span>求字符串长度
<span class="token function">strlwr</span><span class="token punctuation">(</span>字符数组<span class="token punctuation">)</span>大写换小写
<span class="token function">strupr</span><span class="token punctuation">(</span>字符数组<span class="token punctuation">)</span>小写换大写
<span class="token function">strcat</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s1<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> s2<span class="token punctuation">)</span>字符串<span class="token number">2</span>拼接到字符串<span class="token number">1</span>末尾，删掉字符数组<span class="token number">1</span>末尾的\<span class="token number">0</span>
<span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
将一个字符串复制到另一块空间地址中 的函数，‘\<span class="token number">0</span>’是停止拷贝的终止条件，同时也会将 <span class="token string">'\0'</span> 也复制到目标空间。
<span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>用于找到子串在一个字符串中第一次出现的位置
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
atoi字符串转换为整型
atof字符串转换为浮点型
atol字符串转换为长整型
    <span class="token string">'2'</span><span class="token operator">-</span><span class="token number">48</span><span class="token operator">=</span><span class="token number">2</span>
</code></pre>
<pre><code>#一维数组在内存的存放
int mark[100];
低地址 86 mark[0]
      92 mark[1]
      77 mark[2]
      52 mark[3]
      ...
高地址 94 mark[99]
86占四个字节（每个数据元素占用的字节数，就是基类型的字节数，一个元素占4个字节）
</code></pre>
<h3 id="2-数组赋值"><a href="#2-数组赋值" class="headerlink" title="2. 数组赋值"></a>2. 数组赋值</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> i<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态赋值,每输入一次要回车，赋值还可以a[i]=i;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="3-初始化赋值"><a href="#3-初始化赋值" class="headerlink" title="3. 初始化赋值"></a>3. 初始化赋值</h3><blockquote>
<p>字符数组中可以存放ASCII字符集中的任何字符</p>
<p>字符数组的字符串可以整体输入、输出</p>
<p>不可以用关系运算符对字符数组中的字符串进行比较</p>
<p>假设有char a[10]&#x3D;”abc”;则strlen(a)的值为3。</p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这时候a[8]=0</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这时候a[0]是乱码</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以不指定数组长度</span>

<span class="token comment" spellcheck="true">//要防止越界问题字符串末尾默认是\0</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"ABCDE"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这个系统可以自动添加</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>’A’<span class="token punctuation">,</span> <span class="token string">'B’, '</span>C’<span class="token punctuation">,</span> <span class="token string">'D’, '</span>E’ <span class="token punctuation">,</span><span class="token string">'\0'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这个需要自己手动添加。</span>

<span class="token comment" spellcheck="true">//下面两个，a的长度比b长</span>
<span class="token keyword">char</span> a<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"ABCDEF"</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> b<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="4-数组求解斐波那契"><a href="#4-数组求解斐波那契" class="headerlink" title="4. 数组求解斐波那契"></a>4. 数组求解斐波那契</h3><blockquote>
<p>公式求解</p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>i<span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%12d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="5-冒泡排序"><a href="#5-冒泡排序" class="headerlink" title="5. 冒泡排序"></a>5. 冒泡排序</h3><blockquote>
<p>相邻数比较,小的冒泡上排，大的沉底,</p>
<p>n个数，进行n-1趟比较，第一趟比较进行n-1次两两比较，第j趟进行n-j次两两比较</p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>t<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input 10 number:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.用户输入十个数</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token operator">-</span>j<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//n-j次两两比较</span>
        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                t<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两数替换</span>
                <span class="token comment" spellcheck="true">//这边可以加个flag=0;减少次数</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the sorted number is:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d >>"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="6-二维数组"><a href="#6-二维数组" class="headerlink" title="6.二维数组"></a>6.二维数组</h3><blockquote>
<p>类型说明符 数组名 [常量表达式] [常量表达式];</p>
<p>在c语言中，二维数组是按照行排列的</p>
<p>多维数组第一维的下标量变化最慢</p>
</blockquote>
<pre class=" language-c"><code class="language-c">a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//三行四列，第一个a[0][0]</span>
</code></pre>
<h4 id="1-二维数组引用和初始化"><a href="#1-二维数组引用和初始化" class="headerlink" title="1. 二维数组引用和初始化"></a>1. 二维数组引用和初始化</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
也可以<span class="token punctuation">(</span>第二维长度必须指定<span class="token punctuation">)</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a[0][0]=1;第二行第二个6;第三行第三个11</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">9</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化的是每一行的第一个元素,其他初始化为0!!a[0][0]=1,a[1][0]=5,a[0][1]=0</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化的是第一行的三个元素</span>
</code></pre>
<h4 id="2-getchar输入二维数组（重点）"><a href="#2-getchar输入二维数组（重点）" class="headerlink" title="2. getchar输入二维数组（重点）"></a>2. getchar输入二维数组（重点）</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">;</span>
    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ch<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//吃一个回车</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>		
        
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//用ch避免数组吃回车</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>ch<span class="token punctuation">;</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组末尾补0	</span>
        j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从a[1][0]开始打印第1行，遇到\0结束</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="7-二分法查找"><a href="#7-二分法查找" class="headerlink" title="7. 二分法查找"></a>7. 二分法查找</h3><blockquote>
<p>有个数组从小到大排列,找其中的一个数</p>
<p>选定区域查找,每次搜索范围缩小一半</p>
<p>需要low,mid,high分别指向开始,中间,末尾</p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> M 10</span>
<span class="token comment" spellcheck="true">//宏定义,没分号</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//普通变量存放在栈区,static变量存放在data区</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>low<span class="token punctuation">,</span>high<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>found<span class="token punctuation">;</span>
    low<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>high<span class="token operator">=</span>M<span class="token number">-1</span><span class="token punctuation">;</span>found<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input a number to be search:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//预处理步骤,</span>
    <span class="token comment" spellcheck="true">/*scanf可以改进一下
    do
    &amp;#123;
        scanf("%d",&amp;n);
        getchar();
    &amp;#125;while(n&lt;a[0]||n>a[M-1]);
    */</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        mid<span class="token operator">=</span><span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            found<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到,结束循环</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">></span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
            low<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//若low=mid后面如果high=n,low在n前面一个元素,mid没法指到n</span>
        <span class="token keyword">else</span>
            high<span class="token operator">=</span>mid<span class="token number">-1</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>found<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the index of %d is %d"</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"there is no %d"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="8-中文字符串（宽字符和多字节字符）"><a href="#8-中文字符串（宽字符和多字节字符）" class="headerlink" title="8. 中文字符串（宽字符和多字节字符）"></a>8. 中文字符串（宽字符和多字节字符）</h3><blockquote>
<p>用visual studio 2022</p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;locale.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;wchar.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//utf-8一个中文占三字节</span>
    <span class="token keyword">int</span> cont<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//wchar_t *a=L"春天";</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token operator">=</span><span class="token string">"春天"</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"你好再见"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//cont=wcstombs(b,a,20);</span>
c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">*</span>a<span class="token punctuation">;</span>
    c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
输出
    春好再见
</code></pre>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;locale.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;wchar.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//软件运行时的语言环境</span>
    <span class="token comment" spellcheck="true">//utf-8一个中文占三字节</span>
    <span class="token keyword">int</span> cont<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
wchar_t <span class="token operator">*</span>a<span class="token operator">=</span>L<span class="token string">"春天"</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"你好再见"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
cont<span class="token operator">=</span><span class="token function">wcstombs</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//宽字符转化成多字节字符</span>
c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
输出
    春好再见
</code></pre>
<h2 id="七-函数"><a href="#七-函数" class="headerlink" title="七.函数"></a>七.函数</h2><h3 id="0-概念"><a href="#0-概念" class="headerlink" title="0. 概念"></a>0. 概念</h3><blockquote>
<ol>
<li><p>所有函数是平行的，即在定义函数时是分别进行的，是相互独立的。</p>
</li>
<li><p>函数<strong>不能嵌套定义，但可以嵌套调用</strong></p>
</li>
<li><p>函数可以相互调用，但不能调用main函数，main函数是系统调用的。</p>
</li>
<li><p>程序从main函数开始，在main函数中调用其他函数，调用后流程回到main函数，在main函数中结束整个程序运行。</p>
</li>
<li><p>用户角度函数有两种：标准函数（库函数），用户自定义函数。</p>
</li>
<li><p>函数形式来看，函数分为两类：无参函数（主函数不向被调用函数传递数据，一般用来执行指定的一组操作），有参函数(主函数通过参数向被调用函数传递数据，执行被调用函数会得到一个函数值，供主函数使用)。</p>
</li>
<li><p>在主函数中调用（不是声明）一个函数时，函数名后面的括弧中的参数（可以是一个表达式）称为实际参数（简称实参）。</p>
</li>
<li><p>有参函数中定义函数时，函数名后面的括弧中的变量名称为形式参数（简称形参）。</p>
</li>
<li><p>return后面的括弧中的值（）作为函数带回的值（简称函数返回值）。</p>
</li>
<li><p>在不同函数间传递数据，可以使用的法：参数：通过形式参数和实际参数，返回值：用return语句返回计算结果。全局变量：外部变量。</p>
</li>
<li><p>形参在未出现函数调用之前不占内存中的储存单元，并且在调用结束后形参所占的储存单元也被释放。</p>
</li>
<li><p>实参可以是常量，变量或表达式（比如3，a+b,x&gt;y?x:y）但要有确定的值，在调用时将实参的值赋给形参。</p>
</li>
<li><p>在被定义的函数中，必须指定形参的类型int x</p>
</li>
<li><p>形参或实参的类型赋值兼容或相同</p>
</li>
<li><p>内存中实参单元和形参单元是不同单元。实参对形参的数据传递是值传递（相当于copy，实参保留原值），单向传递，只能由实参传递给形参。</p>
</li>
<li><p>一个函数的函数体一般包括参数和返回值</p>
</li>
<li><p>如果在一个函数中的复合语句中定义了一个变量，则该变量只在该复合语句中有效</p>
</li>
<li><p>在函数内定义的变量只在本函数范围内有效</p>
</li>
<li><p>在不同函数中可以使用同名字的变量</p>
</li>
<li><p>形式参数是局部变量</p>
</li>
<li><p>下面函数调用语句含有实参的个数为2。</p>
<p>(x1,x2)实际上只取了x2做参数，(x3,x4,x5)实际上只取了x5做参数；</p>
<p>func((exp1, exp2), (exp3, exp4, exp5));</p>
</li>
<li><p>如果形参与实参的类型不一致，以形参类型为准</p>
</li>
<li><p>如果函数值的类型与返回值类型不一致，以函数值类型为准</p>
</li>
<li><p>函数的实参可以是常量，变量或者表达式，但是函数形参不能是常量</p>
</li>
<li><p>形参，实参可以为任意类型</p>
</li>
<li><p>C语言规定，简单变量作为实参时，它和对应形参之间的数据传递方式是单向值传递。</p>
</li>
<li><p>若使用一维数组名作为函数实参，则以下正确的说法是必须在主调函数中说明此数组的大小</p>
</li>
<li><p>C语言规定，函数返回值的类型是由在定义该函数时所指定的函数类型所决定</p>
</li>
</ol>
</blockquote>
<h3 id="1-定义函数"><a href="#1-定义函数" class="headerlink" title="1.定义函数"></a>1.定义函数</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//定义无参函数</span>
<span class="token keyword">void</span> <span class="token function">pt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明部分</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//语句部分</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//定义有参函数</span>
<span class="token keyword">double</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"square is used"</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回值跟函数同一类型double</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//定义空函数</span>
<span class="token function">dummy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于int dummy()&amp;#123;&amp;#125;</span>
</code></pre>
<h3 id="2-调用函数时数据的传递"><a href="#2-调用函数时数据的传递" class="headerlink" title="2.调用函数时数据的传递"></a>2.调用函数时数据的传递</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span><span class="token keyword">float</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//被调用函数的声明在主调函数之后，要对max函数的声明，里面是形参</span>
    <span class="token keyword">float</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f,%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//例如输入11.2,13.9</span>
    c<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实参</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max is %f\n"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span><span class="token keyword">float</span> y<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> z<span class="token punctuation">;</span>
    z<span class="token operator">=</span>x<span class="token operator">></span>y<span class="token operator">?</span>x<span class="token punctuation">:</span>y<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//函数返回值通过return语句获得</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="3-函数返回值"><a href="#3-函数返回值" class="headerlink" title="3.函数返回值"></a>3.函数返回值</h3><blockquote>
<ol>
<li>return z;等价于return (z);</li>
<li>函数返回值应属于某一确定类型，在定义函数时指定函数的返回类型。</li>
<li>在c语言中，凡是不加类型说明的函数，自动按整形处理。（c++所有函数要指定函数类型）</li>
<li>对不带回值的函数，应该用void定义函数为无类型（空类型）。（此函数不带return）</li>
</ol>
</blockquote>
<h3 id="4-函数的调用"><a href="#4-函数的调用" class="headerlink" title="4.函数的调用"></a>4.函数的调用</h3><blockquote>
<ol>
<li>一般调用：函数名(实参表列)</li>
<li>vc6，visual studio 2022对实参求值的顺序是自右向左调用</li>
<li>_cdecl方法，stdcall方法都是自右向左调用</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//对于函数调用</span>
<span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>p<span class="token punctuation">;</span>
p<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//如果按自左向右求参的值，则函数调用相当于f(2,3)</span>
<span class="token comment" spellcheck="true">//如果按自右向左求参的值，则函数调用相当于f(3,3)</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>p<span class="token punctuation">;</span>
    p<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span>c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span>c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> c<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="5-函数调用方式"><a href="#5-函数调用方式" class="headerlink" title="5.函数调用方式"></a>5.函数调用方式</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//用函数语句</span>
<span class="token function">printstar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//函数表达式</span>
c<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//函数参数，函数调用作为一个函数的实参</span>
m<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先运行里面那个</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="6-对被调用函数的声明和函数原型"><a href="#6-对被调用函数的声明和函数原型" class="headerlink" title="6.对被调用函数的声明和函数原型"></a>6.对被调用函数的声明和函数原型</h3><blockquote>
<ol>
<li>首先被调用的函数必须是已经存在的函数（是库函数或用户自己定义的函数）。</li>
<li>如果使用库函数，在本文件开头用include语句把头文件包含进来</li>
<li>如果使用用户自己定义的函数，而该函数的位置在调用它的函数（即主调函数）的后面(在同一个文件中)，应该在主调函数中对被调用函数作声明。</li>
<li>声明（declaration）作用是把函数名，函数参数个数，参数类型等信息通知给编译系统，以便在遇到函数调用时，编译系统能正确识别函数并检查调用是否合法。（不占内存）</li>
<li>函数定义是指对函数功能的确立（占内存）</li>
<li>如果被调用函数的声明在主调函数之前，可以不必加以声明。</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span>c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span>c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> c<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//被调函数在主调函数前，上面一行可以不写</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>p<span class="token punctuation">;</span>
    p<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="7-自敲pow函数"><a href="#7-自敲pow函数" class="headerlink" title="7.自敲pow函数"></a>7.自敲pow函数</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> <span class="token function">power</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span><span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span><span class="token function">power</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">power</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span><span class="token keyword">double</span> y<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        z<span class="token operator">*</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
        <span class="token operator">--</span>y<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> z<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="8-自敲sqrt函数-不好-只能整数部分"><a href="#8-自敲sqrt函数-不好-只能整数部分" class="headerlink" title="8.自敲sqrt函数(不好,只能整数部分)"></a>8.自敲sqrt函数(不好,只能整数部分)</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">sqrt_02</span><span class="token punctuation">(</span><span class="token keyword">int</span> question<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> temp<span class="token operator">=</span>question<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>temp<span class="token operator">*</span>temp<span class="token punctuation">)</span><span class="token operator">&lt;=</span>question<span class="token punctuation">)</span>
            <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> question<span class="token operator">=</span><span class="token number">49</span><span class="token punctuation">,</span>answer<span class="token punctuation">;</span>
    answer<span class="token operator">=</span><span class="token function">sqrt_02</span><span class="token punctuation">(</span>question<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>answer<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"question is %d,and answer is %d"</span><span class="token punctuation">,</span>question<span class="token punctuation">,</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="9-统计空白符输入次数"><a href="#9-统计空白符输入次数" class="headerlink" title="9. 统计空白符输入次数"></a>9. 统计空白符输入次数</h3><blockquote>
<p> 即空格，制表符，换行符。</p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token comment" spellcheck="true">//EOF退出</span>
<span class="token comment" spellcheck="true">//关键代码如下</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c<span class="token punctuation">,</span>nb<span class="token punctuation">,</span>nt<span class="token punctuation">,</span>nl<span class="token punctuation">;</span>
    nb<span class="token operator">=</span>nt<span class="token operator">=</span>nl<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">' '</span><span class="token punctuation">)</span>
            <span class="token operator">++</span>nb<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'\t'</span><span class="token punctuation">)</span>
            <span class="token operator">++</span>nt<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
            <span class="token operator">++</span>nl<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span>nb<span class="token punctuation">,</span>nt<span class="token punctuation">,</span>nl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="10-嵌套调用函数"><a href="#10-嵌套调用函数" class="headerlink" title="10.嵌套调用函数"></a>10.嵌套调用函数</h3><blockquote>
<ol>
<li>return返回上一层函数</li>
</ol>
</blockquote>
<h4 id="计算s-2-2-3-2"><a href="#计算s-2-2-3-2" class="headerlink" title="计算s&#x3D;(2^2)!+(3^2)!"></a>计算s&#x3D;(2^2)!+(3^2)!</h4><blockquote>
<p>需要定义的函数</p>
<p>factorial计算阶乘</p>
<p>square计算平方值</p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">long</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">long</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    s <span class="token operator">=</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%ld\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//定义square</span>
<span class="token keyword">long</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> k<span class="token punctuation">;</span>
    <span class="token keyword">long</span> r<span class="token punctuation">;</span>
    k <span class="token operator">=</span> p <span class="token operator">*</span> p<span class="token punctuation">;</span>
    r <span class="token operator">=</span> <span class="token function">factorial</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        c <span class="token operator">*</span><span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//迭代</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> c<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="11-递归调用（recursion）"><a href="#11-递归调用（recursion）" class="headerlink" title="11.递归调用（recursion）"></a>11.递归调用（recursion）</h3><blockquote>
<p>在调用一个函数的过程中，直接或者间接地又调用该函数本身，称为递归调用</p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//计算n!</span>
<span class="token comment" spellcheck="true">//0!=1</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">long</span> <span class="token function">rc</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token keyword">long</span> result<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token function">rc</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d!=%ld\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token function">rc</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> t<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n&lt;0,input error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结束递归</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结束递归</span>
    <span class="token keyword">else</span>
        t <span class="token operator">=</span> <span class="token function">rc</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归，调用这个调用函数</span>
    <span class="token keyword">return</span> t<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="取牌游戏"><a href="#取牌游戏" class="headerlink" title="取牌游戏"></a>取牌游戏</h4><p>游戏规则:<br>桌面有12张牌，玩家和机器人轮流取牌，每次只能取走1~3张，玩家先取,取走最后一张牌的一方失败。请证明玩家必赢。</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/10/05/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/image-20230925150844677.png" class="lozad post-image"src="/2023/10/05/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/image-20230925150844677.png"></p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span>
<span class="token keyword">int</span> x<span class="token punctuation">,</span> z<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组坐标</span>
<span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归深度</span>
<span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
bool <span class="token function">canWin</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    d<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//深度+1</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        d<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0张牌时，自己赢</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 尝试取1~3张牌</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canWin</span><span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存在子负己胜 (对方输，自己赢)</span>
            <span class="token comment" spellcheck="true">//if,()里面canwin的返回值是对方赢或者输</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//人类赢，记录</span>
                b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//机器赢</span>
                b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清空这一块</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            d<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归返回，深度-1</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//不存在子负己胜==任意子胜己负</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//机器人输，记录</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//剩一张牌时，取1</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">4</span><span class="token operator">?</span><span class="token number">3</span><span class="token punctuation">:</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//人类输</span>
        b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    d<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归返回，深度-1</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">pt</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//列号++</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//换行</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">12</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canWin</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"剩下%d 张牌先手必赢  \n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">pt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="12-数组元素作为函数的实参"><a href="#12-数组元素作为函数的实参" class="headerlink" title="12.数组元素作为函数的实参"></a>12.数组元素作为函数的实参</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//只要数组类型和函数的形参变量类型一致</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这里形参可以不是数组</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="13-数组名作为函数参数"><a href="#13-数组名作为函数参数" class="headerlink" title="13.数组名作为函数参数"></a>13.数组名作为函数参数</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//形参和实参必须类型相同的数组</span>
<span class="token comment" spellcheck="true">//进行址传递（形参数组不被分配内存）</span>
<span class="token comment" spellcheck="true">//形参数组和实参数组指向同一段内存空间</span>
<span class="token comment" spellcheck="true">//数组名是第一个元素的地址</span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="求平均成绩"><a href="#求平均成绩" class="headerlink" title="求平均成绩"></a>求平均成绩</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//一维数组score,10学生成绩,</span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">double</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token keyword">double</span> array<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> score<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">82</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">87.5</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">67.5</span><span class="token punctuation">,</span><span class="token number">92.5</span><span class="token punctuation">,</span><span class="token number">93</span><span class="token punctuation">,</span><span class="token number">94</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>result<span class="token punctuation">;</span>
    result<span class="token operator">=</span><span class="token function">average</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"average score is %5.2lf\n"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token keyword">double</span> array<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        result<span class="token operator">+</span><span class="token operator">=</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    result<span class="token operator">/</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="形参数组不定义长度"><a href="#形参数组不定义长度" class="headerlink" title="形参数组不定义长度"></a>形参数组不定义长度</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">double</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token keyword">double</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//形参array里面不写元素个数或者乱写都可以</span>
</code></pre>
<h3 id="14-局部变量（按变量的作用域来分）"><a href="#14-局部变量（按变量的作用域来分）" class="headerlink" title="14.局部变量（按变量的作用域来分）"></a>14.局部变量（按变量的作用域来分）</h3><blockquote>
<ol>
<li>形参也相当于局部变量，只在该函数里有效</li>
<li>主函数定义的变量也只在主函数里有效</li>
<li>不同函数里可以使用相同名字的变量，他们代表不同的对象，互不干扰。</li>
<li>在一个函数内部，可以在复合语句中定义变量，这些变量只在本复合语句中有效，这种复合语句也称为分程序或者程序块。（见下面1-2）</li>
</ol>
</blockquote>
<h4 id="1-1"><a href="#1-1" class="headerlink" title="1-1"></a>1-1</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">float</span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//函数f1</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a,b,c有效</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//函数f2</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//x,y,i,j有效</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//主函数</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//m,n有效</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="1-2"><a href="#1-2" class="headerlink" title="1-2"></a>1-2</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出了括号,这里c就无效了</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c<span class="token punctuation">;</span>
        c<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//c在此范围内有效，a,b在此范围内有效</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="15-全局变量"><a href="#15-全局变量" class="headerlink" title="15.全局变量"></a>15.全局变量</h3><blockquote>
<ol>
<li>在函数外部定义的变量为外部变量，也就是全局变量。（全程变量）</li>
<li>全局变量可以为本文件中其他函数所共用。他的有效范围为从定义变量的位置开始到本源文件结束。</li>
<li>全局变量在程序的全部执行过程中都占用储存单元，而不是仅在需要的时候才开辟单元。过多会降低程序清晰度。</li>
<li>从一个文件复制函数到另一个文件时，全局变量也要移过去，很麻烦。</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> p<span class="token punctuation">,</span>q<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全局有效</span>
<span class="token keyword">float</span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//函数f1</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a,b,c,q,p有效</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//函数f2</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//x,y,i,j,p,q有效</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//主函数</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//m,n,p,q有效</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">vs</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//比如这样用</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    v<span class="token operator">=</span>a<span class="token operator">*</span>b<span class="token operator">*</span>c<span class="token punctuation">;</span>
    p<span class="token operator">=</span>a<span class="token operator">*</span>b<span class="token punctuation">;</span>
    q<span class="token operator">=</span>c<span class="token operator">*</span>b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="16-变量存储类别（变量值存在的时间来分）"><a href="#16-变量存储类别（变量值存在的时间来分）" class="headerlink" title="16.变量存储类别（变量值存在的时间来分）"></a>16.变量存储类别（变量值存在的时间来分）</h3><blockquote>
<p>在c语言中每个变量和函数都有两属性：数据类型和数据的存储类别（数据在内存中的存储方式）。</p>
<p>存储方式分为两大类：静态存储类和动态存储类。</p>
<p>具体四种：自动(auto)，静态(static)，寄存器(register)，外部（extern）</p>
<ul>
<li><p>动态存储</p>
<pre><code>         (auto变量,形参，register变量）（本函数有效）
</code></pre>
</li>
<li><p>静态存储</p>
<p>（静态局部变量，函数内有效）</p>
<p>（static外部变量，本文件有效）</p>
<p>（外部变量，其他文件可用）</p>
</li>
</ul>
</blockquote>
<p><strong>动态存储方式</strong></p>
<p>动态存储方式是在程序运行期间根据需要进行动态的分配存储空间的方式</p>
<p><strong>静态存储方式</strong></p>
<p>静态存储方式是在程序运行开始由系统分配固定存储空间的方式</p>
<h4 id="1-auto变量"><a href="#1-auto变量" class="headerlink" title="1. auto变量"></a>1. auto变量</h4><blockquote>
<ol>
<li><p>函数中的局部变量，如不专门声明为static存储类别，都是动态地分配存储空间的栈，数据存储在动态存储区中。</p>
</li>
<li><p>调用时分配存储空间，调用后释放存储空间。</p>
</li>
<li><p>因此这类局部变量称为自动变量，用auto作为存储类别的声明。</p>
</li>
<li><p>关键字auto可以省略，auto不写则隐含定为自动存储类别，属于动态存储方式。</p>
</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义a，b为自动变量</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> <span class="token keyword">int</span> m相当于<span class="token keyword">int</span> m相当于<span class="token keyword">auto</span> m
</code></pre>
<h4 id="2-用static声明局部变量"><a href="#2-用static声明局部变量" class="headerlink" title="2. 用static声明局部变量"></a>2. 用static声明局部变量</h4><blockquote>
<p>有时希望函数中的局部变量的值在函数调用结束后不消失而保留原值，即其所占的存储单元不释放，在下次该函数调用时，该变量已有值，就是上一次函数调用结束时的值。</p>
<ol>
<li>定义局部静态变量不赋入初值，则对静态局部变量来说，编译时自动赋初值为0（对数值型变量），或者空字符。</li>
<li>而对于自动变量来说，如果不赋入初值则它的值是一个不确定的值。（每次调用后存储单元会释放）</li>
<li>虽然静态局部变量在函数调用结束后任然存在，但是其他函数是不能引用它的。</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于auto int b,</span>
    <span class="token comment" spellcheck="true">//上面局部变量存储在栈</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态变量存储在数据区</span>
    b<span class="token operator">=</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    c<span class="token operator">=</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a作为形参传到另一个函数里                                                         </span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-register-寄存器-变量"><a href="#3-register-寄存器-变量" class="headerlink" title="3. register(寄存器)变量"></a>3. register(寄存器)变量</h4><blockquote>
<p>如果有一些变量频繁地使用，每次循环都要引用某局部变量的值。对寄存器的存储速度远高于对内存的存储速度。</p>
<ol>
<li>register所在子函数执行完毕立即释放。</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">fac</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        f<span class="token operator">*</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> f<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算阶乘</span>
</code></pre>
<h4 id="4-extern声明外部变量-外部函数-重要"><a href="#4-extern声明外部变量-外部函数-重要" class="headerlink" title="4. extern声明外部变量&amp;外部函数(重要)"></a>4. extern声明外部变量&amp;外部函数(重要)</h4><blockquote>
<p>用来扩展程序文件中的作用域</p>
<p>一般跟着全局变量用</p>
<p>&#x2F;&#x2F;如果在定义函数时省略extern,则隐含为外部函数。</p>
</blockquote>
<p>同一个项目下创建a.h,a.c</p>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//a.h</span>
<span class="token macro property">#<span class="token directive keyword">pragma</span> once</span>
<span class="token macro property">#<span class="token directive keyword">ifndef</span> _A_H_</span>
<span class="token macro property">#<span class="token directive keyword">define</span> _A_H_</span>
<span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> N 8</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> m<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明m为一个已定义的外部数组</span>
<span class="token keyword">void</span> <span class="token function">pt</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
</code></pre>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//a.c</span>
<span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"a.h"</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> m<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">register</span> <span class="token keyword">int</span> i <span class="token punctuation">,</span> j <span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//防止数组越界，一般每行最后一位保证是0</span>
            m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">pt</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%g"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//主函数所在.c</span>
<span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">10.56</span><span class="token punctuation">;</span>
    <span class="token function">pt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="5-static声明外部变量"><a href="#5-static声明外部变量" class="headerlink" title="5. static声明外部变量"></a>5. static声明外部变量</h4><blockquote>
<p>希望某些外部变量只限于被本文件引用，而不能被其他文件引用</p>
<p>static int A;只属于该文件</p>
</blockquote>
<h4 id="6-关于变量声明与定义"><a href="#6-关于变量声明与定义" class="headerlink" title="6. 关于变量声明与定义"></a>6. 关于变量声明与定义</h4><blockquote>
<ol>
<li>定义性声明（要建立存储空间如int a）；引用性声明（不需建立存储空间如extern a）;</li>
<li>int a既是声明又是定义；extern a只是声明不是定义；</li>
</ol>
</blockquote>
<h2 id="八-C语言指针详解（重点）"><a href="#八-C语言指针详解（重点）" class="headerlink" title="八. C语言指针详解（重点）"></a>八. C语言指针详解（重点）</h2><h3 id="1-概念与选择题"><a href="#1-概念与选择题" class="headerlink" title="1. 概念与选择题"></a>1. 概念与选择题</h3><blockquote>
<ol>
<li><p>直接访问,例如a&#x3D;5，把5保存到地址为2000的单元</p>
</li>
<li><p>间接访问，例如scanf(“%d”,&amp;a);调用函数时，把变量a的地址传递给函数scanf,函数首先把该地址保存到一个单元中，然后把从键盘接收的数据通过所存储的地址保存到a变量中。&#x2F;&#x2F;我觉得地址可以理解为单元的门牌，数据是里面住的人。</p>
</li>
<li><p>指针作为特殊变量，存放地址。</p>
</li>
<li><p>*<strong>取值操作符。&amp;取址操作符。</strong></p>
</li>
<li><p>当我们定义一个指向指针的指针时，第一个指针包含了第二个指针的地址，第二个指针指向包含实际值的位置。<br>int **var;</p>
</li>
<li><p>指针变量之差是两个指针之间的元素个数</p>
</li>
<li><p><code>char *language[ ]=&#123;&quot;FORTRAN&quot;, &quot;BASIC&quot;, &quot;PASCAL&quot;, &quot;JAVA&quot;, &quot;C&quot;&#125;;其中*language[2]</code>的值是字符P</p>
</li>
<li><p>main函数的正确说明形式是int main(int abc, char **abv)</p>
</li>
<li><p>void main()</p>
<p>{  short int a[10] &#x3D; {2,4,6,8,10,12,14,16,18,20}, *p;</p>
<p>  p &#x3D; a;</p>
<p>  printf(“%x\n”, p);</p>
<p>  printf(“%x\n”, p+9);</p>
<p>}</p>
<p>若假设第一个printf语句输出的是ffca，则第二个printf语句的输出ffdc。</p>
</li>
<li><p>若有以下定义，则正确的程序段是( D )。</p>
</li>
</ol>
<p>   int *p, *s, i, j;</p>
<p>   char *q, ch;</p>
<p>   A) main() { *p &#x3D; 100;  …}&#x2F;&#x2F;p为野指针，解引用出问题</p>
<p>   B) main() { p&#x3D;&ch; s&#x3D;p; …}&#x2F;&#x2F;int指针把char当成int访问不必要内存</p>
<p>   C) main() { p&#x3D;&i; q&#x3D;&ch; p&#x3D;q; …}</p>
<p>   D) <code>main() &#123; p=&amp;i; q=&amp;ch; *p=40; *q=*p; ...&#125;</code></p>
<ol start="10">
<li><p>strcpy1(char *p1, char *p2)</p>
<p> <code> &#123; while(*p2) *p1++=*p2++; &#125;</code>&#x2F;&#x2F;‘\0’没复制</p>
</li>
<li><p>当main函数带有形参时，传给形参的值一般从命令行中得到</p>
</li>
<li><p>若有函数max(a,b)，并且已使函数指针变量p指向函数max，当调用该函数时，正确的调用方法是 (*p)(a,b);</p>
</li>
<li><p>若有以下定义和语句，则对a数组元素的正确引用为*(p[1]+1)  。</p>
<p>int a[2][3], (*p)[3]</p>
<p>p&#x3D;a;</p>
</li>
<li><p>指针变量和它指向的变量之间的关系，可以用指针运算符“*”表示。</p>
</li>
<li><p><code>int b[3][5], (*p)[3], (*q)[5]; p=b; q=b;</code>&#x2F;&#x2F;这段代码是<strong>错误</strong>的，因为数组指针p的列没跟b的列一致。</p>
</li>
<li><p>若有以下定义，且0&lt;&#x3D;i&lt;4，则不正确的赋值语句是( B )。</p>
<p><code>int b[4][6], *p, *q[4];</code></p>
<p><code>A)q[i]=b[i];    B)p=b;    C)p=b[i];    D)q[i]=&amp;b[0][0];</code></p>
<p><code>q本质是一维数组，b是int(*)[]型，b[0]是int *型，&amp;b[0][0]是int*型，而指针p是int *型</code></p>
</li>
</ol>
</blockquote>
<h4 id="1-指针常见形式详解（重要）"><a href="#1-指针常见形式详解（重要）" class="headerlink" title="1. 指针常见形式详解（重要）"></a>1. 指针常见形式详解（重要）</h4><p>32bit架构内存地址长度4字节，32bit程序中指针大小4字节。</p>
<p>64bit架构内存地址长度8字节，64bit程序中指针大小8字节。</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span> 等价于 <span class="token keyword">int</span> <span class="token operator">*</span>a；<span class="token keyword">int</span> b；而不等价于 <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//定义指针变量,用来存放整型变量i的地址</span>
<span class="token keyword">int</span> <span class="token operator">*</span>i_pointer

<span class="token comment" spellcheck="true">//间接存放i的值，可以先找到存放i的地址的变量i_pointer,从中取出i的地址(2000),然后取出i的值3    </span>
<span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>pointer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.这里*不是取值操作符，而是声明指针的特征(表示这是个指针变量，变量名为pointer)</span>
i_pointer<span class="token operator">=</span><span class="token operator">&amp;</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.&amp;取i的地址赋给i_pointer</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>pointer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.这个是取值操作符，进行指针解引用</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token operator">*</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>
    c<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
    a<span class="token operator">=</span><span class="token operator">&amp;</span>c<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针a所在地址单元存放c的地址</span>
    b<span class="token operator">=</span>a<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d   "</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针b所在地址单元存放c的地址</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/*&amp;c       			*a      *b
1703720    内容  1703720	1703720
           地址  1703728  1703724
*/</span>
</code></pre>
<p><strong>辨认准则</strong>：找到变量名(没有就看最内部结构)，先向右看(不跳过括号)，然后向左看(不跳过括号)，然后跳出一层括号，重复上述操作。</p>
<pre><code>        比如：int* a[5]; 首先向右看，它是一个5元素数组，然后向左看指向int类型，所以a是个有5个指向int类型指针的数组。
</code></pre>
<table>
<thead>
<tr>
<th></th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>int a[n]</td>
<td>int数组</td>
</tr>
<tr>
<td>int *p[n]</td>
<td>指针数组p，由n个指向整型的指针元素构成</td>
</tr>
<tr>
<td>int (*p)[n]</td>
<td>p为指向含n个元素的一维数组的指针变量</td>
</tr>
<tr>
<td>int f()</td>
<td>f为带回一个整型函数值的函数</td>
</tr>
<tr>
<td>int *p()</td>
<td>p为带回一个指针的函数，该指针指向整形数据</td>
</tr>
<tr>
<td>int (*p)()</td>
<td>p为指向函数的指针，该函数返回整型值</td>
</tr>
<tr>
<td>int **p</td>
<td>p为指针变量（二级指针），存放一级指针地址，一级指针指向int变量</td>
</tr>
<tr>
<td><code>int (*(*v)[])()</code></td>
<td>v是一个指针，指向一个数组，数组元素是指针，每个指针指向一个int函数。</td>
</tr>
</tbody></table>
<p>*&amp;a等价于变量a</p>
<p>&amp;*a等价于&amp;a</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> s<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>
    str<span class="token operator">=</span><span class="token function">fa</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str=%s\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//printf(%s)需要的是一个地址，然后从这个地址开始打印字符串遇到空格或\0停止</span>
    <span class="token function">free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止内存泄漏。free()只能释放指针所指向的那片内存。</span>
    str<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止产生野指针</span>
    <span class="token function">system</span><span class="token punctuation">(</span>pause<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">fa</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//指针数组带回一个指针</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>pstr<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
    x<span class="token operator">++</span><span class="token punctuation">;</span>
    pstr<span class="token operator">=</span><span class="token function">fb</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> pstr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针变量pstr到这里结束</span>
    
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">fb</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>pa<span class="token operator">=</span><span class="token string">"123456"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//pa指针在栈区</span>
    <span class="token comment" spellcheck="true">//123456在堆区</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//指针变量在栈区分配4字节</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//malloc函数开辟一块堆区存储空间,</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"wudunxiong 123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//wudongxiong 123456在常量区</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回给主调函数fa()</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/10/05/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/image-20221119163444968.png" class="lozad post-image"src="/2023/10/05/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/image-20221119163444968.png"></p>
<h4 id="2-野指针"><a href="#2-野指针" class="headerlink" title="2. 野指针"></a>2. 野指针</h4><p>野指针是指程序员或操作者不能控制的指针。野指针不是NULL指针，而是指向“垃圾”的指针。</p>
<p>造成“野指针”的原因主要有：</p>
<p>1.指针变量没有初始化，任何指针变量刚被创建时不会自动成为NULL指针，它的缺省值是随机的，它会乱指。在初始化的时候要么指向合法的指针，要么指向NULL。</p>
<p>2.指针变量被free或delete之后，没有设置为NULL。它们只是把指针所指的内存给释放掉，但指针本身还有值。</p>
<p>3.指针操作超越了变量的作用范围。 注意其生命周期。</p>
<h4 id="3-编写swap的注意"><a href="#3-编写swap的注意" class="headerlink" title="3. 编写swap的注意"></a>3. 编写swap的注意</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d,b=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d,b=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> t<span class="token punctuation">;</span>
   t<span class="token operator">=</span>p<span class="token punctuation">;</span> p<span class="token operator">=</span>q<span class="token punctuation">;</span> q<span class="token operator">=</span>t<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
上面代码是错的，p，q不指向a，b，没法改值。
修改后的swap函数可以是：
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>q <span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>
t<span class="token operator">=</span><span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">*</span>q<span class="token punctuation">;</span> <span class="token operator">*</span>q<span class="token operator">=</span>t<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="2-指针变量定义"><a href="#2-指针变量定义" class="headerlink" title="2.指针变量定义"></a>2.指针变量定义</h3><blockquote>
<ol>
<li>变量的地址称为该变量的指针。（指针变量的值是一个地址）</li>
<li>专门用来存放变量地址的变量，称为指针变量。</li>
<li>定义一般形式：类型说明符 *变量名</li>
<li>&amp;a表示a的地址</li>
<li>如果将一个整数赋给一个指针变量，那么编译器会把该值当成一个地址来处理。</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//合法定义</span>
<span class="token keyword">char</span> a<span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;a是a的地址(一个整数)</span>
<span class="token comment" spellcheck="true">//非法定义</span>
<span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">66.6</span><span class="token punctuation">;</span> <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//b不是整数不能代表一段地址</span>
</code></pre>
<p><strong>注意</strong>：(*pointer_1)++相当于a++，要打括号，因为从右往左结合</p>
<h3 id="3-指针做函数参数"><a href="#3-指针做函数参数" class="headerlink" title="3.指针做函数参数"></a>3.指针做函数参数</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>pointer_1<span class="token punctuation">,</span><span class="token operator">*</span>pointer_2<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pointer_1<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
    pointer_2<span class="token operator">=</span><span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>pointer_1<span class="token punctuation">,</span>pointer_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此后p1指向b，p2指向a</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d > %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment" spellcheck="true">//这里也可以是*pointer_1,*pointer_2    </span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//*声明指针变量</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'm swapping······\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    temp<span class="token operator">=</span><span class="token operator">*</span>p1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用了取值操作符，所以temp=a;</span>
    <span class="token operator">*</span>p1<span class="token operator">=</span><span class="token operator">*</span>p2<span class="token punctuation">;</span>
    <span class="token operator">*</span>p2<span class="token operator">=</span>temp<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="4-数组与指针"><a href="#4-数组与指针" class="headerlink" title="4.数组与指针"></a>4.数组与指针</h3><blockquote>
<ol>
<li>一个数组包含若干元素，每个数组元素都在内存中占用存储单元，但它们都有相应的地址。</li>
<li>数组名翻译成数组第一个元素的地址。</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c">p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
p<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//比如p=&amp;*(a+1);</span>
<span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span>
</code></pre>
<h4 id="1-数组名作函数参数"><a href="#1-数组名作函数参数" class="headerlink" title="1. 数组名作函数参数"></a>1. 数组名作函数参数</h4><blockquote>
<p>f(int arr[],int n)编译时将arr按照指针处理（数组名代表数组首元素地址），相当于将函数f的首部写成f(int *arr,int n)</p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token function">reverse</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实参a是一个一维数组</span>
<span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//形参x为指针变量</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="2-多维数组和指针（重点）"><a href="#2-多维数组和指针（重点）" class="headerlink" title="2. 多维数组和指针（重点）"></a>2. 多维数组和指针（重点）</h4><blockquote>
<p>定义一个a[3] [4]，地址排列类似一维数组</p>
<p>一维数组取出的值是二维数组的地址例如*(a+1)</p>
</blockquote>
<table>
<thead>
<tr>
<th>表现形式</th>
<th>含义</th>
<th>地址（例如）</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>二维数组名，指向以维护组a[0],即0行首地址</td>
<td>2000</td>
</tr>
<tr>
<td>a[0],<code>*(a+0)</code>,<code>*a</code></td>
<td>0行0列元素地址</td>
<td>2000</td>
</tr>
<tr>
<td>a+1,&amp;a[1]</td>
<td>1行首地址</td>
<td>2016</td>
</tr>
<tr>
<td>a[1],<code>*(a+1)</code></td>
<td>1行0列元素a[1] [0]的地址</td>
<td>2016</td>
</tr>
<tr>
<td>a[1]+2,*(a+1)+2,&amp;a[1] [2]</td>
<td>1行2列元素a[1] [2]的地址</td>
<td>2024</td>
</tr>
<tr>
<td><code>*(a[i]+2)</code>,<code>*(*(a+1)+2)</code>,a[1] [2]</td>
<td>一行二列元素a[1] [2]的值</td>
<td>元素值为13</td>
</tr>
</tbody></table>
<h4 id="3-指向二维数组的指针"><a href="#3-指向二维数组的指针" class="headerlink" title="3. 指向二维数组的指针"></a>3. 指向二维数组的指针</h4><blockquote>
<ol>
<li><p>把二维数组a分解为一维数组a[0],a[1],a[2]之后，设p为指向二维数组的指针变量。</p>
</li>
<li><p>可定义为:int (*p)[4]，他表示p是一个指针变量，指向包含4个元素的一维数组。</p>
</li>
<li><p>若指向第一个一维数组a[0],其值等于a,a[0],或&amp;a[0] [0]等。</p>
</li>
<li><p>二维数组指针变量说明的一般形式为：</p>
<p>类型说明符 (*指针变量名)[长度]</p>
</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p相当于有4个格子的窗格。</span>
    <span class="token comment" spellcheck="true">//本质是指向一个含有四个元素数组的指针</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    p<span class="token operator">=</span>a<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d "</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="5-字符串与指针"><a href="#5-字符串与指针" class="headerlink" title="5. 字符串与指针"></a>5. 字符串与指针</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//声明字符串，放到常量存储区，字符串不可改变，字符串编译地址赋给*a</span>
<span class="token comment" spellcheck="true">//可以改变指针变量的值，让它指向不同常量的值</span>
<span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token operator">=</span><span class="token string">"i love fishc.com!"</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token operator">+</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出ve fishc.com!</span>
</code></pre>
<h3 id="6-关于使用字符指针变量和字符数组"><a href="#6-关于使用字符指针变量和字符数组" class="headerlink" title="6. 关于使用字符指针变量和字符数组"></a>6. 关于使用字符指针变量和字符数组</h3><blockquote>
<p>1.字符数组由若干个元素组成，每个元素中放一个字符，而字符指针变量中存放的是字符串第一个字符的地址。</p>
</blockquote>
<pre class=" language-c"><code class="language-c">对数组的初始化
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"i love fish"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
不等价于
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"i love fish"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个只能一个字符一个字符赋值</span>
</code></pre>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//对于指针可以</span>
<span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>
a<span class="token operator">=</span><span class="token string">"i love fish"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//等价于</span>
<span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token operator">=</span><span class="token string">"i love fish"</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//以上完全可以</span>
<span class="token comment" spellcheck="true">//以下危险（指针变量不赋初值会随机指向）</span>
<span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//用数组下标索引</span>
<span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token operator">=</span><span class="token string">"i love fishc.com!"</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token operator">+</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出ve fishc.com!char </span>
</code></pre>
<h3 id="7-指针函数与函数指针"><a href="#7-指针函数与函数指针" class="headerlink" title="7. 指针函数与函数指针"></a>7. 指针函数与函数指针</h3><p>指针函数：返回指针的函数,本质函数</p>
<p>函数指针：指向函数的指针</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">han2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//han2在han下面，所以要声明</span>
<span class="token keyword">void</span> <span class="token function">han</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>x1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//函数指针，注意*号不要漏了</span>
    <span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">;</span>
    p <span class="token operator">=</span> <span class="token function">x1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a:%d b:%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">han2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针函数</span>
    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p和b都指向a的地址</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token function">han</span><span class="token punctuation">(</span>han2<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="8-函数指针实现多态"><a href="#8-函数指针实现多态" class="headerlink" title="8. 函数指针实现多态"></a>8. 函数指针实现多态</h3><blockquote>
<p>每次调用实现不同功能</p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fun<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//也可以return (*fun)(a,b);</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>r<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入a、b两数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"两数之和：%d\n"</span><span class="token punctuation">,</span> <span class="token function">process</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"两数之差：%d\n"</span><span class="token punctuation">,</span> <span class="token function">process</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"两数之积：%d\n"</span><span class="token punctuation">,</span> <span class="token function">process</span><span class="token punctuation">(</span>mul<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="10-指针数组和数组指针"><a href="#10-指针数组和数组指针" class="headerlink" title="10. 指针数组和数组指针"></a>10. 指针数组和数组指针</h3><p>指针数组：存放指针的数组，本质数组。int* name[10]&#x3D;{&amp;a[0],&amp;a[1],&amp;a[2],&amp;a[3],&amp;a[4]};</p>
<p>数组指针：指向数组的指针。int (*a)[5];&#x2F;&#x2F;指向一个每列5个元素的int类型数组</p>
<h3 id="11-main函数参数问题"><a href="#11-main函数参数问题" class="headerlink" title="11. main函数参数问题"></a>11. main函数参数问题</h3><blockquote>
<ol>
<li><p>写完下面代码后编译，把生成的.exe文件(在debug文件夹里)放到一个文件夹里</p>
</li>
<li><p>在文件夹里开cmd，</p>
</li>
<li><p>输入 文件名.exe fish.com i love fish .com!</p>
<p>例如.\666.exe i love fishc.com? yess;</p>
</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the number of string is : %d\n"</span><span class="token punctuation">,</span>argc<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数个数</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>argc<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the string %d is : %s\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后面输入时，空格隔开当成一个参数</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="12-void指针与const指针"><a href="#12-void指针与const指针" class="headerlink" title="12. void指针与const指针"></a>12. void指针与const指针</h3><blockquote>
<p>void *p</p>
</blockquote>
<ul>
<li><p>不指向一个确定的类型数据，仅仅存放一个地址</p>
</li>
<li><p>如果将void指针的值赋给其他类型的指针，则<strong>需要进行强制的类型转换</strong></p>
</li>
<li><p>其他类型指针都可以直接给void指针赋值</p>
</li>
</ul>
<blockquote>
<p>const指针</p>
</blockquote>
<p>const 在*号左边则不能改变值，在右边则不能改变指向。</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token operator">=</span><span class="token string">"Welcome to Fishc.com!\n\n"</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//指针str指向const char类型，不能改值，可以改指向。</span>
<span class="token macro property">#<span class="token directive keyword">if</span>(0)</span>
    str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//非法</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
    str<span class="token operator">=</span><span class="token string">"I love fishc.com!\n\n"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//合法</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n%s"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> str<span class="token operator">=</span><span class="token string">"Welcome to Fishc.com!\n\n"</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//从右往左看，str先是一个常量，然后发现是const指针指向char</span>
    <span class="token comment" spellcheck="true">//所以str不可改指向，但是可以改指向的数据内容。(理论上)</span>
    str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//合法（编译可过，但windows静止常量被重写）</span>
<span class="token macro property">#<span class="token directive keyword">if</span>(0)</span>
    str<span class="token operator">=</span><span class="token string">"I love fishc.com!\n\n"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//非法</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
        
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n%s"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="13-二级指针"><a href="#13-二级指针" class="headerlink" title="13. 二级指针"></a>13. 二级指针</h3><blockquote>
<ol>
<li>int *p,**p;&#x2F;&#x2F;这是错误的，因为重名了。</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token operator">&amp;</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//二级指针所在地址存放一级指针的地址</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//426767748 426767748c</span>
    <span class="token comment" spellcheck="true">//指针一次解引用,*s类型int*</span>
    <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//指针二次解引用,**s类型int</span>
    <span class="token operator">*</span><span class="token operator">*</span>s <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="14-数组偏移与指针偏移（重要）"><a href="#14-数组偏移与指针偏移（重要）" class="headerlink" title="14. 数组偏移与指针偏移（重要）"></a>14. 数组偏移与指针偏移（重要）</h3><blockquote>
<p>数组偏移</p>
</blockquote>
<p><a href="https://blog.csdn.net/weixin_46656470/article/details/123743883">详见</a></p>
<p>int a[10]&#x3D;{0};</p>
<p>&amp;a 、a 、&amp;a[0] 表示的是同一个地址，但是级别是不一样的。</p>
<p>&amp;a + 1 偏移了40字节，即声明数组空间的大小。<br>a + 1 ，&amp;a[0] + 1偏移了4字节，即数组中一个元素的空间大小。<br>&amp;a指向整个数组的地址，是数组中的最高级别，而 a 和 &amp;a[0] 表示 &amp;a 代表地址的下一级别地址。</p>
<blockquote>
<p>指针偏移</p>
</blockquote>
<p>  char a[10] &#x3D; “hello world”;<br>  char* p &#x3D; a;</p>
<p>p+1偏移一个字节(sizeof(char))。</p>
<p><code>char b[4][10] = &#123; 0 &#125;; </code><br>char (*p)[10] &#x3D; b;<br>p + 1偏移10个字节。</p>
<pre class=" language-c"><code class="language-c"> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//普通变量</span>
    <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//指针数组，本质数组</span>
    <span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>a1<span class="token punctuation">,</span><span class="token operator">&amp;</span>a2<span class="token punctuation">,</span><span class="token operator">&amp;</span>a3 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组大小32</span>
    <span class="token comment" spellcheck="true">//二级指针，本质指针</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> s <span class="token operator">=</span> p<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d \n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//s的值是数组的地址</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a1<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//&amp;a1相当于1级指针，*s==&amp;a1==p[0]</span>
    <span class="token comment" spellcheck="true">//*s+1和p[0]+1偏移4字节，因为int a1,a2,a3内存中连续存储</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="九-预处理"><a href="#九-预处理" class="headerlink" title="九.预处理"></a>九.预处理</h2><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><blockquote>
<ol>
<li>方便输出</li>
</ol>
<p>比如#define P printf</p>
<p>#define D “%d\n”</p>
<p>#define F “%f\n”</p>
<p>使用时P(D F,a,b);</p>
</blockquote>
<h3 id="1-无参宏定义"><a href="#1-无参宏定义" class="headerlink" title="1. 无参宏定义"></a>1. 无参宏定义</h3><blockquote>
<p>#开头的均为预处理命令</p>
<p>define为宏定义命令</p>
<p>格式</p>
<p>#define 标识符 字符串</p>
<p>注意</p>
<ol>
<li><p>宏定义必须写在函数以外，作用域为宏定义命令开始到源程序结束，可以用#undef命令终止作用域</p>
<p>比如#undef PI;</p>
</li>
<li><p>末尾加分号则连分号一起置换</p>
</li>
<li><p>宏名在源程序中若用引号括起来，则预处理程序不对其作宏代换。</p>
</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> PI 3.1415926</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"now the PI is %g\n"</span><span class="token punctuation">,</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="2-宏定义"><a href="#2-宏定义" class="headerlink" title="2. 宏定义"></a>2. 宏定义</h3><blockquote>
<ol>
<li><p>宏定义允许嵌套，在宏定义的的字符串中可以使用已经定义的宏名。在宏展开时由预处理程序层层代换。</p>
<p><code>#define PI 3.1415926</code></p>
<p><code>#define S PI*r*r</code></p>
</li>
<li><p>宏定义是普通的字符串替换</p>
</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _quote(que) quote</span>
<span class="token macro property">#<span class="token directive keyword">define</span> qwe _quote(que)</span>
<span class="token comment" spellcheck="true">//qwe表示quote</span>
</code></pre>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//打印数字0-999</span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> A(x) x;x;x;x;x;x;x;x;x;x;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="3-typedef"><a href="#3-typedef" class="headerlink" title="3. typedef"></a>3. typedef</h3><blockquote>
<p>对类型说明符重命名</p>
<p>比如</p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span>　<span class="token keyword">char</span><span class="token operator">*</span>　pStr1<span class="token punctuation">;</span>
<span class="token macro property">#<span class="token directive keyword">define</span>　pStr2　char*　</span>
pStr1　s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于char *s1, *s2;</span>
pStr2　s3<span class="token punctuation">,</span> s4<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于char* s3, s4;</span>
<span class="token comment" spellcheck="true">//#define 只做简单的字符串替换</span>
</code></pre>
<h3 id="4-带参宏定义"><a href="#4-带参宏定义" class="headerlink" title="4. 带参宏定义"></a>4. 带参宏定义</h3><blockquote>
<ol>
<li><p>带参宏定义中，宏名和形参表之间不能有空格出现。</p>
<p>#define MAX (a,b) (a&gt;b)?a:b&#x2F;&#x2F;不行</p>
<p>#define MAX(a,b)  (a&gt;b)?a:b&#x2F;&#x2F;行</p>
</li>
<li><p>. 在带参宏定义中，形式参数不分配内存单元，因此不必作类型定义。宏定义可以带有参数，宏调用时是以实参代换形参。而不是“值传送”。</p>
</li>
<li><p>在宏定义中，<strong>字符串内的形参通常要用括号括起来以避免出错</strong>。</p>
<p>#define SQ(y)   (y)*(y)  那么SQ(4)&#x3D;16</p>
<p>#define SQ(y)   y*y   那么SQ(3+1)&#x3D;7   3+1乘3+1</p>
<p>#define SQ(y)   (y)*(y)  那么160&#x2F;SQ(3+1)&#x3D;160 160&#x2F;y乘y</p>
<p>#define SQ(y)   ((y)*(y))  那么160&#x2F;SQ(3+1)&#x3D;10</p>
</li>
<li><p>在宏定义中的形参是标识符，而宏调用中的实参可以是表达式。</p>
</li>
<li><p>. 带参的宏和带参函数很相似，但有本质上的不同，除上面已谈到的各点外，把同一表达式用函数处理与用宏处理两者的结果有可能是不同的。</p>
<p>#define SQ(y)   ((y)*(y))</p>
<p>SQ(++i),如果i&#x3D;1</p>
<p>(++i)*(++i)&#x3D;9</p>
</li>
<li><p>宏定义也可用来定义多个语句，在宏调用时，把这些语句又代换到源程序内。</p>
</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> M(y) y*y+3*y      </span><span class="token comment" spellcheck="true">/*宏定义*/</span>
       ……
    k<span class="token operator">=</span><span class="token function">M</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">/*宏调用*/</span>
</code></pre>
<h3 id="5-文件包含"><a href="#5-文件包含" class="headerlink" title="5. 文件包含"></a>5. 文件包含</h3><blockquote>
<ol>
<li><p>一个include命令只能指定一个被包含文件，若有多个文件要包含，则需用多个include命令。</p>
</li>
<li><p>文件包含允许嵌套，即在一个被包含的文件中又可以包含另一个文件。</p>
</li>
<li><p>#include”stdio.h”</p>
<p>#include&lt;math.h&gt;</p>
<p>使用尖括号表示在包含文件目录中去查找(包含目录是由用户在设置环境时设置的)，而不在源文件目录去查找；</p>
<p>使用双引号则表示首先在当前的源文件目录中查找，若未找到才到包含目录中去查找</p>
</li>
</ol>
</blockquote>
<h3 id="6-条件编译"><a href="#6-条件编译" class="headerlink" title="6. 条件编译"></a>6. 条件编译</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> 标识符</span>
程序段<span class="token number">1</span>
<span class="token macro property">#<span class="token directive keyword">else</span></span>
程序段<span class="token number">2</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
<span class="token number">1</span><span class="token punctuation">.</span>如果标识符已被 #define命令定义过则对程序段<span class="token number">1</span>进行编译；否则对程序段<span class="token number">2</span>进行编译。没有程序段<span class="token number">2</span>，可以不写#<span class="token keyword">else</span>。

<span class="token number">2</span><span class="token punctuation">.</span>不执行
<span class="token macro property">#<span class="token directive keyword">if</span>(0)</span>
程序段
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
</code></pre>
<h2 id="十-结构体和共用体"><a href="#十-结构体和共用体" class="headerlink" title="十. 结构体和共用体"></a>十. 结构体和共用体</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><ol>
<li><p>在定义结构时，不可以为成员设置默认值</p>
</li>
<li><p>结构体中的成员可以与结构体变量<strong>同名</strong></p>
</li>
<li><p>C语言结构体类型变量在其生存期间<strong>所有成员</strong>一直驻留在内存中</p>
</li>
<li></li>
</ol>
<pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">,</span> m<span class="token punctuation">,</span> d<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> date<span class="token punctuation">;</span>
 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> PERSON<span class="token punctuation">;</span>
</code></pre>
<p>则下面定义结构体数组并赋值的语句中错误的是()。</p>
<pre class=" language-c"><code class="language-c">PERSON x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">04</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">04</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
```




 <span class="token number">5</span><span class="token punctuation">.</span> 
   ```c
   <span class="token keyword">typedef</span> <span class="token keyword">struct</span> REC
   <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span> c<span class="token punctuation">;</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>REC1<span class="token punctuation">;</span><span class="token operator">/</span><span class="token comment" spellcheck="true">/**REC1，REC是结构体类型,不是变量**
   ```

 6. 结构体类型本身不占用内存空间，结构体变量占用内存空间。

 7. 结构体成员的类型不一定是基本数据类型。

 8. 共用体变量不可以进行初始化

 9. 枚举类型中的元素都具有一个整型值。



### 2. 结构体变量定义和赋值

```c
/*1.先声明结构体类型再定义变量名
类型名struct 结构体名student 变量名student1
定义student1和student2为struct student类型的变量，具有struct student 类型的结构
在定义了结构体变量后，系统会为之分配内存单元。*/</span>
<span class="token keyword">struct</span> student
  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> num<span class="token punctuation">;</span>
      <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">char</span> sex<span class="token punctuation">;</span>
      <span class="token keyword">int</span> age<span class="token punctuation">;</span>
      <span class="token keyword">float</span> score<span class="token punctuation">;</span>
      <span class="token keyword">char</span> addr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> student student1<span class="token punctuation">,</span>student2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//有点像实例化对象</span>

<span class="token comment" spellcheck="true">//2.在声明类型的同时定义变量</span>
<span class="token keyword">struct</span> student<span class="token comment" spellcheck="true">//结构体名</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> num<span class="token punctuation">;</span>
     <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成员表列</span>
     <span class="token keyword">char</span> sex<span class="token punctuation">;</span>
     <span class="token keyword">int</span> age<span class="token punctuation">;</span>
     <span class="token keyword">float</span> score<span class="token punctuation">;</span>
     <span class="token keyword">char</span> addr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>student1<span class="token punctuation">,</span>student2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//变量名表列</span>

<span class="token comment" spellcheck="true">//3. 直接定义结构体类型变量,即不出现结构体名</span>
<span class="token keyword">struct</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>student<span class="token punctuation">;</span>
```

<span class="token operator">></span> 赋值

```c
<span class="token keyword">struct</span> student
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">;</span>
    <span class="token keyword">char</span> sex<span class="token punctuation">;</span>
    <span class="token keyword">float</span> score<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>boy1<span class="token punctuation">,</span> boy2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">"Jane"</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">98.5</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//赋值方法1</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    boy1<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//赋值方法2</span>
    boy1<span class="token operator">=</span>boy2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//赋值方法3</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span>name <span class="token punctuation">,</span> <span class="token string">"Fishc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//赋值方法4</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
```



### <span class="token number">3</span><span class="token punctuation">.</span> 结构体引用与嵌套

<span class="token number">1</span><span class="token punctuation">.</span> “<span class="token punctuation">.</span>”是成员<span class="token punctuation">(</span>分量<span class="token punctuation">)</span>运算符

<span class="token number">2</span><span class="token punctuation">.</span> 正确引用结构体变量中成员的方式为： 结构体变量名<span class="token punctuation">.</span>成员名

  <span class="token number">3</span><span class="token punctuation">.</span> 不能将一个结构体变量作为一个整体进行输入和输出。
   <span class="token number">4</span><span class="token punctuation">.</span> 对结构体变量的成员可以像普通变量一样进行各种运算（根据其类型决定可以进行的运算）。

```c
<span class="token comment" spellcheck="true">/* 不能用student1.birthday来访问student1变量中的成员birthday,因为birthday本身是一个结构体变量。*/</span>
<span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> date
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> day<span class="token punctuation">;</span>
        <span class="token keyword">int</span> month<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num<span class="token punctuation">;</span>
        <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> sex<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> date birthday<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把struct date看成是自定义类型。</span>
        <span class="token keyword">float</span> score<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> boy1<span class="token punctuation">,</span> boy2<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input birthday(MM:) "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>boy1<span class="token punctuation">.</span>birthday<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input birthday(DD:) "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>boy1<span class="token punctuation">.</span>birthday<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    boy2 <span class="token operator">=</span> boy1<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"boy1's birthday is %d-%d\n"</span><span class="token punctuation">,</span> boy1<span class="token punctuation">.</span>birthday<span class="token punctuation">.</span>month<span class="token punctuation">,</span> boy1<span class="token punctuation">.</span>birthday<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"boy2's birthday is %d-%d\n"</span><span class="token punctuation">,</span> boy2<span class="token punctuation">.</span>birthday<span class="token punctuation">.</span>month<span class="token punctuation">,</span> boy2<span class="token punctuation">.</span>birthday<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
```

 

### <span class="token number">5</span><span class="token punctuation">.</span> 结构体数组

```c
<span class="token comment" spellcheck="true">//可以这样定义</span>
<span class="token keyword">struct</span> student
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> num<span class="token punctuation">;</span>
		<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">char</span> sex<span class="token punctuation">;</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
		<span class="token keyword">float</span> score<span class="token punctuation">;</span>
		<span class="token keyword">char</span> addr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> student student<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//或者这样</span>
<span class="token keyword">struct</span> student
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> num<span class="token punctuation">;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> sex<span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
	<span class="token keyword">float</span> score<span class="token punctuation">;</span>c
	<span class="token keyword">char</span> addr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>student<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
```

### <span class="token number">6</span><span class="token punctuation">.</span> 初始化数组

```c
<span class="token keyword">struct</span> student
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> num<span class="token punctuation">;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span>； 
	<span class="token keyword">char</span> sex；     
  	<span class="token keyword">int</span> age； 
	<span class="token keyword">float</span> score<span class="token punctuation">;</span> 
	<span class="token keyword">char</span> addr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span>；
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>stu<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>＝ <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">101</span><span class="token punctuation">,</span>″LiLin″<span class="token punctuation">,</span>′M′<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">87.5</span><span class="token punctuation">,</span>″Beijing″<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">102</span><span class="token punctuation">,</span>″Zhang″<span class="token punctuation">,</span>′F′<span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>″Shanghai″<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>　 
或者
<span class="token keyword">struct</span> student　str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>…<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>…<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>…<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>；
<span class="token operator">&lt;</span><span class="token operator">/</span>stdio<span class="token punctuation">.</span>h<span class="token operator">></span></code></pre>
<h3 id="7-指向结构体类型的指针"><a href="#7-指向结构体类型的指针" class="headerlink" title="7. 指向结构体类型的指针"></a>7. 指向结构体类型的指针</h3><ol>
<li><p>结构指针变量说明的一般形式为：</p>
<pre><code>         struct 结构名 *结构指针变量名
 
                 	    	    	    	    	    	    		struct stu *pstu;
</code></pre>
</li>
<li><p>赋值是把结构变量的首地址赋予该指针变量，不能把结构名赋予该指针变量。</p>
<p>   pstu&#x3D;&amp;boy是正确的。</p>
<pre><code>         pstu=&amp;stu是错误的。

        **结构名**表示一个结构形式，编译系统并不对它分配内存空间。**结构体变量**有分配存储空间。
</code></pre>
</li>
<li><p>访问方法</p>
<p>(*pstu).num</p>
<p>pstu-&gt;num</p>
</li>
</ol>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">struct</span> stu
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      
      <span class="token keyword">int</span> num<span class="token punctuation">;</span>     
      <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>      
      <span class="token keyword">char</span> sex<span class="token punctuation">;</span>      
      <span class="token keyword">float</span> score<span class="token punctuation">;</span>      
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> boy1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">"Fishc"</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">78.5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">struct</span> stu <span class="token operator">*</span>pstu<span class="token punctuation">;</span>
      pstu <span class="token operator">=</span> <span class="token operator">&amp;</span>boy1<span class="token punctuation">;</span>
      
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Number = %d\nName = %s\n"</span><span class="token punctuation">,</span> boy1<span class="token punctuation">.</span>num<span class="token punctuation">,</span> boy1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Sex = %c\nScore = %f\n\n"</span><span class="token punctuation">,</span> boy1<span class="token punctuation">.</span>sex<span class="token punctuation">,</span> boy1<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>      

      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Number = %d\nName = %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pstu<span class="token punctuation">)</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pstu<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Sex = %c\nScore = %f\n\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pstu<span class="token punctuation">)</span><span class="token punctuation">.</span>sex<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pstu<span class="token punctuation">)</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>      

      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Number = %d\nName = %s\n"</span><span class="token punctuation">,</span> pstu<span class="token operator">-></span>num<span class="token punctuation">,</span> pstu<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Sex = %c\nScore = %f\n\n"</span><span class="token punctuation">,</span> pstu<span class="token operator">-></span>sex<span class="token punctuation">,</span> pstu<span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>      
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">++</span>p<span class="token punctuation">)</span><span class="token operator">-></span>m这里<span class="token operator">-></span>优先级比<span class="token operator">*</span>高
</code></pre>
<h3 id="8-结构指针变量作函数参数"><a href="#8-结构指针变量作函数参数" class="headerlink" title="8. 结构指针变量作函数参数"></a>8. 结构指针变量作函数参数</h3><p>将一个结构体变量的值传递给另一个函数，有3个方法:</p>
<p>（1）用结构体变量的成员作参数</p>
<p>（2）用结构体变量作实参</p>
<p>（3）用指向结构体变量（或数组）的指针作实参，将结构体变量（或数组）的地址传给形参</p>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//用结构体变量作函数参数</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">struct</span> student
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> num<span class="token punctuation">;</span>
      <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或者char name[20];搭配下面第二种</span>
      <span class="token keyword">float</span> score<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span> <span class="token keyword">struct</span> student stu <span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tnum     : %d\n"</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tname    : %s\n"</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tscore_1 : %5.2f\n"</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span>score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">struct</span> student stu<span class="token punctuation">;</span>
      stu<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
      stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Fishc.com!"</span><span class="token punctuation">;</span>
      stu<span class="token punctuation">.</span>score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">98.5</span><span class="token punctuation">;</span>
      <span class="token function">print</span><span class="token punctuation">(</span> stu <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//用结构体变量作实参</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span> <span class="token keyword">struct</span> student <span class="token operator">*</span>p <span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tnum     : %d\n"</span><span class="token punctuation">,</span> p <span class="token operator">-></span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tname    : %s\n"</span><span class="token punctuation">,</span> p <span class="token operator">-></span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tscore_1 : %5.2f\n"</span><span class="token punctuation">,</span> p <span class="token operator">-></span> score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token function">print</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>stu <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="9-动态存储分配（重点）"><a href="#9-动态存储分配（重点）" class="headerlink" title="9.动态存储分配（重点）"></a>9.动态存储分配（重点）</h3><p>#include&lt;stdlib.h&gt;</p>
<blockquote>
<ol>
<li><p>分配内存空间函数 malloc、calloc</p>
</li>
<li><p>修改已经分配内存函数realloc</p>
</li>
<li><p>释放内存空间函数 free</p>
</li>
</ol>
</blockquote>
<h4 id="malloc函数"><a href="#malloc函数" class="headerlink" title="malloc函数"></a>malloc函数</h4><p>void *malloc(unsigned int size);</p>
<p>其作用是在内存的动态存储区中分配一个长度为size的连续空间（size是一个无符号数）。</p>
<p>此函数的返回值是一个指向分配域起始地址的指针（类型为void）。</p>
<p>失败则返回空指针(NULL)。</p>
<p><code>int* a = (int *)malloc(5*sizeof(int));</code></p>
<h4 id="calloc函数"><a href="#calloc函数" class="headerlink" title="calloc函数"></a>calloc函数</h4><p>void *calloc（unsigned n, unsigned size）;</p>
<p>其作用是在内存的动态存储区中分配ｎ个长度为size的连续空间。</p>
<p>函数返回一个指向分配域起始地址的指针；</p>
<p>如果分配不成功，返回NULL。</p>
<p><code>int* p=(int*)calloc(10,sizeof(int));</code></p>
<h4 id="realloc函数"><a href="#realloc函数" class="headerlink" title="realloc函数"></a>realloc函数</h4><p>void* realloc(void* ptr,size_t size)</p>
<p>修改已经分配的内存块大小。</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">*</span> p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">20</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回指向新分配内存的指针</span>
</code></pre>
<h4 id="free函数"><a href="#free函数" class="headerlink" title="free函数"></a>free函数</h4><p>函数原型为void free（void *p）;</p>
<p>其作用是释放由p指向的内存区，使这部分内存区能被其他变量使用。</p>
<p>p是最近一次调用calloc或malloc函数时返回的值。</p>
<p>free函数无返回值。</p>
<h3 id="10-typedef"><a href="#10-typedef" class="headerlink" title="10 . typedef"></a>10 . typedef</h3><blockquote>
<ol>
<li>typedef可以声明各种类型，但不能用来定义变量</li>
<li>#define在预编译时处理，typedef在编译时处理</li>
</ol>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//1. 给已有类型int取别名</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> INTEGER<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//2. 给结构体取别名REC1</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> REC<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> 
    <span class="token keyword">char</span> c<span class="token punctuation">;</span>  
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> REC1<span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true">//REC1是一个结构体定义</span>
     <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
     REC1 data1<span class="token punctuation">;</span>
     data1<span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">;</span>
 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//3. 声明NUM为整型数组类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> NUM<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
     NUM num<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//声明STRING为字符指针类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">char</span><span class="token operator">*</span> STRING<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
     STRING p<span class="token punctuation">;</span>
     p<span class="token operator">=</span><span class="token string">"i love fishc.com"</span><span class="token punctuation">;</span>
     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//声明POINTER为指向函数的指针类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>POINTER<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i love fishc.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    POINTER p1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//void (*p1)();</span>
    p1<span class="token operator">=</span>fun<span class="token punctuation">;</span>
    <span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="11-链表（重点）"><a href="#11-链表（重点）" class="headerlink" title="11. 链表（重点）"></a>11. 链表（重点）</h3><p>链表是一种常见的重要的数据结构,是动态地进行存储分配的一种结构。</p>
<p>链表的组成：</p>
<p>头指针：存放一个地址，该地址指向第一个结点。</p>
<p>结点：一个指向结构体变量(包含数据域和指针域)的指针。</p>
<p>在数据结构中会详细介绍各种链表，这里只以单链表为例。</p>
<h4 id="1-单链表创建和打印"><a href="#1-单链表创建和打印" class="headerlink" title="1. 单链表创建和打印"></a>1. 单链表创建和打印</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> listnode<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结构体取别名LN</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据域</span>
    <span class="token keyword">struct</span> listnode <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针域</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>LN<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//创建头节点</span>
    LN<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    LN<span class="token operator">*</span> n1 <span class="token operator">=</span> <span class="token punctuation">(</span>LN<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建第一个节点</span>
    n1<span class="token operator">-></span>val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    n1<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    head <span class="token operator">=</span> n1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//头节点目前相当于n1</span>

    LN<span class="token operator">*</span> n2 <span class="token operator">=</span> <span class="token punctuation">(</span>LN<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建第2个节点</span>
    n2<span class="token operator">-></span>val <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    n2<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    n1<span class="token operator">-></span>next <span class="token operator">=</span> n2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n1->next指向n2地址</span>

    <span class="token comment" spellcheck="true">//打印链表的值</span>
    LN<span class="token operator">*</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//current相当于n1</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> current<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        current <span class="token operator">=</span> current<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指向下一个结点</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//释放内存</span>
    current <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        LN<span class="token operator">*</span> temp <span class="token operator">=</span> current<span class="token operator">-></span>next<span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
        current <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="2-单链表的前插-头插"><a href="#2-单链表的前插-头插" class="headerlink" title="2. 单链表的前插(头插)"></a>2. 单链表的前插(头插)</h4><p>链表L在值为i的第一个结点前插入一个值为j的结点</p>
<pre class=" language-c"><code class="language-c">LN<span class="token operator">*</span> <span class="token function">preInsert</span><span class="token punctuation">(</span>LN<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    LN<span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"空链表"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单链表至少包含两个结点(包含头结点)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>val <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在头节点前插入</span>
            LN<span class="token operator">*</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>LN<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>LN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//单链表没有连续的内存块，不能重新分配(realloc)一块内存块</span>
            m<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指向旧的头结点</span>
            m<span class="token operator">-></span>val <span class="token operator">=</span> j<span class="token punctuation">;</span>
            head <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新的头结点</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token operator">-></span>val <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            LN<span class="token operator">*</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>LN<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            m<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新节点先连接后面</span>
            p<span class="token operator">-></span>next <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再连接前面</span>
            m<span class="token operator">-></span>val <span class="token operator">=</span> j<span class="token punctuation">;</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"找不到元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-单链表的后插-尾插"><a href="#3-单链表的后插-尾插" class="headerlink" title="3. 单链表的后插(尾插)"></a>3. 单链表的后插(尾插)</h4><p>链表L在值为i的第一个结点后插入一个值为j的结点</p>
<pre class=" language-c"><code class="language-c">LN<span class="token operator">*</span> <span class="token function">tailInsert</span><span class="token punctuation">(</span>LN<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    LN<span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"空链表"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单链表至少包含两个结点(包含头结点)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>p<span class="token operator">-></span>val<span class="token operator">==</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在尾结点后插入</span>
            LN<span class="token operator">*</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>LN<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token operator">-></span>next<span class="token operator">=</span>m<span class="token punctuation">;</span>
            m<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
            m<span class="token operator">-></span>val<span class="token operator">=</span>j<span class="token punctuation">;</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>val <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            LN<span class="token operator">*</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>LN<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>LN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            m<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先连后面</span>
            p<span class="token operator">-></span>next<span class="token operator">=</span>m<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再连前面</span>
            m<span class="token operator">-></span>val<span class="token operator">=</span>j<span class="token punctuation">;</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        
        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"找不到元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="4-单链表的删除"><a href="#4-单链表的删除" class="headerlink" title="4. 单链表的删除"></a>4. 单链表的删除</h4><p>删除值为i的结点，要用m保存结点，再释放内存</p>
<pre class=" language-c"><code class="language-c">LN<span class="token operator">*</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>LN<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    LN<span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"空链表"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单链表至少包含两个结点(包含头结点)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>val <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除n1，头结点指向n2</span>
            LN<span class="token operator">*</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>LN<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            m <span class="token operator">=</span> head<span class="token punctuation">;</span>
            head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token operator">-></span>val <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            LN<span class="token operator">*</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>LN<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            m <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>
            p<span class="token operator">-></span>next <span class="token operator">=</span> m<span class="token operator">-></span>next<span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"找不到元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="12-共用体"><a href="#12-共用体" class="headerlink" title="12. 共用体"></a>12. 共用体</h3><blockquote>
<p>几个不同变量共用一段内存的结构</p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token keyword">union</span> data
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>
或者
<span class="token keyword">union</span> data
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">union</span> data a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>
</code></pre>
<h3 id="13-枚举"><a href="#13-枚举" class="headerlink" title="13. 枚举"></a>13. 枚举</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span> </span>
<span class="token comment" spellcheck="true">/* 定义枚举类型 */</span>
<span class="token keyword">enum</span> DAY <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
 
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 使用基本数据类型声明变量，然后对变量赋值 */</span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>   
    x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    z <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
    
    <span class="token comment" spellcheck="true">/* 使用枚举类型声明变量，再对枚举型变量赋值 */</span>
    <span class="token keyword">enum</span> DAY yesterday<span class="token punctuation">,</span> today<span class="token punctuation">,</span> tomorrow<span class="token punctuation">;</span>  
    yesterday <span class="token operator">=</span> MON<span class="token punctuation">;</span>
    today     <span class="token operator">=</span> TUE<span class="token punctuation">;</span>
    tomorrow  <span class="token operator">=</span> WED<span class="token punctuation">;</span>
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d \n"</span><span class="token punctuation">,</span> yesterday<span class="token punctuation">,</span> today<span class="token punctuation">,</span> tomorrow<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
或者
    <span class="token comment" spellcheck="true">/* 使用枚举类型声明变量同时对枚举型变量赋初值 */</span>
    <span class="token keyword">enum</span> DAY yesterday <span class="token operator">=</span> MON<span class="token punctuation">,</span> 
             today <span class="token operator">=</span> TUE<span class="token punctuation">,</span>
             tomorrow <span class="token operator">=</span> WED<span class="token punctuation">;</span>
或者
    <span class="token comment" spellcheck="true">/* 定义枚举类型，同时声明该类型的三个变量，并赋初值。它们都为全局变量 */</span>
<span class="token keyword">enum</span> DAY
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span>WED<span class="token punctuation">,</span>THU<span class="token punctuation">,</span>FRI<span class="token punctuation">,</span>SAT<span class="token punctuation">,</span>SUN
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>yesterday <span class="token operator">=</span> MON<span class="token punctuation">,</span> today <span class="token operator">=</span> TUE<span class="token punctuation">,</span> tomorrow <span class="token operator">=</span> WED<span class="token punctuation">;</span>
</code></pre>
<h2 id="十一-文件操作"><a href="#十一-文件操作" class="headerlink" title="十一.文件操作"></a>十一.文件操作</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><blockquote>
<ol>
<li><p>“文件”是指一组相关数据的有序集合</p>
</li>
<li><p>特殊文件(标准输入输出文件或标准设备文件),普通文件(磁盘文件)</p>
</li>
<li><p>输入文件：终端键盘,输出文件：显示屏和打印机</p>
</li>
<li><p>ASCII文件(文本文件):每一个字节放一个ASCII代码</p>
<p>二进制文件:把内存中的数据按其在内存中的存储形式原样输出到磁盘上存放。</p>
</li>
<li><p>文件的读函数是从输入文件中读取信息，并存放在内存中。</p>
</li>
<li><p>不能用”r”方式打开一个并不存在的文本文件。</p>
</li>
<li><p>若执行fopen函数时发生错误，则函数的返回值是0。</p>
</li>
<li><p>fclose成功0，失败EOF(-1)</p>
</li>
<li><p>设fp是指向某个文件的指针，且已读到文件末尾，则库函数feof(fp)的返回值是非0值</p>
</li>
<li><p>若要用fopen函数打开一个新的二进制文件，该文件既要能读也要能写，则文件方式字符串应是(  “wb+”)。</p>
</li>
<li><p>若要指定打开c盘上子目录myfile下的二进制文件test.bin，在调用函数fopen时，第一个参数的正确格式是(<code>&quot;c:\\myfile\\test.bin&quot;</code>)。</p>
</li>
<li><p>设有一个名为file1C源程序，且已知命令行为：FILE1 CHINA BEIJING SHANGHAI，则可得以以下运行结果的C源程序为(  )。</p>
<p>CHINA</p>
<p>BEIJING</p>
<p>SHANGHAI</p>
</li>
</ol>
<pre class=" language-c"><code class="language-c"> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>argc<span class="token operator">--</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>                           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">++</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<pre><code>13. 下面程序段的运行结果是( a+=b,a=11,b=10  )。
                                                                                    
   char *format=&quot;%s,a=%d,b=%d\n&quot;;
</code></pre>
<p>   int a&#x3D;1,b&#x3D;10;</p>
<p>   a+&#x3D;b;</p>
<p>   printf(format,”a+&#x3D;b”,a,b);</p>
<ol start="14">
<li>以下程序有错，错误原因是(q虽然指向了具体的存储单元，但该单元中没有确定的值，所以不能执行语句<code>*p=*q</code>;  )。</li>
</ol>
<p>   main()</p>
<p>   { int *p, i; char *q, ch;</p>
<pre><code> p = &amp;i;
                                                                                    
                         q = &amp;ch;
                                                                                    
                         *p = 40;
                                                                                    
                         *p = *q;
                                                                                    
                         ......
</code></pre>
<p>   }</p>
<ol start="15">
<li>文件名不一定要包含后缀名。</li>
<li>getchar只针对标准输入流stdin，即使对stdin重定向，getchar针对的也只是stdin。f 系列（比如fwrite）的输入输出函数都是作用于所有流的</li>
</ol>
</blockquote>
<h4 id="C语言对文件的处理方法"><a href="#C语言对文件的处理方法" class="headerlink" title="C语言对文件的处理方法"></a><strong>C语言对文件的处理方法</strong></h4><blockquote>
<ol>
<li><p>缓冲文件系统：系统自动地在内存区为每一个正在使用的文件开辟一个缓冲区。用缓冲文件系统进行的输入输出又称为高级磁盘输入输出。</p>
</li>
<li><p>非缓冲文件系统：系统不自动开辟确定大小的缓冲区，而由程序为每个文件设定缓冲区。用非缓冲文件系统进行的输入输出又称为低级输入输出系统。</p>
</li>
<li><p>在UNIX系统下,用缓冲文件系统来处理文本文件，用非缓冲文件系统来处理二进制文件。</p>
<p>ANSI C 标准只采用缓冲文件系统来处理文本文件和二进制文件。</p>
</li>
</ol>
</blockquote>
<h3 id="2-文件读写详解"><a href="#2-文件读写详解" class="headerlink" title="2.文件读写详解"></a>2.文件读写详解</h3><h4 id="1-详解-1"><a href="#1-详解-1" class="headerlink" title="1. 详解"></a>1. 详解</h4><blockquote>
<p>修饰符</p>
</blockquote>
<p>t 以文本模式打开文件(默认)，可省略(w等价于wt)</p>
<p>b 以二进制模式打开文件</p>
<blockquote>
<p>模式</p>
</blockquote>
<table>
<thead>
<tr>
<th>r</th>
<th>以只读的形式打开文本文件，文件必须已存在</th>
</tr>
</thead>
<tbody><tr>
<td>w</td>
<td>以只写的形式打开文本文件(若不存在则新建，存在则清空文件内容)</td>
</tr>
<tr>
<td>a</td>
<td>以追加的形式打开文本文件(若不存在，则新建；反之，在原文件后追加)</td>
</tr>
<tr>
<td>rb</td>
<td>以二进制只读的形式打开二进制文件</td>
</tr>
<tr>
<td>wb</td>
<td>以二进制只写的形式打开二进制文件</td>
</tr>
<tr>
<td>ab</td>
<td>以二进制追加的形式打开一个文件</td>
</tr>
<tr>
<td>r+</td>
<td>以读写的形式打开文件(文件必须已存在)</td>
</tr>
<tr>
<td>w+</td>
<td>读写方式打开文件。文件不存在，则建立一个新文件。若文件存在，则删除文件内容。</td>
</tr>
<tr>
<td>a+</td>
<td>读写方式打开文件。如果文件存在，数据会被写入到文件末尾。如果文件不存在，则创建新文件。</td>
</tr>
<tr>
<td>rb+</td>
<td>以二进制读写的形式打开文件。文件必须已存在。(r+b)</td>
</tr>
<tr>
<td>wb+</td>
<td>以二进制读写的形式打开文件。文件存在则清空文件内容，不存在则创建新文件。(w+b)</td>
</tr>
<tr>
<td>ab+</td>
<td>以二进制读写的形式打开文件。文件存在，则在尾部追加数据。不存在则创建文件。</td>
</tr>
</tbody></table>
<blockquote>
<p>读写相关函数</p>
</blockquote>
<p>int num&#x3D;100,a[10];</p>
<p>FILE *fp1&#x3D;fopen(“.&#x2F;&#x2F;user.txt”,”r”);&#x2F;&#x2F;定义文件指针</p>
<p>FILE *fp2&#x3D;fopen(“.&#x2F;&#x2F;user.txt”,”rb”);&#x2F;&#x2F;二进制打开文件</p>
<p>char str[100],ch;</p>
<p>const char* str2&#x3D;”hello”;</p>
<table>
<thead>
<tr>
<th>读写相关函数</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>fopen</td>
<td>打开文件</td>
</tr>
<tr>
<td>fclose(fp);</td>
<td>删除文件</td>
</tr>
<tr>
<td>ch&#x3D;fgetc(fp);</td>
<td>读取一个字符</td>
</tr>
<tr>
<td>fgets(str,sizeof(str),fp);</td>
<td>读取一行字符串</td>
</tr>
<tr>
<td>fputc(ch,fp);</td>
<td>向文件写入一个字符</td>
</tr>
<tr>
<td>fputs(str2,fp);</td>
<td>向文件写入一个字符串</td>
</tr>
<tr>
<td>fscanf(fp,”%d”,&amp;num);</td>
<td>格式化读取数据</td>
</tr>
<tr>
<td>fprintf(fp,”it is %d”,num);</td>
<td>向文件格式化输出数据</td>
</tr>
<tr>
<td>fread(a,sizeof(int),10,fp);</td>
<td>(重要)二进制读取10个大小为sizeof(int)的元素</td>
</tr>
<tr>
<td>fwrite(a,sizeof(int),10,fp);</td>
<td>(重要)二进制写入</td>
</tr>
<tr>
<td>num&#x3D;getw(fp);</td>
<td>二进制读取一个整数</td>
</tr>
<tr>
<td>putw(num,fp);</td>
<td>二进制写入一个整数</td>
</tr>
</tbody></table>
<blockquote>
<p>文件内部指针相关函数</p>
</blockquote>
<p><strong>起始点</strong></p>
<p>文件开头      SEEK_SET   0</p>
<p>文件当前位置   SEEK_CUR   1</p>
<p>文件末尾      SEEK_END   2</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>long offset&#x3D;ftell(fp);</td>
<td>得到流式文件中的<strong>当前位置</strong>。</td>
<td>成功返回当前文件位置指针相对于文件起始位置的偏移量。错误返回-1。</td>
</tr>
<tr>
<td>fseek(fp,100L,0);</td>
<td>改变文件内部位置指针，fseek(文件指针，偏移量，起始点)</td>
<td>成功0，失败非0。</td>
</tr>
<tr>
<td>feof(fp)</td>
<td>判断是否到达文件结尾</td>
<td>达到文件末尾，返回非0，否则返回0</td>
</tr>
<tr>
<td>rewind(fp);</td>
<td>将文件位置指针重新设置到文件起始位置</td>
<td>无</td>
</tr>
<tr>
<td>ferror(fp)</td>
<td>检查文件流错误标志是否被设置</td>
<td>如果被设置，返回非0，否则返回0</td>
</tr>
<tr>
<td>clearerr(fp);</td>
<td>清除文件错误标志和文件结束标志(并不会把指针重置到文件开头)</td>
<td>无</td>
</tr>
</tbody></table>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">".//test1.txt"</span><span class="token punctuation">,</span> <span class="token string">"a+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"num:%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rewind</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件指针重新指向开头，fseek(fp,0,0);</span>
    <span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一般读取一行</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="2-流的概念"><a href="#2-流的概念" class="headerlink" title="2. 流的概念"></a>2. 流的概念</h4><p><a href="https://blog.csdn.net/weixin_50502862/article/details/119715195"> 【维生素C语言】第十六章 - 文件操作（上）_柠檬叶子C的博客-CSDN博客</a></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote>
<p>应注意文件指针和文件内部的位置指针不是一回事。<br>文件指针是指向整个文件的，须在程序中定义说明，只要不重新赋值，文件指针的值是不变的。<br>文件内部的位置指针用以指示文件内部的当前读写位置，<strong>每读写一次，该指针均向后移动</strong>，它不需在程序中定义说明，而是由系统自动设置的。</p>
</blockquote>
<h3 id="3-刷题"><a href="#3-刷题" class="headerlink" title="3. 刷题"></a>3. 刷题</h3><h4 id="1-查询"><a href="#1-查询" class="headerlink" title="1. 查询"></a>1. 查询</h4><pre class=" language-c"><code class="language-c">数据
xuebi<span class="token punctuation">,</span>da<span class="token punctuation">,</span><span class="token number">345</span><span class="token punctuation">,</span><span class="token number">6.00</span>  <span class="token comment" spellcheck="true">//雪碧，规格，数量，单价</span>
xianchengduo<span class="token punctuation">,</span>zhong<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4.00</span> <span class="token comment" spellcheck="true">//鲜橙多</span>
xuebi<span class="token punctuation">,</span>xiao<span class="token punctuation">,</span><span class="token number">4567</span><span class="token punctuation">,</span><span class="token number">2.00</span>
xuebi<span class="token punctuation">,</span>da<span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token number">6.00</span>
解题代码
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">struct</span> good
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> type<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> number<span class="token punctuation">;</span>
    <span class="token keyword">float</span> price<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用结构体接收二进制文件</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> flag<span class="token punctuation">;</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> good goods<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结构体类型的数组</span>
    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>
    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"sp.dat"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//二进制读取</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//到文件尾结束</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> good<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1的意思是1个sizeof()大小</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> i<span class="token punctuation">;</span>
    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input shang pin pin ming:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//商品名</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Output:\ncha zhao qing kuang:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  
        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s,%s,%d,%.2f\n"</span><span class="token punctuation">,</span> goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span>
                goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token punctuation">,</span> goods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"mei you shang pin %s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="2-读取"><a href="#2-读取" class="headerlink" title="2. 读取"></a>2. 读取</h4><pre class=" language-c"><code class="language-c">数据
lb8103a<span class="token punctuation">.</span>txt
abcdefghijklmnopqrstuvwxyz
lb8103b<span class="token punctuation">.</span>txt
zyxwvutsrqponmlkjihgfedcba
解题代码
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"C:\\Users\\21609\\Desktop\\Cprogramm\\"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input filename:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入文件名</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input n:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取多少个</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcat</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a拼接到str末尾</span>
    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Output:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Open Error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    ch<span class="token operator">=</span><span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ch<span class="token operator">=</span><span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="十二-位运算"><a href="#十二-位运算" class="headerlink" title="十二.位运算"></a>十二.位运算</h2><h3 id="2-概念"><a href="#2-概念" class="headerlink" title="2. 概念"></a>2. 概念</h3><h3 id="1-进制转换"><a href="#1-进制转换" class="headerlink" title="1. 进制转换"></a>1. 进制转换</h3><h4 id="1-二进制转换为10进制："><a href="#1-二进制转换为10进制：" class="headerlink" title="1. 二进制转换为10进制："></a>1. 二进制转换为10进制：</h4><p>按权展开，然后求和，就可把二进制数转换成十进制数。例如：</p>
<p>$$<br>(101.1)<em>2＝1×2^2+0×2^1+1×2^0+1×2^{-1}＝( 5.5 )</em>{10}<br>$$</p>
<h4 id="2-十进制转二进制"><a href="#2-十进制转二进制" class="headerlink" title="2. 十进制转二进制"></a>2. 十进制转二进制</h4><p>十进制数有整数和小数两部分。</p>
<p>  在转换时，整数部分采用除2取余法</p>
<pre><code>   小数部分采用乘2取整法
</code></pre>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/10/05/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/_570583787__8c274efe1ab3c36d764f293efbda4042_-494054779_IMG_20230923_153749_edit_37635769022568_0_xg_0.jpg" class="lozad post-image"src="/2023/10/05/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/_570583787__8c274efe1ab3c36d764f293efbda4042_-494054779_IMG_20230923_153749_edit_37635769022568_0_xg_0.jpg"></p>
<img src="/2023/10/05/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Users\21609\blog\source\_posts\C语言基础.assets\_332367858__1341c897c84f8a3c1d3c3d4291dc53c3_1559893526_IMG_20230923_153753_edit_37625942274343_0_xg_0.jpg" alt="img" style="zoom:25%;" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/10/05/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Users\21609\blog\source\_posts\C语言基础.assets\_332367858__1341c897c84f8a3c1d3c3d4291dc53c3_1559893526_IMG_20230923_153753_edit_37625942274343_0_xg_0.jpg" class="lozad post-image">

<h4 id="3-二进制转八进制"><a href="#3-二进制转八进制" class="headerlink" title="3. 二进制转八进制"></a>3. 二进制转八进制</h4><p>三位并一位：以小数点为基准，整数部分从右到左，小数部分从左到右，每三位一组，不足三位添0补足，然后把每组的三位二进制数按权展开后相加，得到相应的一位八进制数码，再按权的顺序连接即得相应的八进制数。</p>
<p>$$<br>(1011100.00101011)_2&#x3D;(?)_8\<br>   (001,011,100.001,010,110)_2&#x3D;(134.126)_8\<br>    1  3  4 . 1  2  6<br>$$</p>
<h4 id="4-八进制转二进制"><a href="#4-八进制转二进制" class="headerlink" title="4. 八进制转二进制"></a>4. 八进制转二进制</h4><blockquote>
<p>\xxx表示3为八进制,\1011超char范围（非法）</p>
</blockquote>
<p>一位拆三位：将每一位八进制数写成对应的三位二进制数，然后按权连接即可。<br>$$<br>1   2   3 . 6  7   (八进制)\<br>001,010,011.110111  (二进制)\<br>(123.67)_8&#x3D;(1010011.110111)_2<br>$$</p>
<h4 id="5-二进制转十六进制"><a href="#5-二进制转十六进制" class="headerlink" title="5. 二进制转十六进制"></a>5. 二进制转十六进制</h4><p>四位并一位：以小数点为基准，整数部分从右到左，小数部分从左到右，每四位一组，不足四位添0补足,然后把每组的四位二进制数按权展开后相加，得到相应的一位十六进制数码，再按权的顺序连接即得相应的十六进制数。<br>$$<br>(1011110.00011)<em>2&#x3D;(?)</em>{16}\<br>(0101,1110.0001,1000)<em>2&#x3D;(?)</em>{16}\<br>5    E .  1    8<br>$$</p>
<h4 id="6-十六进制转二进制"><a href="#6-十六进制转二进制" class="headerlink" title="6. 十六进制转二进制"></a>6. 十六进制转二进制</h4><blockquote>
<p>‘\xa’ –合法，0xa 合法，\0xa非法</p>
</blockquote>
<p>一位拆四位：把一位十六进制数写成对应的四位二进制数，然后按权连接即可。<br>$$<br>1  2  3 . E  F  (十六进制)\</p>
<p>0001,0010,0011.1110,1111 (二进制)\</p>
<p>(123.EF)_{16}&#x3D;(100100011.11101111)_2<br>$$</p>
<blockquote>
<p>指按二进制位进行运算。</p>
</blockquote>
<p>＆  按位与    ~   取反</p>
<p> |  按位或    &lt;&lt;   左移</p>
<p> ^  按位异或   &gt;&gt;   右移</p>
<p>(1)位运算符中除~以外，均为二目（元）运算符，即要求两侧各有一个运算量。</p>
<p>(2)运算量只能是整型或字符型的数据，不能为实型数据（浮点型）。</p>
<h3 id="3-按位与"><a href="#3-按位与" class="headerlink" title="3.按位与&amp;"></a>3.按位与&amp;</h3><p>含义：参加运算的两个数据，按二进制位进行“与”运算。</p>
<p>如果两个相应的二进制位都为１，则该位的结果值为１；否则为０。</p>
<p>例如：</p>
<p>０＆０＝０，０＆１＝０，</p>
<p>１＆０＝０，１＆１＝１</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/10/05/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/image-20221127130713688.png" class="lozad post-image"src="/2023/10/05/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/image-20221127130713688.png"></p>
<p>如果参加&amp;运算的是<strong>负数</strong>（如-3&amp;-5），则要</p>
<p>以补码形式表示为二进制数，然后再按位进行</p>
<p>“与”运算。</p>
<p>1111011的第二位是0</p>
<h3 id="4-按位或"><a href="#4-按位或" class="headerlink" title="4.按位或 |"></a>4.按位或 |</h3><p>两个相应的二进制位中只要有一个为１，该位的结果值为１。</p>
<p>０|０＝０，０|１＝１，</p>
<p>１|０＝１，１|１＝１</p>
<h5 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h5><p>大写写字母二进制第五位变成一1就是小写字母</p>
<p>32 100000 </p>
<p>223  1101 1111</p>
<p>255   1111 1111</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;conio.h></span></span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">char</span> ch<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>

      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个字母: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      temp <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//吃一个回车</span>

      <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span>ch<span class="token operator">></span><span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> ch<span class="token operator">&lt;</span><span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ch <span class="token operator">></span> <span class="token string">'Z'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入有误, 请重新输入一个字母: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span> ch <span class="token operator">&amp;</span> <span class="token number">32</span> <span class="token punctuation">)</span>   
      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            ch <span class="token operator">=</span> ch <span class="token operator">&amp;</span> <span class="token number">223</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使第五位为0，变大写</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span>
      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            ch <span class="token operator">=</span> ch <span class="token operator">|</span> <span class="token number">32</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使第五位为1，变小写</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      <span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="5-异或-XOR运算符"><a href="#5-异或-XOR运算符" class="headerlink" title="5. 异或(XOR运算符)^"></a>5. 异或(<code>XOR</code>运算符)<code>^</code></h3><p>若参加运算的两个二进制位同号则结果为0(假)，异号则结果为１(真)</p>
<p>即:<code>0^0=0，0^1=1，1^0=1， 1^1=0</code></p>
<h5 id="使特定位翻转"><a href="#使特定位翻转" class="headerlink" title="使特定位翻转"></a>使特定位翻转</h5><p>比如低4位翻转</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/10/05/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/image-20221127132825558.png" class="lozad post-image"src="/2023/10/05/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/image-20221127132825558.png"></p>
<h5 id="与0相-，保留原值"><a href="#与0相-，保留原值" class="headerlink" title="与0相^，保留原值"></a>与0相<code>^</code>，保留原值</h5><h5 id="交换两个值"><a href="#交换两个值" class="headerlink" title="交换两个值"></a>交换两个值</h5><pre class=" language-c"><code class="language-c">a<span class="token operator">=</span>a<span class="token operator">^</span>b<span class="token punctuation">;</span>
b<span class="token operator">=</span>b<span class="token operator">^</span>a<span class="token punctuation">;</span>
a<span class="token operator">=</span>a<span class="token operator">^</span>b<span class="token punctuation">;</span>
</code></pre>
<h3 id="6-取反运算符"><a href="#6-取反运算符" class="headerlink" title="6. 取反运算符~"></a>6. 取反运算符<code>~</code></h3><p><code>~</code>是一个单目(元)运算符<code>~</code>，用来对一个二进制数按位取反，即将0变1,将1变0.</p>
<h3 id="7-左移运算符"><a href="#7-左移运算符" class="headerlink" title="7. 左移运算符&lt;&lt;"></a>7. 左移运算符<code>&lt;&lt;</code></h3><p>左移１位相当于该数乘以２，左移２位相当于该数乘以４，<code>15&lt;&lt;2=60</code>，即乘了４。但此结论只适用于该数左移时被溢出舍弃的高位中不包含１的情况。若高位左移后溢出，舍弃。</p>
<p><code>15&lt;&lt;2=60</code></p>
<h3 id="8-右移运算符"><a href="#8-右移运算符" class="headerlink" title="8. 右移运算符&gt;&gt;"></a>8. 右移运算符<code>&gt;&gt;</code></h3><p>右移运算符是a&gt;&gt;2表示将a的各二进制位右移2位，移到右端的低位被舍弃,对无符号数,高位补0。</p>
<p><strong>右移一位相当于除以2</strong></p>
<p> <strong>右移n位相当于除以2^n</strong></p>
<p>对无符号数,右移时左边高位移入0;</p>
<p>对于有符号的值(比如-2),如果原来符号位为0(该数为正),则左边也是移入0。</p>
<p>如果符号位原来为1(即负数), 则左边移入0还是1,要取决于所用的计算机系统。有的系统移入0,有的系统移入1。</p>
<p>移入0的称为“逻辑右移”, 即简单右移；移入1的称为“算术右移”。</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无符号数逻辑右移</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//127</span>
<span class="token keyword">char</span> a<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//有符号数算数右移</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1</span>
</code></pre>
<h3 id="9-位运算赋值运算符"><a href="#9-位运算赋值运算符" class="headerlink" title="9.位运算赋值运算符"></a>9.位运算赋值运算符</h3><p>例如: &amp;&#x3D;, |&#x3D;, &gt;&gt;&#x3D;, &lt;&lt;&#x3D;, ∧&#x3D;</p>
<p>a &amp; &#x3D; b 相当于 a &#x3D; a &amp; b</p>
<h5 id="例题1-取指定位"><a href="#例题1-取指定位" class="headerlink" title="例题1(取指定位)"></a>例题1(取指定位)</h5><blockquote>
<p>取一个char a从右端开始的2～5位</p>
<p>1.a&gt;&gt;2</p>
<p>2.设置一个低4位全为1，其余全为0的数。<del>(</del>0&lt;&lt;4)</p>
<p>3.对上面1. 2.做&amp;运算</p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">char</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入待检验数字: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
      b <span class="token operator">=</span> a<span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0000 0101</span>
      c <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0000 1111</span>
      d <span class="token operator">=</span> b <span class="token operator">&amp;</span> c<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0000 0101</span>

      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//输入23输出5</span>
<span class="token comment" spellcheck="true">//23  0001 0111</span>
<span class="token comment" spellcheck="true">//5  0101</span>
</code></pre>
<h5 id="例题2（循环移位）"><a href="#例题2（循环移位）" class="headerlink" title="例题2（循环移位）"></a>例题2（循环移位）</h5><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/10/05/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/image-20221127161907660.png" class="lozad post-image"src="/2023/10/05/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/image-20221127161907660.png"></p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>
      <span class="token keyword">int</span> n<span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入需要实现循环右移的数字: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入需要实现循环右移的位数: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
      b<span class="token operator">=</span>a<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sizeof返回字节数，*8表示二进制位</span>
      c<span class="token operator">=</span>a<span class="token operator">>></span>n<span class="token punctuation">;</span>
      c<span class="token operator">=</span>c<span class="token operator">|</span>b<span class="token punctuation">;</span>
      <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里F9加断点然后F5运行</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//一般要调试才能看到c的值</span>
</code></pre>
<h3 id="10-位段"><a href="#10-位段" class="headerlink" title="10. 位段"></a>10. 位段</h3><blockquote>
<p>有时存储信息不必用一个或者多个字节。</p>
<p>C语言允许在一个结构体中以位为单位来指定其成员所占内存长度，这种以位为单位的成员称为“位段”或称“位域” ( bit field) 。利用位段能够用较少的位数存储数据。 </p>
</blockquote>
<pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> packed<span class="token operator">-</span>data<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> b<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> c<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> d<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//data一共存放了6个字节</span>
    （<span class="token number">1</span>）位段成员的类型必须指定为<span class="token keyword">unsigned</span>或<span class="token keyword">int</span>类型。
    （<span class="token number">2</span>） 若某一位段要从另一个字开始存放，可用以下形式定义：
<span class="token keyword">unsigned</span>   a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span>　b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一个存储单元       </span>
<span class="token keyword">unsigned</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span>　c<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//另一存储单元　</span>
<span class="token comment" spellcheck="true">/*a、b、c应连续存放在一个存储单元中，由于用了长度为０的位段，其作用是使下一个位段从下一个存储单元开始存放。因此，只将a、b存储在一个存储单元中，c另存在下一个单元(“存储单元”可能是一个字节，也可能是2个字节，视不同的编译系统而异)。*/</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 一个位段必须存储在同一存储单元中，不能跨两个单元。如果第一个单元空间不能容纳下一个位段，则该空间不用，而从下一个单元起存放该位段。
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 可以定义无名位段。
<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> 位段的长度不能大于存储单元的长度，也不能定义位段数组。
<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> 位段可以用整型格式符输出。
<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> 位段可以在数值表达式中引用，它会被系统自动地转换成整型数。
</code></pre>
]]></content>
      <categories>
        <category>大一</category>
      </categories>
  </entry>
  <entry>
    <title>数据库原理mysql版</title>
    <url>/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/</url>
    <content><![CDATA[<h1 id="数据库原理"><a href="#数据库原理" class="headerlink" title="数据库原理"></a>数据库原理</h1><p>By：jkloli</p>
<p>参考资料：</p>
<p><a href="https://github.com/Buildings-Lei/mysql_note/blob/main/README.md">mysql_note&#x2F;README.md at main · Buildings-Lei&#x2F;mysql_note · GitHub</a></p>
<p><a href="https://dhc.pythonanywhere.com/article/public/1/#h4-u6743u9650u63A7u5236">MySQL - 智云知识 (dhc.pythonanywhere.com)</a></p>
<p><a href="http://t.csdn.cn/jM0hE">http://t.csdn.cn/jM0hE</a>  CiCi喜之郎</p>
<p><a href="http://t.csdn.cn/XolDf">http://t.csdn.cn/XolDf</a> 粉红色的Pig</p>
<p>…</p>
<h2 id="0-问题解决"><a href="#0-问题解决" class="headerlink" title="0. 问题解决"></a>0. 问题解决</h2><ol>
<li><p>mysql命令行不要忘了<code>;</code></p>
</li>
<li><p>mysql命令行注释<code>-- </code></p>
</li>
<li><p>zerofill要在not null前面</p>
</li>
<li><p>mysql中&#96;&#96;用于引用数据库对象，防止歧义。’’用于引用字符串对象。</p>
</li>
<li><p>‘’空串不是null</p>
</li>
<li><p>给字符类型赋值，右侧一定要打双引号或单引号</p>
</li>
<li><p>同一个数据库中表名不能重复。</p>
</li>
<li><p>条件判断时逻辑判断</p>
</li>
</ol>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 不等于其中一个就行</span>
<span class="token keyword">select</span> sno <span class="token keyword">from</span> s <span class="token keyword">where</span>  s<span class="token punctuation">.</span>sno<span class="token operator">!=</span><span class="token keyword">any</span><span class="token punctuation">(</span><span class="token keyword">select</span> sc<span class="token punctuation">.</span>sno  <span class="token keyword">from</span> sc<span class="token punctuation">)</span>  <span class="token keyword">order</span> <span class="token keyword">by</span> sno <span class="token keyword">asc</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 不等于任何一个</span>
<span class="token keyword">select</span> sno <span class="token keyword">from</span> s <span class="token keyword">where</span>  s<span class="token punctuation">.</span>sno<span class="token operator">!=</span><span class="token keyword">all</span><span class="token punctuation">(</span><span class="token keyword">select</span> sc<span class="token punctuation">.</span>sno  <span class="token keyword">from</span> sc<span class="token punctuation">)</span>  <span class="token keyword">order</span> <span class="token keyword">by</span> sno <span class="token keyword">asc</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> sno <span class="token keyword">from</span> s <span class="token keyword">where</span> <span class="token operator">not</span> s<span class="token punctuation">.</span>sno<span class="token operator">=</span><span class="token keyword">any</span><span class="token punctuation">(</span><span class="token keyword">select</span> sc<span class="token punctuation">.</span>sno  <span class="token keyword">from</span> sc<span class="token punctuation">)</span>  <span class="token keyword">order</span> <span class="token keyword">by</span> sno <span class="token keyword">asc</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> sno <span class="token keyword">from</span> s <span class="token keyword">where</span>  s<span class="token punctuation">.</span>sno <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> sc<span class="token punctuation">.</span>sno  <span class="token keyword">from</span> sc<span class="token punctuation">)</span>  <span class="token keyword">order</span> <span class="token keyword">by</span> sno <span class="token keyword">asc</span><span class="token punctuation">;</span>
</code></pre>
<ol start="9">
<li>mysql数据库备份记得用cmd，而不是power shell</li>
<li>cmd记得chcp 65001，防止中文字符串乱码</li>
</ol>
<h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h2><p>0 系统是win11</p>
<p>1 先安装navicat，mysql。(知乎，csdn教程)</p>
<p>2 配置用户和系统环境变量（mysql.exe路径），直接置顶</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230913105834716.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230913105834716.png"></p>
<p>3 windows以管理员方式开终端</p>
<pre class=" language-bash"><code class="language-bash">net stop MySQL80 
<span class="token comment" spellcheck="true">#停止服务</span>
net start MySQL80 
<span class="token comment" spellcheck="true">#开启服务</span>
chcp 65001 
<span class="token comment" spellcheck="true">#临时改命令行编码为utf-8</span>
mysql -h <span class="token string">"127.0.0.1"</span> -uroot -p  
<span class="token comment" spellcheck="true">#登录MYSQL</span>
mysql<span class="token operator">></span>ALTER USER <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'123456'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#修改用户密码为123456</span>
mysql<span class="token operator">></span> <span class="token keyword">exit</span> 
<span class="token comment" spellcheck="true">#退出mysql</span>
net stop MySQL80 
<span class="token comment" spellcheck="true">#停止服务</span>
</code></pre>
<h2 id="2-概述"><a href="#2-概述" class="headerlink" title="2. 概述"></a>2. 概述</h2><h3 id="1-一些概念"><a href="#1-一些概念" class="headerlink" title="1. 一些概念"></a>1. 一些概念</h3><h4 id="比较细碎的1"><a href="#比较细碎的1" class="headerlink" title="比较细碎的1"></a>比较细碎的1</h4><p>从数据管理角度分析，数据库的发展可以分为三个阶段：</p>
<blockquote>
<p>人工管理阶段 20世纪50年代中期之前</p>
</blockquote>
<blockquote>
<p>文件系统阶段 20世纪50年代中期到60年代中期</p>
</blockquote>
<blockquote>
<p>数据库系统阶段 20世纪60年代后期</p>
</blockquote>
<p><strong>数据</strong>(Data)：描述事物的符号记录。数据与语义是分不可开的。</p>
<p><strong>数据库</strong>(DataBase)：是长期存储在计算机内，有组织，可共享的大量数据的集合。</p>
<p>​	特点：较小的冗杂度，较高的数据独立性和多扩展性。</p>
<p><strong>数据库管理系统</strong>（DataBase Management System，DBMS）：位于用户应用与操作系统之间的一层<strong>数据管理软件</strong>。</p>
<p><strong>数据库系统</strong>（DBS）：是由数据库，数据库管理系统（及应用开发工具），应用程序和数据库管理员组成的存储，管理，处理和维护数据的系统。</p>
<p>​	特点：1. 数据结构化 2. 数据的共享性高，冗余度低且易扩充 3. 数据独立性高 4. 数据由数据库管理系统统一管理和控制。 </p>
<h4 id="信息世界基本概念"><a href="#信息世界基本概念" class="headerlink" title="信息世界基本概念"></a>信息世界基本概念</h4><p><strong>实体</strong>（行&#x2F;记录&#x2F;元组）：是客观存在并可以相互区别的事物，对应数据表中的一行“记录”。如：”张三”。</p>
<p><strong>属性</strong>（列&#x2F;字段）：是事物本身固有的性质，对应数据表中的“字段”或“列”。如：”姓名”。</p>
<p>**码(key)**：唯一标识实体的属性集。主键也叫主码。如：学生(学号(主键),姓名,班级)。</p>
<p><strong>实体型</strong>：用实体名及其属性名集来抽象和刻画同类实体。如：学生(学号,姓名)</p>
<p><strong>实体集</strong>：同一类型实体的集合。如：全体同学。</p>
<p><strong>联系</strong>：一对一，一对多，多对多。</p>
<h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><p><strong>数据模型</strong>：分为概念模型(层次模型)，逻辑模型，物理模型。</p>
<p>​	逻辑模型：按计算机系统的观点对数据建模，用于DBMS实现。</p>
<p>​    物理模型：描述数据在系统内(磁盘上)的表达方式和存储方式。</p>
<p><strong>数据模型的组成要素</strong>：数据结构，数据操作，数据的完整性约束条件。</p>
<p><strong>数据独立性</strong>：物理独立性，逻辑独立性。</p>
<p>​	物理独立性：用户的应用程序与数据库中数据的物理存储是独立的。比如内模式。</p>
<p>​	逻辑独立性：用户的应用程序与数据库的逻辑结构是相互独立的。比如外模式。</p>
<p><strong>第一代数据模型</strong>：层次模型(树状结构)，网状模型(网状)</p>
<p><strong>第二代数据模型</strong>：关系模型</p>
<h4 id="比较细碎的2"><a href="#比较细碎的2" class="headerlink" title="比较细碎的2"></a>比较细碎的2</h4><p><strong>关系模型</strong>：建立在集合代数基础上的数据模型。</p>
<p>​	术语：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>关系名(表名)</td>
<td>关系模式(表头)</td>
<td>关系(二维表)</td>
</tr>
<tr>
<td>元组(记录&#x2F;行)</td>
<td>属性(列)</td>
<td>属性名(列名)</td>
</tr>
<tr>
<td>属性值(列值)</td>
<td>分值(一条记录中的一个列值)</td>
<td>非规范关系(表中有表)</td>
</tr>
</tbody></table>
<p><strong>关系的完整性约束条件</strong>:实体完整性，参照完整性，用户定义完整性。</p>
<p>​	实体完整性：主码非空且不重复。</p>
<p>​	参照完整性：外键不为空(或均为空值)。</p>
<p>​	用户定义完整性：用户定义的完整性约束条件。</p>
<p><strong>三级模式结构</strong>：外模式，模式，内模式。</p>
<p>​	外模式可以多个，模式和内模式只能一个。</p>
<p><strong>数据表与数据库</strong></p>
<p>数据表就是记录的集合 。</p>
<p>数据库就是数据表、数据库关系和数据库关系对象的集合。</p>
<p> 在数据库连接中，默认的数据库：</p>
<p>information_schema：提供了访问数据库元数据的方式。</p>
<p>mysql：是mysql的核心数据库。</p>
<p>performance_schema ：主要用于收集数据库服务器性能参数。</p>
<p>test ： mysql创建的测试库。</p>
<p><strong>笛卡尔乘积</strong></p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/47dd808f6d084db5b45a8d1c44464742.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/47dd808f6d084db5b45a8d1c44464742.png"></p>
<h3 id="2-E-R图"><a href="#2-E-R图" class="headerlink" title="2. E-R图"></a>2. E-R图</h3><p>E-R图，也称为实体关系图，用于显示实体集之间的关系。</p>
<p><strong>实体：</strong> 用矩形框表示，将实体名写在框内。</p>
<p><strong>属性：</strong> 用椭圆框表示，将属性名写在框内，用连线将实体与属性连接。</p>
<p><strong>联系：</strong> 用菱形框表示，将联系名写在框内，用连线将相关的实体连接，并在连线旁标注联系类型(一 0 对 一 “1：1”、一对多 “1：n”、多对多 “n：m”)。</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/39746484019a058d56164505ab6607a4-1696489027314-2.jpeg" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/39746484019a058d56164505ab6607a4-1696489027314-2.jpeg"></p>
<h3 id="3-数据库类型"><a href="#3-数据库类型" class="headerlink" title="3. 数据库类型"></a>3. 数据库类型</h3><p>在文件中读写数据速度相对较慢，所以现在我们使用关系型数据库管理系统（RDBMS）来存储和管理的大数据量。</p>
<p>数据库可以分为<strong>关系型数据库</strong>和<strong>非关系型数据库</strong>。</p>
<p>所谓的关系型数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。</p>
<p>RDBMS即关系数据库管理系统(Relational Database Management System)的缩写。</p>
<p>特点：</p>
<ol>
<li><p>· 数据以表格的形式出现</p>
</li>
<li><p>· 每行为各种记录名称</p>
</li>
<li><p>· 每列为记录名称所对应的数据域</p>
</li>
<li><p>· 许多的行和列组成一张表</p>
</li>
<li><p>· 若干的表组成database</p>
</li>
</ol>
<p>关系型数据库：表与表之间存在对应关系。</p>
<p>非关系型数据库：表之间不存在关系，数据独立，随便存。</p>
<h3 id="4-常见的数据库管理系统"><a href="#4-常见的数据库管理系统" class="headerlink" title="4. 常见的数据库管理系统"></a>4. 常见的数据库管理系统</h3><p>oracle:在全球范围内市场份额占据32%</p>
<p>sql server: 在我国，.net平台和sql server数据库应用也极其广泛</p>
<p>Sybase: 广泛应用于我国的大中型应用软件中</p>
<p>IBM&#x2F;DB2:在OS&#x2F;2和windows系统中应用广泛</p>
<p>mysql:简单，开源，功能强大</p>
<h3 id="5-MySQL介绍"><a href="#5-MySQL介绍" class="headerlink" title="5. MySQL介绍"></a>5. MySQL介绍</h3><p>​	MySQL是最流行的关系型数据库管理系统，在WEB应用方面MySQL是最好的RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。由瑞典MySQL AB公司开发，目前属于Oracle公司。MySQL是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p>
<ul>
<li><p>Mysql是开源的，所以你不需要支付额外的费用。</p>
</li>
<li><p>Mysql支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</p>
</li>
<li><p>MySQL使用标准的SQL数据语言形式。</p>
</li>
<li><p>Mysql可以允许于多个系统上，并且支持多种语言。这些编程语言包括C、C++、Python、Java、Perl、PHP、Eiffel、Ruby和Tcl等。</p>
</li>
<li><p>MySQL支持大型数据库，支持5000万条记录的数据仓库，32位系统表文件最大可支持4GB，64位系统支持最大的表文件为8TB。</p>
</li>
</ul>
<h3 id="6-SQL概述"><a href="#6-SQL概述" class="headerlink" title="6. SQL概述"></a>6. SQL概述</h3><p>SQL(Structured Query Language),即结构化查询语言，是高级的非过程化编程语言。SQL是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系型数据库系统。</p>
<p><strong>SQL分类</strong>：</p>
<p>数据查询语言（Data Query Language） DQL</p>
<p>数据操纵语言（Manipulation）DML</p>
<p>数据定义语言（Definition）DDL</p>
<p>数据控制语言（Control）DCL</p>
<p>实际上不同数据库系统之间的SQL<strong>不能完全相互通用</strong>。</p>
<h2 id="2-navicat基础操作"><a href="#2-navicat基础操作" class="headerlink" title="2. navicat基础操作"></a>2. navicat基础操作</h2><h3 id="1-使用navicat创建数据库"><a href="#1-使用navicat创建数据库" class="headerlink" title="1. 使用navicat创建数据库"></a>1. 使用navicat创建数据库</h3><p>1.先在命令行启动服务net start MySQL80   (一般已经启动了)</p>
<p>2.然后开navicat，连接测试，然后点确定。</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230913115338814.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230913115338814.png"></p>
<p>3.右键连接名，选新建数据库（或命令行界面）</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230913234054734.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230913234054734.png"></p>
<p>4.选阉割版的utf-8字符集，下面那个选大小写不敏感。</p>
<ul>
<li>utf8mb3 ：阉割过的 utf8 字符集，只使用1～3个字节表示字符。</li>
<li>utf8mb4 ：正宗的 utf8 字符集，使用1～4个字节表示字符。</li>
</ul>
<p><strong>在utf8mb4下，英文占1个字符，中文3个，特殊符号4个.</strong></p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230913234700537-1696489079345-5.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230913234700537-1696489079345-5.png"></p>
<h3 id="2-修改字段属性"><a href="#2-修改字段属性" class="headerlink" title="2. 修改字段属性"></a>2. 修改字段属性</h3><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/_9edbb3186f777ca2e18fb935f772814d_358742864_v2-d7f5a99c3bcd3cbdd8e6c040d8ca705c_b-1694955310018-4.jpg" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/_9edbb3186f777ca2e18fb935f772814d_358742864_v2-d7f5a99c3bcd3cbdd8e6c040d8ca705c_b-1694955310018-4.jpg"></p>
<p>右键点击需要修改的表，选择「设计表」，然后在右侧编辑字段属性</p>
<h3 id="3-添加数据"><a href="#3-添加数据" class="headerlink" title="3. 添加数据"></a>3. 添加数据</h3><p>打开表后在左下角有加号。</p>
<p>快捷键：insert添加记录，ctrl+s保存记录。</p>
<h3 id="4-查询表"><a href="#4-查询表" class="headerlink" title="4. 查询表"></a>4. 查询表</h3><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230917205904418-1696489083096-7.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230917205904418-1696489083096-7.png"></p>
<h3 id="5-备份和还原数据库"><a href="#5-备份和还原数据库" class="headerlink" title="5. 备份和还原数据库"></a>5. 备份和还原数据库</h3><ol>
<li><p><strong>选中要备份的数据库—&gt;右键—&gt;转储SQL文件—&gt;结构和数据</strong>：</p>
</li>
<li><p>成功则可以生成一个sql文件，然后在另一个空的数据库-&gt;右键</p>
</li>
</ol>
<p>-&gt;运行SQL文件。</p>
<ol start="3">
<li>数据库右键-&gt;刷新。</li>
</ol>
<h2 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3. 数据类型"></a>3. 数据类型</h2><h3 id="1-数字类型"><a href="#1-数字类型" class="headerlink" title="1. 数字类型"></a>1. 数字类型</h3><p><strong>整数类型</strong></p>
<p>二进制,有符号数,首位为1的是负数,首位为0的是正数。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>字节数</th>
<th>无符号数的取值范围</th>
<th>有符号数的取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>1</td>
<td>0~255(2^8-1)</td>
<td>- 128 ~ 127</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2</td>
<td>0~65 535</td>
<td>- 32 768 ~ 32 767</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3</td>
<td>0~16 777 215</td>
<td>- 8 388 608 ~ 8 388 607</td>
</tr>
<tr>
<td>INT</td>
<td>4</td>
<td>0~4 294 967 295</td>
<td>- 2 147 483 648 ~ 2 147 483 647</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8</td>
<td>0 ~ 18 446 744 073 709 551 615</td>
<td>- 9 223 372 036 854 775 808 ~ 9 223 372 036 854 775 807</td>
</tr>
</tbody></table>
<p><strong>浮点数</strong></p>
<p>比如：price double(5,2)可以表示-222.22</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>字节数</th>
<th>负数的取值范围</th>
<th>非负数的取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>FLOAT</td>
<td>4</td>
<td>－3.402 823 466E + 38 ～－1.175 494 351E－38</td>
<td>0 和 1.175 494 351E－38～3.402 823 466E+38</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>8</td>
<td>－1.797 693 134 862 315 7E + 308 ~ －2. 225 073 858 507 201 4E－308</td>
<td>0 和 2.225 073 858 507 201 4E－308～1.797 693 134 862 315 7E + 308</td>
</tr>
</tbody></table>
<p><strong>定点数类型</strong></p>
<p>包括decimal和numeric。</p>
<p> DECIMAL(M,D) 设置<strong>精度（总位数）和标度（小数点后位数）</strong>。</p>
<p>其中，M表示数字总位数（不包括“.”和“-”)，最大值为65，默认值为10；D最大值为30，默认值为0。</p>
<p>例如，DECIMAL(5，2) 表示的取值范围是 －999.99～999.99。</p>
<ul>
<li><p>若小数部分超出范围，会进行四舍五入，并出现 Data truncated(数据截断) 警告。</p>
</li>
<li><p>若整数部分超出范围，会报错。</p>
</li>
</ul>
<h3 id="2-事件和日期类型"><a href="#2-事件和日期类型" class="headerlink" title="2. 事件和日期类型"></a>2. 事件和日期类型</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th>取值范围</th>
<th>日期格式</th>
<th>零 值</th>
</tr>
</thead>
<tbody><tr>
<td>YEAR</td>
<td>1901 ~ 2155</td>
<td>YYYY</td>
<td>0000</td>
</tr>
<tr>
<td>DATE</td>
<td>1000-01-01 ~ 9999-12-3</td>
<td>YYYY-MM-DD</td>
<td>0000-00-00</td>
</tr>
<tr>
<td>TIME</td>
<td>－838:59:59 ~ 838:59:59</td>
<td>HH:MM:SS</td>
<td>00:00:00</td>
</tr>
<tr>
<td>DATETIME</td>
<td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>0000-00-00 00:00:00</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>1970-01-01 00:00:01 ~ 2038-01-19 03:14:07</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>0000-00-00 00:00:00</td>
</tr>
</tbody></table>
<p>如果插入的数值不合法，系统会自动将对应的零值插入数据库中。</p>
<ul>
<li><p>用1901或”1901”表示1901年</p>
</li>
<li><p>若是YY表示年，其中<code>&#39;00&#39;~&#39;69&#39;</code> 的值会被转换为<code>2000~2069</code>的值，<code>70&#39;~&#39;99&#39;</code> 的值会被转换为 <code>1970~1999</code> 的值</p>
</li>
<li><p>当使用 YEAR 类型时，一定要区分 <code>&#39;0&#39;</code> 和 <code>0</code>。因为字符串格式的 <code>&#39;0&#39;</code> 表示的 YEAR 值是 <code>2000</code>，而数字格式的 <code>0</code>表示的 YEAR 值是 <code>0000</code> 。</p>
</li>
</ul>
<h3 id="3-字符串类型"><a href="#3-字符串类型" class="headerlink" title="3. 字符串类型"></a>3. 字符串类型</h3><p><strong>文本字符串</strong></p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>类型说明</th>
<th>储存需求</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR(M)</td>
<td>固定长度字符串</td>
<td>M个字符，M区间[0,255]</td>
</tr>
<tr>
<td>VARCHAR(M)</td>
<td>可变长度字符串</td>
<td>L+1个字节。M取值与字符集有关，不超过65535字节</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>非常小的</td>
<td>L+1字节，L&lt;2^8</td>
</tr>
<tr>
<td>TEXT</td>
<td>小的非二进制字符串</td>
<td>L+2字节，L&lt;2^16</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>中等大小的</td>
<td>L+3字节，L&lt;2^24</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>非常大的</td>
<td>L+4字节，L&lt;2^32</td>
</tr>
<tr>
<td>ENUM(‘value1’,’v2’)</td>
<td>枚举类型</td>
<td>1或2个字节，取决于枚举值的个数（&lt;&#x3D;65535）</td>
</tr>
<tr>
<td>SET(‘v1’,’v2’)</td>
<td>一个集合，字符串对象可以有零个或多个集合成员</td>
<td>1,2,3,4或8个字节，取决于set成员数目(最多64)</td>
</tr>
</tbody></table>
<p>varchar</p>
<ul>
<li>varchar(10)插入超出10个会报错。</li>
<li>varchar(4)可以插入”abcd”</li>
<li>需要额外的1个或2个字节记录字符串的长度，字符串长度小于255字节使用1个字节，否则使用2个。</li>
</ul>
<p>当定义一个字段类型为 varchar(10)，插入的值为”abc”这一字符串时，那么实际存储大小为3个字节，除此之外，varchar还需要使用1个额外字节（因为‘abc’字节数＜255）来记录字符串的长度。</p>
<p>char</p>
<ul>
<li>长度不够时内部储存用空格填充。</li>
<li>name char(3)可以存放”abc”</li>
<li>char(3)超过三个字符会报错。</li>
</ul>
<p>另外</p>
<ul>
<li>在创建表时，char和varchar需要指定长度，但是text，tinytext，mediumtext，longtext数据类型不需要指定长度。</li>
</ul>
<p><strong>二进制字符串</strong></p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>说明</th>
<th>储存需求</th>
</tr>
</thead>
<tbody><tr>
<td>BIT(M)</td>
<td>位数据类型</td>
<td>(M+7)&#x2F;8字节，M区间[1,64]</td>
</tr>
<tr>
<td>BINARY(M)</td>
<td>固定长度的二进制字符串</td>
<td>M字节</td>
</tr>
<tr>
<td>VARBINARY(M)</td>
<td>可变长度的二进制字符串</td>
<td>M+1字节</td>
</tr>
<tr>
<td>TINYBLOB(M)</td>
<td>非常小的</td>
<td>L+1字节，L&lt;2^8</td>
</tr>
<tr>
<td>BLOB(M)</td>
<td>二进制大对象（Binary Large Object）</td>
<td>L+2字节，L&lt;2^16</td>
</tr>
<tr>
<td>MEDIUMBLOB(M)</td>
<td>中等大小的</td>
<td>L+3字节，L&lt;2^24</td>
</tr>
<tr>
<td>LONGBLOB(M)</td>
<td>非常大的</td>
<td>L+4字节，L&lt;2^32</td>
</tr>
</tbody></table>
<p>BLOB一般用来存图片。</p>
<h3 id="4-JSON数据类型"><a href="#4-JSON数据类型" class="headerlink" title="4. JSON数据类型"></a>4. JSON数据类型</h3><p>略。</p>
<h2 id="4-SQL分类详解"><a href="#4-SQL分类详解" class="headerlink" title="4. SQL分类详解"></a>4. SQL分类详解</h2><h3 id="1-DDL-数据定义语言"><a href="#1-DDL-数据定义语言" class="headerlink" title="1. DDL 数据定义语言"></a>1. DDL 数据定义语言</h3><h4 id="1-数据库操作"><a href="#1-数据库操作" class="headerlink" title="1. 数据库操作"></a>1. 数据库操作</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#查看数据库</span>
mysql<span class="token operator">></span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#创建数据库db1</span>
<span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token number">db1</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#创建数据库并设置编码格式</span>
<span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token number">db9</span> <span class="token keyword">character set</span> gb2312<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#删除数据库db1</span>
<span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token number">db1</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/*使用名为mysql数据库*/</span>
<span class="token keyword">use</span> mysql<span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 显示当前所使用的数据库</span>
<span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">database</span> 数据库名<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">-- 查看这个数据库的建库语句；</span>
</code></pre>
<h4 id="2-表操作（重要）"><a href="#2-表操作（重要）" class="headerlink" title="2. 表操作（重要）"></a>2. 表操作（重要）</h4><p>注意：</p>
<ol>
<li>创建表名不超过64字符，不重名(mysql表名不区分大小写)。</li>
<li>表名为mysql关键字时需要用反引号，比如<code>create</code></li>
<li>同一表中不能有重名字段。</li>
</ol>
<p><strong>显示当前数据库内所有的表名</strong><br><code>show tables;</code></p>
<p><strong>查看建表语句</strong><br><code>show create table 表名;</code></p>
<p><strong>查看user数据表的结构（主要看类型）</strong><br><code>desc user;</code></p>
<p><strong>创建新表</strong></p>
<p><code>create table 表名( </code></p>
<p><code>字段名 类型(长度),</code></p>
<p><code>字段名 类型(长度)</code></p>
<p><code>);</code></p>
<p><strong>添加字段：</strong><br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code></p>
<p><strong>修改数据类型：</strong><br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br><strong>修改字段名和字段类型：</strong><br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code></p>
<p><strong>删除字段：</strong><br><code>ALTER TABLE 表名 DROP 字段名;</code></p>
<p><strong>修改表名：</strong><br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p>
<p><strong>删除表：</strong><br><code>DROP TABLE [IF EXISTS] 表名;</code><br><strong>删除表，并重新创建该表：</strong><br><code>TRUNCATE TABLE 表名;</code></p>
<p><strong>实际操作</strong></p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230914160230142-1696489095723-9.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230914160230142-1696489095723-9.png"></p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建新表</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> teacher<span class="token punctuation">(</span>
id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">"编号"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 编号 类型 主键 自增 注释表名 注释</span>
name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 不重复</span>
age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> zerofill <span class="token operator">not</span> <span class="token boolean">null</span>  <span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 宽度不够则左侧补0,非空</span>
classId <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> unsigned <span class="token keyword">default</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">-- 这里不要打逗号，默认1</span>
<span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span><span class="token punctuation">,</span><span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
<span class="token keyword">drop</span> <span class="token keyword">table</span> teacher<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 删除新表</span>
</code></pre>
<p>int(3)表示最大宽度（显示宽度）为3，比如666，-666。</p>
<ul>
<li><p>若数值的位数小于显示宽度，会填充空格，若大于显示宽度，则不影响显示结果。</p>
</li>
<li><p>设置零填充后，字段自动设为无符号类型，这是因为负数不能使用负填充。</p>
</li>
<li><p>zerofill要在not null前面</p>
</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> test2 <span class="token keyword">add</span> id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> test2 <span class="token keyword">modify</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> test2 change id age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> test2 <span class="token keyword">drop</span> age<span class="token punctuation">;</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> test2 <span class="token keyword">rename</span> <span class="token keyword">to</span> test3<span class="token punctuation">;</span>
<span class="token keyword">truncate</span> <span class="token keyword">table</span> test3<span class="token punctuation">;</span>
<span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> test3<span class="token punctuation">;</span>
</code></pre>
<ul>
<li>注意如果已经存了char数据，修改成int参数类型会报错。</li>
<li>int类型储存的int数据可以转换成char类型。</li>
</ul>
<h3 id="2-DML（数据操作语言）"><a href="#2-DML（数据操作语言）" class="headerlink" title="2. DML（数据操作语言）"></a>2. DML（数据操作语言）</h3><h4 id="1-添加数据-insert"><a href="#1-添加数据-insert" class="headerlink" title="1. 添加数据 insert"></a>1. 添加数据 insert</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p>
<p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p>
<h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>字符串和日期类型数据应该包含在引号中</li>
<li>插入的数据大小应该在字段的规定范围内</li>
</ul>
<h4 id="2-更新和删除数据update-delete"><a href="#2-更新和删除数据update-delete" class="headerlink" title="2. 更新和删除数据update,delete"></a>2. 更新和删除数据update,delete</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code></p>
<p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> teacher <span class="token keyword">value</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"gg"</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> teacher <span class="token keyword">value</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"bfb"</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> teacher <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">update</span> teacher <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'mom'</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 给字符类型赋值，右侧一定要打双引号或单引号。</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher<span class="token punctuation">;</span>
</code></pre>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230916212109419-1696489101106-11.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230916212109419-1696489101106-11.png"></p>
<h3 id="3-DQL（数据查询语言）"><a href="#3-DQL（数据查询语言）" class="headerlink" title="3. DQL（数据查询语言）"></a>3. DQL（数据查询语言）</h3><p>关键字书写顺序</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表
<span class="token keyword">FROM</span> 表名字段
<span class="token keyword">WHERE</span> 条件列表
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 分组字段列表
<span class="token keyword">HAVING</span> 分组后的条件列表
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 排序字段列表
<span class="token keyword">LIMIT</span> 分页参数
</code></pre>
<p>关键字执行顺序</p>
<p>FROM&gt; WHERE &gt; GROUP BY &gt;having&gt; SELECT &gt; ORDER BY &gt;limit</p>
<h4 id="1-基础查询-select"><a href="#1-基础查询-select" class="headerlink" title="1. 基础查询 select"></a>1. 基础查询 select</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p>
<p>设置别名：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">as</span> <span class="token string">'名字'</span> <span class="token keyword">from</span> teacher<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 名字是别名</span>
<span class="token keyword">select</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span>  <span class="token string">'名字'</span> <span class="token keyword">from</span> teacher<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 只改变显示，不改字段名</span>
</code></pre>
<p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p>
<p>转义：</p>
<p><code>SELECT * FROM 表名 WHERE name LIKE &#39;\_张三&#39; ESCAPE &#39;\&#39;</code><br>\ 之后的_不作为通配符</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> age <span class="token keyword">from</span> teacher<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 可以匹配_xx</span>
<span class="token keyword">select</span> name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'\_%'</span> <span class="token punctuation">;</span>
</code></pre>
<h4 id="2-条件查询-where"><a href="#2-条件查询-where" class="headerlink" title="2. 条件查询 where"></a>2. 条件查询 where</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p>
<p>条件：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token operator">></span> <span class="token operator">>=</span> <span class="token operator">&lt;</span> <span class="token operator">&lt;=</span> <span class="token operator">=</span> 
<span class="token operator">&lt;></span>或<span class="token operator">!=</span>
<span class="token operator">between</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">and</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">-- 比如between 10 and 20,在[10,20]区间内</span>
<span class="token operator">in</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- 多选一,比如in(20,35,40)</span>
<span class="token operator">like</span> 占位符 <span class="token comment" spellcheck="true">-- 模糊匹配</span>
<span class="token operator">is</span> <span class="token boolean">null</span> <span class="token comment" spellcheck="true">-- 是空</span>
<span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token comment" spellcheck="true">-- 非空</span>
<span class="token operator">&amp;&amp;</span> 或 <span class="token operator">and</span> <span class="token comment" spellcheck="true">-- 且</span>
<span class="token operator">||</span> 或 <span class="token operator">or</span> <span class="token comment" spellcheck="true">-- 或</span>
<span class="token operator">!</span> 或 <span class="token operator">not</span> <span class="token comment" spellcheck="true">-- 非</span>
</code></pre>
<p>mysql常用通配符</p>
<ul>
<li><p>%表示任何字符出现任意次数（包括0次）</p>
</li>
<li><p>_表示匹配一个字符。</p>
</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 可以匹配abc,ABC(忽略大小写)</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> test1 <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%B%'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 可以匹配ABC(加了binary不忽略大小写)</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> test1 <span class="token keyword">where</span> <span class="token keyword">binary</span> name <span class="token operator">like</span> <span class="token string">'%B%'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 不匹配a</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> test1 <span class="token keyword">where</span> <span class="token keyword">binary</span> name <span class="token operator">like</span> <span class="token string">'a_'</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-聚合查询count-avg…"><a href="#3-聚合查询count-avg…" class="headerlink" title="3. 聚合查询count,avg…"></a>3. 聚合查询count,avg…</h4><p>常见聚合函数：</p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">count()</td>
<td align="left">统计数量</td>
</tr>
<tr>
<td align="left">max()</td>
<td align="left">最大值</td>
</tr>
<tr>
<td align="left">min()</td>
<td align="left">最小值</td>
</tr>
<tr>
<td align="left">avg()</td>
<td align="left">平均值</td>
</tr>
<tr>
<td align="left">sum()</td>
<td align="left">求和</td>
</tr>
</tbody></table>
<p>例：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>id <span class="token keyword">from</span> test1 <span class="token keyword">where</span> age <span class="token operator">between</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">5</span> <span class="token keyword">having</span> id<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- count(*)id等价于count(id)</span>
</code></pre>
<h4 id="4-分组查询group-by"><a href="#4-分组查询group-by" class="headerlink" title="4. 分组查询group by"></a>4. 分组查询group by</h4><p>相关函数：avg平均,count计数,sum总和,max最大,min最小</p>
<p>group by分组之后可能出现一个单元格有多个值并报错。比如分组后name为aa的一行中，id同时有1和2。一般需要用聚合函数或group_concat解决。</p>
<p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p>
<p>例如： </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">from</span> test1 <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">;</span>
</code></pre>
<p>where 和 having 的区别：</p>
<ul>
<li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li>
<li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> s<span class="token punctuation">.</span>sno <span class="token keyword">as</span> <span class="token string">"学号"</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span>sn <span class="token keyword">as</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"平均成绩"</span> <span class="token keyword">from</span> s<span class="token punctuation">,</span>sc<span class="token punctuation">,</span><span class="token number">c</span>  <span class="token keyword">where</span>  sc<span class="token punctuation">.</span>sno<span class="token operator">=</span>s<span class="token punctuation">.</span>sno    <span class="token keyword">group</span> <span class="token keyword">by</span> sc<span class="token punctuation">.</span>sno <span class="token keyword">having</span> <span class="token function">avg</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">80</span> <span class="token keyword">order</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>sno <span class="token keyword">asc</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="5-排序查询order-by"><a href="#5-排序查询order-by" class="headerlink" title="5. 排序查询order by"></a>5. 排序查询order by</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p>
<p>排序方式：</p>
<ul>
<li>ASC: 升序（默认）</li>
<li>DESC: 降序</li>
</ul>
<p><strong>注意</strong>：如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p>
<h4 id="6-分页查询limit"><a href="#6-分页查询limit" class="headerlink" title="6. 分页查询limit"></a>6. 分页查询limit</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p>
<p>例子：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询第一页数据，展示10条</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employee <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>起始索引从0开始，起始索引 &#x3D; （查询页码 - 1） * 每页显示记录数</li>
<li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li>
<li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 100</li>
</ul>
<h4 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230917204155472.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230917204155472.png"></p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230917204222235.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230917204222235.png"></p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230917213025813-1696489116426-15.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230917213025813-1696489116426-15.png"></p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230917213620668-1696489120779-17.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230917213620668-1696489120779-17.png"></p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230917213815673-1696489124548-19.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230917213815673-1696489124548-19.png"></p>
<h3 id="4-DCL"><a href="#4-DCL" class="headerlink" title="4. DCL"></a>4. DCL</h3><h4 id="1-管理用户"><a href="#1-管理用户" class="headerlink" title="1. 管理用户"></a>1. 管理用户</h4><p>查询用户：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">USE</span> mysql<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span>
</code></pre>
<p>创建用户:<br><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p>
<p>修改用户密码：<br><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p>
<p>删除用户：<br><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p>
<ul>
<li>主机名可以使用 % 通配</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 只能主机localhost访问</span>
<span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'user2'</span>@'localhost<span class="token string">' identified by '</span><span class="token number">123456</span>'<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 任意主机访问</span>
<span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'user3'</span>@'<span class="token operator">%</span><span class="token string">' identified by '</span><span class="token number">123456</span><span class="token string">';
create user '</span>user4<span class="token string">' identified by '</span><span class="token number">123456</span>'<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 修改密码</span>
<span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">'user2'</span>@'localhost<span class="token string">' identified with mysql_native_password by '</span><span class="token number">123</span>'<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 删除用户</span>
<span class="token keyword">drop</span> <span class="token keyword">user</span> <span class="token string">'user2'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="2-权限控制"><a href="#2-权限控制" class="headerlink" title="2. 权限控制"></a>2. 权限控制</h4><p>常用权限：</p>
<table>
<thead>
<tr>
<th align="left">权限</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ALL, ALL PRIVILEGES</td>
<td align="left">所有权限</td>
</tr>
<tr>
<td align="left">SELECT</td>
<td align="left">查询数据</td>
</tr>
<tr>
<td align="left">INSERT</td>
<td align="left">插入数据</td>
</tr>
<tr>
<td align="left">UPDATE</td>
<td align="left">修改数据</td>
</tr>
<tr>
<td align="left">DELETE</td>
<td align="left">删除数据</td>
</tr>
<tr>
<td align="left">ALTER</td>
<td align="left">修改表</td>
</tr>
<tr>
<td align="left">DROP</td>
<td align="left">删除数据库&#x2F;表&#x2F;视图</td>
</tr>
<tr>
<td align="left">CREATE</td>
<td align="left">创建数据库&#x2F;表</td>
</tr>
<tr>
<td align="left">USAGE</td>
<td align="left">不优先</td>
</tr>
</tbody></table>
<p>查询权限：</p>
<p><code>show grants for &#39;用户名&#39;@&#39;主机名&#39;;</code></p>
<p>授予权限：</p>
<p><code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p>
<p>撤销权限：</p>
<p><code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p>
<ul>
<li>多个权限用逗号分隔</li>
<li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">'user2'</span>@'localhost<span class="token string">';
GRANT SELECT, INSERT ON db1.test1 TO '</span>user2<span class="token string">'@'</span>localhost'<span class="token punctuation">;</span> 
<span class="token keyword">GRANT</span> <span class="token keyword">USAGE</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token punctuation">`</span>user2<span class="token punctuation">`</span><span class="token variable">@`localhost`</span><span class="token punctuation">;</span>
<span class="token keyword">revoke</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span> <span class="token keyword">on</span> <span class="token number">db1</span><span class="token punctuation">.</span>test1 <span class="token keyword">from</span> <span class="token punctuation">`</span>user2<span class="token punctuation">`</span><span class="token variable">@`localhost`</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="5-mysql正则表达式"><a href="#5-mysql正则表达式" class="headerlink" title="5. mysql正则表达式"></a>5. mysql正则表达式</h2><table>
<thead>
<tr>
<th>a{5}</th>
<th>a只能出现5次</th>
</tr>
</thead>
<tbody><tr>
<td>a{1,3}</td>
<td>a取值范围[1,3]</td>
</tr>
<tr>
<td>[<em>charlist</em>]</td>
<td>字符列中的任何单一字符</td>
</tr>
<tr>
<td>[^<em>charlist</em>] 或 [!<em>charlist</em>]</td>
<td>不在字符列中的任何单一字符</td>
</tr>
<tr>
<td>^[charlist]</td>
<td>以charlist开头的列</td>
</tr>
<tr>
<td>X$</td>
<td>表示以字母 X 结尾的字符串。</td>
</tr>
<tr>
<td>.</td>
<td>匹配任何一个字符，包括回车、换行等</td>
</tr>
<tr>
<td>x*</td>
<td>x{0,}。星号匹配 0 个或多个字符，在它之前必须有内容。</td>
</tr>
<tr>
<td>x?</td>
<td>x{0,1}。问号匹配 0 次或 1 次。(‘baa?na’匹配一个a或者0个a)</td>
</tr>
<tr>
<td>x+</td>
<td>x{1,}加号匹配 1 个或多个字符，在它之前也必须有内容。</td>
</tr>
<tr>
<td>(abc)*</td>
<td>匹配任意多个abc（包括空串)</td>
</tr>
<tr>
<td>*?</td>
<td>(懒惰)重复任意次，但尽可能少重复</td>
</tr>
<tr>
<td>.*</td>
<td>(贪婪)尽可能多匹配</td>
</tr>
<tr>
<td>下面在mysql里需要两条反斜杠（大小写敏感）</td>
<td></td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母或数字或下划线或汉字</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任意的空白符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词的开始或结束（\blove\b匹配”i love you”中的love）</td>
</tr>
<tr>
<td>\W</td>
<td>匹配任意不是字母，数字，下划线，汉字的字符</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任意不是空白符的字符</td>
</tr>
<tr>
<td>\D</td>
<td>匹配任意非数字的字符</td>
</tr>
<tr>
<td>\B</td>
<td>匹配不是单词开头或结束的位置</td>
</tr>
</tbody></table>
<ol>
<li><p>MySQL 中使用 <strong>REGEXP</strong> 或 <strong>NOT REGEXP</strong> 运算符 (或 RLIKE 和 NOT RLIKE) 来操作正则表达式。(regular-expression)</p>
</li>
<li><p>正则表达式默认不区分大小写。</p>
</li>
</ol>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询找到所有名称以元音开始和 ok 结束的:</span>
<span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> tb1 <span class="token keyword">WHERE</span> name <span class="token operator">REGEXP</span> <span class="token string">'^[aeiou]|ok$'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 匹配元素是1-3个a，可以匹配a,aa,aaa</span>
<span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> test1 <span class="token keyword">WHERE</span> name <span class="token operator">REGEXP</span> '<span class="token operator">^</span><span class="token number">a</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;1,3&amp;#125;$';</span>
<span class="token comment" spellcheck="true">-- 匹配元素含有1-3个a，可以匹配aaaa</span>
<span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> test1 <span class="token keyword">WHERE</span> name <span class="token operator">REGEXP</span> '<span class="token number">a</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;1,3&amp;#125;';</span>
</code></pre>
<h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6.函数"></a>6.函数</h2><h3 id="1-字符串函数"><a href="#1-字符串函数" class="headerlink" title="1. 字符串函数"></a>1. 字符串函数</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 拼接,HelloWorld</span>
<span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 小写,hello</span>
<span class="token keyword">SELECT</span> LOWER<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 大写,HELLO</span>
<span class="token keyword">SELECT</span> UPPER<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 左填充,---01</span>
<span class="token keyword">SELECT</span> LPAD<span class="token punctuation">(</span><span class="token string">'01'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 右填充,01---</span>
<span class="token keyword">SELECT</span> RPAD<span class="token punctuation">(</span><span class="token string">'01'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 去除两边空格,Hello World</span>
<span class="token keyword">SELECT</span> TRIM<span class="token punctuation">(</span><span class="token string">' Hello World '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 切片（起始索引为1）,Hello</span>
<span class="token keyword">SELECT</span> SUBSTRING<span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 替换，结果是http:www.google.com.cn</span>
<span class="token keyword">SELECT</span> REPLACE<span class="token punctuation">(</span>'http:<span class="token comment" spellcheck="true">//www.google.com.cn/','/','');</span>
<span class="token comment" spellcheck="true">-- 类型转换 下面浮点数转字符串</span>
cast<span class="token punctuation">(</span><span class="token number">3.14</span> <span class="token keyword">as</span> char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">convert</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">,</span>char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="2-数值函数"><a href="#2-数值函数" class="headerlink" title="2. 数值函数"></a>2. 数值函数</h3><table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CEIL(x)</td>
<td align="left">向上取整</td>
</tr>
<tr>
<td align="left">FLOOR(x)</td>
<td align="left">向下取整</td>
</tr>
<tr>
<td align="left">MOD(x, y)</td>
<td align="left">返回x&#x2F;y的模</td>
</tr>
<tr>
<td align="left">RAND()</td>
<td align="left">返回0~1内的随机数</td>
</tr>
<tr>
<td align="left">ROUND(x, y)</td>
<td align="left">求参数x的四舍五入值，保留y位小数</td>
</tr>
</tbody></table>
<h3 id="3-日期函数"><a href="#3-日期函数" class="headerlink" title="3. 日期函数"></a>3. 日期函数</h3><table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CURDATE()</td>
<td align="left">返回当前日期</td>
</tr>
<tr>
<td align="left">CURTIME()</td>
<td align="left">返回当前时间</td>
</tr>
<tr>
<td align="left">NOW()</td>
<td align="left">返回当前日期和时间</td>
</tr>
<tr>
<td align="left">YEAR(date)</td>
<td align="left">获取指定date的年份</td>
</tr>
<tr>
<td align="left">MONTH(date)</td>
<td align="left">获取指定date的月份</td>
</tr>
<tr>
<td align="left">DAY(date)</td>
<td align="left">获取指定date的日期</td>
</tr>
<tr>
<td align="left">DATE_ADD(date, INTERVAL expr type)</td>
<td align="left">返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td>
</tr>
<tr>
<td align="left">DATEDIFF(date1, date2)</td>
<td align="left">返回起始时间date1和结束时间date2之间的天数</td>
</tr>
</tbody></table>
<h3 id="4-系统信息函数"><a href="#4-系统信息函数" class="headerlink" title="4. 系统信息函数"></a>4. 系统信息函数</h3><table>
<thead>
<tr>
<th></th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>charset(str)</td>
<td>返回str字符集</td>
</tr>
<tr>
<td>current_user()<br>session_user()<br>user()<br>system_user()</td>
<td>返回当前用户名称</td>
</tr>
<tr>
<td>connection_id()</td>
<td>当前用户连接id</td>
</tr>
<tr>
<td>schema()</td>
<td>当前数据库名</td>
</tr>
<tr>
<td>version()</td>
<td>数据库版本号</td>
</tr>
</tbody></table>
<h3 id="5-流程函数"><a href="#5-流程函数" class="headerlink" title="5. 流程函数"></a>5. 流程函数</h3><table>
<thead>
<tr>
<th>if(value, t, f)</th>
<th>如果value为true，则返回t，否则返回f</th>
</tr>
</thead>
<tbody><tr>
<td>ifnull(value1, value2)</td>
<td>如果value1不为空，返回value1，否则返回value2</td>
</tr>
<tr>
<td>if…then…elseif…then…else…end if;</td>
<td></td>
</tr>
<tr>
<td>case when…then…when…then…else…end</td>
<td></td>
</tr>
<tr>
<td>case…when…then…when…then…else…end</td>
<td>类似c语言switch</td>
</tr>
</tbody></table>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">'Ok'</span><span class="token punctuation">,</span> <span class="token string">'Error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- OK</span>
<span class="token comment" spellcheck="true">-- ''空串不是null,返回''空串</span>
<span class="token keyword">select</span> ifnull<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'Default'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 返回Default</span>
<span class="token keyword">select</span> ifnull<span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'Default'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> name<span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token string">'北京'</span> <span class="token keyword">then</span> <span class="token string">'一线城市'</span> <span class="token keyword">when</span> <span class="token string">'深圳'</span> <span class="token keyword">then</span> <span class="token string">'一线城市'</span> <span class="token keyword">else</span> <span class="token string">'二线城市'</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'城市级别'</span>
<span class="token keyword">from</span> tb_employ<span class="token punctuation">;</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token keyword">case</span> math <span class="token keyword">when</span> <span class="token number">100</span> <span class="token keyword">then</span> <span class="token string">'满分'</span> <span class="token keyword">when</span> <span class="token number">0</span> <span class="token keyword">then</span> <span class="token string">'鸭蛋'</span> <span class="token keyword">else</span> <span class="token string">'不完美的战士也是战士'</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'评价'</span>
<span class="token keyword">from</span> tb_score<span class="token punctuation">;</span>
</code></pre>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230918135400012-1696489133306-21.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230918135400012-1696489133306-21.png"></p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> tb_Salary <span class="token keyword">set</span> sex<span class="token operator">=</span><span class="token keyword">if</span><span class="token punctuation">(</span>sex<span class="token operator">=</span><span class="token string">"f"</span><span class="token punctuation">,</span><span class="token string">"m"</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> sno<span class="token punctuation">,</span><span class="token keyword">CASE</span> sex
    <span class="token keyword">WHEN</span> <span class="token string">'男'</span> <span class="token keyword">THEN</span> <span class="token string">'M'</span>
    <span class="token keyword">WHEN</span> <span class="token string">'女'</span> <span class="token keyword">THEN</span> <span class="token string">'F'</span>
    <span class="token keyword">END</span> <span class="token keyword">AS</span> sex <span class="token keyword">FROM</span> s<span class="token punctuation">;</span>
</code></pre>
<h2 id="7-约束"><a href="#7-约束" class="headerlink" title="7. 约束"></a>7. 约束</h2><h3 id="1-常见约束"><a href="#1-常见约束" class="headerlink" title="1. 常见约束"></a>1. 常见约束</h3><table>
<thead>
<tr>
<th align="left">约束</th>
<th align="left">描述</th>
<th align="left">关键字</th>
</tr>
</thead>
<tbody><tr>
<td align="left">非空约束</td>
<td align="left">限制该字段的数据不能为null</td>
<td align="left">NOT NULL</td>
</tr>
<tr>
<td align="left">唯一约束</td>
<td align="left">保证该字段的所有数据都是唯一、不重复的</td>
<td align="left">UNIQUE</td>
</tr>
<tr>
<td align="left">主键约束</td>
<td align="left">主键是一行数据的唯一标识，<strong>要求非空且不重复,每张表最多一个</strong></td>
<td align="left">PRIMARY KEY</td>
</tr>
<tr>
<td align="left">默认约束</td>
<td align="left">保存数据时，如果未指定该字段的值，则采用默认值</td>
<td align="left">DEFAULT</td>
</tr>
<tr>
<td align="left">检查约束（8.0.1版本后）</td>
<td align="left">保证字段值满足某一个条件</td>
<td align="left">CHECK</td>
</tr>
<tr>
<td align="left">外键约束</td>
<td align="left">用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td>
<td align="left">FOREIGN KEY</td>
</tr>
<tr>
<td align="left">自增</td>
<td align="left">详见下面</td>
<td align="left">AUTO_INCREMENT</td>
</tr>
</tbody></table>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 列级约束</span>
字段名 数据类型 <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span>
<span class="token comment" spellcheck="true">#表级约束</span>
<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span>（字段名<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token punctuation">,</span>…）
</code></pre>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tb4<span class="token punctuation">(</span>
    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>
    age <span class="token keyword">int</span> <span class="token keyword">check</span><span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> age <span class="token operator">&lt;</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">status</span> char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'1'</span><span class="token punctuation">,</span>
    gender char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="2-外键约束foreign-key"><a href="#2-外键约束foreign-key" class="headerlink" title="2. 外键约束foreign key"></a>2. 外键约束foreign key</h3><p><strong>候选键</strong>（Candidate Key）：一个属性或属性组的值能唯一标识一个元组，而子集不能。</p>
<p>比如，想要知道某位学生的某门课程的成绩Grade，那我们必须要知道该学生的学号Sno以及课程号Cno。此时X[Sno,Cno]称为S的一个候选码。</p>
<p><strong>主键</strong>：当有多个候选键时，可以选定一个作为主键，选定的候选键称为主键（主码）。</p>
<p><strong>外键</strong>：一个表（从表，参照表）的字段引用主表（被参照表）的主键或者唯一键。</p>
<p><strong>前提：</strong></p>
<p>1、创建外键的表和列存在</p>
<p>2、组成外键的列存在索引</p>
<p>3、必须指定数据表的引擎为InnoDB</p>
<p>4、外键字段和关联字段，数据类型和长度必须一致</p>
<p>5、引用字段的值必须存在于被引用表中。</p>
<p>6、定义外键约束名称(如FK_ID)时，不能加单引号和双引号，可以反引号。</p>
<table>
<thead>
<tr>
<th align="left">行为</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">no action</td>
<td align="left">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（与RESTRICT一致）</td>
</tr>
<tr>
<td align="left">restrict</td>
<td align="left">与no action一致</td>
</tr>
<tr>
<td align="left">cascade</td>
<td align="left">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除&#x2F;更新外键在子表中的记录</td>
</tr>
<tr>
<td align="left">set null</td>
<td align="left">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td>
</tr>
<tr>
<td align="left">set default</td>
<td align="left">父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td>
</tr>
</tbody></table>
<h4 id="1-创建外键"><a href="#1-创建外键" class="headerlink" title="1. 创建外键"></a>1. 创建外键</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> father<span class="token punctuation">(</span>
    cid <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>
    classname char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> child<span class="token punctuation">(</span>
    id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
    name char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
    classid <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">constraint</span> 外键约束名 <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>classid<span class="token punctuation">)</span> <span class="token keyword">references</span> father<span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">restrict</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">cascade</span>  
<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 外键约束名不加引号</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> father <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'一班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> father <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'二班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> father <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'三班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 报错，因为父表没有为5的cid</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> child <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 子表插入记录成功</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> child <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">//使用alter table创建外键</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> mydb<span class="token punctuation">.</span>employees
<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> FK_ID <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> department <span class="token punctuation">(</span>id<span class="token punctuation">)</span> 
<span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">RESTRICT</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="2-查看外键"><a href="#2-查看外键" class="headerlink" title="2. 查看外键"></a>2. 查看外键</h4><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">desc</span> <span class="token number">db1</span><span class="token punctuation">.</span>child classid<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------+-------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> Field   <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------+-------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> classid <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span> MUL <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment" spellcheck="true">---------+-------------+------+-----+---------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.11</span> sec<span class="token punctuation">)</span>
</code></pre>
<p>添加了外键约束的classid 字段的 Key(索引) 值为MUL，表示非唯一性索引(MUL TIPLE KEY)，值可以重复。</p>
<h4 id="3-修改和删除外键"><a href="#3-修改和删除外键" class="headerlink" title="3. 修改和删除外键"></a>3. 修改和删除外键</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 修改外键</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> child <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> 外键约束名<span class="token punctuation">,</span><span class="token keyword">add</span> <span class="token keyword">constraint</span> 外键名 <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>classid<span class="token punctuation">)</span> <span class="token keyword">references</span> father<span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">cascade</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">cascade</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 删除外键</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> child <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> 外键名<span class="token punctuation">;</span>
</code></pre>
<h4 id="4-启用或禁用外键"><a href="#4-启用或禁用外键" class="headerlink" title="4. 启用或禁用外键"></a>4. 启用或禁用外键</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 禁用约束</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DISABLE</span> <span class="token keyword">CONSTRAINT</span> 约束名<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 启用约束</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ENABLE</span> <span class="token keyword">CONSTRAINT</span> 约束名<span class="token punctuation">;</span>
</code></pre>
<h3 id="3-自动增长"><a href="#3-自动增长" class="headerlink" title="3. 自动增长"></a>3. 自动增长</h3><ul>
<li><p>一个表中<strong>只能有一个</strong>自动增长字段，该字段的数据类型是<strong>整数类型</strong>，且必须定义为键，如 <code>UNIQUE KEY</code> 、<code>PRIMARY KEY</code></p>
</li>
<li><p>若为自动增长字段插入 <code>NULL</code>、<code>0</code>、<code>DEFAULT</code> 或在插入时省略该字段，则该字段就会使用自动增长值；若插入的是一个具体值，则不会使用自动增长值。</p>
</li>
<li><p>自动增长值从 1 开始自增，每次加 1。若插入的值大于自动增长的值，则下次插入的自动增长值会自动使用最大值加 1；若插入的值小于自动增长值，则不会对自动增长值产生影响。</p>
</li>
<li><p>使用 DELETE 删除记录时，自动增长值不会减小或填补空缺。</p>
</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 自增初值为100，每次自增1</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> test1 <span class="token keyword">auto_increment</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 添加自动增长</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 字段名 字段类型 <span class="token punctuation">[</span>字段属性<span class="token punctuation">]</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 删除自动增长</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 数据库名 <span class="token keyword">MODIFY</span> 字段名 字段类型 <span class="token punctuation">[</span>字段属性<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="8-多表查询"><a href="#8-多表查询" class="headerlink" title="8. 多表查询"></a>8. 多表查询</h2><h3 id="1-多表关系"><a href="#1-多表关系" class="headerlink" title="1. 多表关系"></a>1. 多表关系</h3><blockquote>
<p>一对多</p>
</blockquote>
<p>比如一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p>
<blockquote>
<p>多对多</p>
</blockquote>
<p>比如一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p>
<blockquote>
<p>一对一</p>
</blockquote>
<p>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为unique。</p>
<h3 id="2-合并查询"><a href="#2-合并查询" class="headerlink" title="2. 合并查询"></a>2. 合并查询</h3><blockquote>
<p>合并查询（笛卡尔积，会展示所有组合结果）：</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> child<span class="token punctuation">,</span>teacher<span class="token punctuation">,</span>father<span class="token punctuation">;</span>
</code></pre>
<p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p>
<blockquote>
<p>消除无效笛卡尔乘积</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> child<span class="token punctuation">,</span>teacher<span class="token punctuation">,</span>father <span class="token keyword">where</span> teacher<span class="token punctuation">.</span>id<span class="token operator">=</span>child<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre>
<h3 id="3-内连接查询"><a href="#3-内连接查询" class="headerlink" title="3. 内连接查询"></a>3. 内连接查询</h3><p>内连接查询的是两张表交集的部分</p>
<p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p>
<p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token number">d</span><span class="token punctuation">.</span>name <span class="token keyword">from</span> employee <span class="token keyword">as</span> <span class="token number">e</span><span class="token punctuation">,</span> dept <span class="token keyword">as</span> <span class="token number">d</span> <span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>dept <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test2 <span class="token keyword">inner</span> <span class="token keyword">join</span> teacher <span class="token keyword">on</span> test2<span class="token punctuation">.</span>id<span class="token operator">=</span>teacher<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre>
<h3 id="4-外连接查询"><a href="#4-外连接查询" class="headerlink" title="4. 外连接查询"></a>4. 外连接查询</h3><p><strong>左外连接</strong>：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表1的所有数据，包含表1和表2交集部分数据,outer可以省略</p>
<p><strong>右外连接</strong>：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p>
<p>相当于查询表2的所有数据，包含表1和表2交集部分数据</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 左</span>
<span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token number">d</span><span class="token punctuation">.</span>name <span class="token keyword">from</span> employee <span class="token keyword">as</span> <span class="token number">e</span> <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> dept <span class="token keyword">as</span> <span class="token number">d</span> <span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>dept <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- e是别名</span>
<span class="token keyword">select</span> <span class="token number">d</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> dept <span class="token number">d</span> <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> emp <span class="token number">e</span> <span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>dept <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 这条语句与下面的语句效果一样</span>
<span class="token comment" spellcheck="true">-- 右</span>
<span class="token keyword">select</span> <span class="token number">d</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">as</span> <span class="token number">e</span> <span class="token keyword">right</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> dept <span class="token keyword">as</span> <span class="token number">d</span> <span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>dept <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre>
<h3 id="5-自连接查询"><a href="#5-自连接查询" class="headerlink" title="5. 自连接查询"></a>5. 自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名。</p>
<p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p>
<p>自连接查询，可以是内连接查询，也可以是外连接查询。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询员工及其所属领导的名字,输出时a.name替换成员工名字</span>
<span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>name <span class="token keyword">as</span> 员工名字<span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>name <span class="token keyword">as</span> 所属领导名字 <span class="token keyword">from</span> employee <span class="token number">a</span><span class="token punctuation">,</span> employee <span class="token number">b</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>managerid <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 没有领导的也查询出来</span>
<span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>name <span class="token keyword">from</span> employee <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> employee <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>managerid <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre>
<p>在连接查询时，若<code>数据表连接的字段同名</code>，则连接时的<code>匹配条件</code>可以使用 <code>USING</code> 代替ON，多个同名的连接字段之间用逗号分隔。</p>
<h3 id="6-联合查询union，union-all"><a href="#6-联合查询union，union-all" class="headerlink" title="6. 联合查询union，union all"></a>6. 联合查询union，union all</h3><p>把多次查询的结果合并，形成一个新的查询集。</p>
<p>union会对结果进行并集操作，<strong>去除重复行</strong>。</p>
<p>union all 将查询结果合并，<strong>保留重复行</strong>。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 不去重，升序排序</span>
<span class="token keyword">select</span> money <span class="token keyword">from</span> test2 <span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span> money <span class="token keyword">from</span> test3 <span class="token keyword">order</span> <span class="token keyword">by</span> money <span class="token keyword">ASC</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 去重</span>
<span class="token keyword">select</span> money <span class="token keyword">from</span> test2 <span class="token keyword">union</span>  <span class="token keyword">select</span> money <span class="token keyword">from</span> test3 <span class="token keyword">order</span> <span class="token keyword">by</span> money <span class="token keyword">ASC</span><span class="token punctuation">;</span>
</code></pre>
<ul>
<li>联合查询比使用or效率高，不会使索引失效</li>
</ul>
<h3 id="7-子查询-嵌套查询"><a href="#7-子查询-嵌套查询" class="headerlink" title="7. 子查询(嵌套查询)"></a>7. 子查询(嵌套查询)</h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT &#x2F; UPDATE &#x2F; DELETE &#x2F; SELECT 的任何一个</strong></p>
<p>根据子查询结果可以分为：</p>
<ul>
<li>标量子查询（子查询结果为单个值）</li>
<li>列子查询（子查询结果为一列）</li>
<li>行子查询（子查询结果为一行）</li>
<li>表子查询（子查询结果为多行多列）</li>
</ul>
<p>根据子查询位置可分为：</p>
<ul>
<li>WHERE 之后</li>
<li>FROM 之后</li>
<li>SELECT 之后</li>
</ul>
<h4 id="1-标量子查询"><a href="#1-标量子查询" class="headerlink" title="1. 标量子查询"></a>1. 标量子查询</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询在张三入职时间后公司新来同事</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> entrydate <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> entrydate <span class="token keyword">from</span> employee <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="2-列子查询"><a href="#2-列子查询" class="headerlink" title="2. 列子查询"></a>2. 列子查询</h4><p>常用操作符：</p>
<table>
<thead>
<tr>
<th align="left">操作符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">IN</td>
<td align="left">在指定的集合范围内，多选一</td>
</tr>
<tr>
<td align="left">NOT IN</td>
<td align="left">不在指定的集合范围内</td>
</tr>
<tr>
<td align="left">ANY</td>
<td align="left">子查询返回列表中，有任意一个满足即可</td>
</tr>
<tr>
<td align="left">SOME</td>
<td align="left">与ANY等同，使用SOME的地方都可以使用ANY</td>
</tr>
<tr>
<td align="left">ALL</td>
<td align="left">子查询返回列表的所有值都必须满足</td>
</tr>
</tbody></table>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> money <span class="token keyword">from</span> test3 <span class="token keyword">where</span> money <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> money <span class="token keyword">from</span> test2 <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">select</span> money <span class="token keyword">from</span> test3 <span class="token keyword">where</span> money<span class="token operator">></span><span class="token keyword">any</span><span class="token punctuation">(</span><span class="token keyword">select</span> money <span class="token keyword">from</span> test2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 大于其中之一</span>
<span class="token keyword">select</span> money <span class="token keyword">from</span> test3 <span class="token keyword">where</span> money<span class="token operator">></span><span class="token keyword">all</span><span class="token punctuation">(</span><span class="token keyword">select</span> money <span class="token keyword">from</span> test2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 大于全部</span>
</code></pre>
<h4 id="3-行子查询"><a href="#3-行子查询" class="headerlink" title="3. 行子查询"></a>3. 行子查询</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test3 <span class="token keyword">where</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span>money<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>money <span class="token keyword">from</span> test2 <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="4-表子查询"><a href="#4-表子查询" class="headerlink" title="4. 表子查询"></a>4. 表子查询</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test3 <span class="token keyword">where</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span>money<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>money <span class="token keyword">from</span> test2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="9-视图与索引"><a href="#9-视图与索引" class="headerlink" title="9. 视图与索引"></a>9. 视图与索引</h2><h3 id="1-视图"><a href="#1-视图" class="headerlink" title="1. 视图"></a>1. 视图</h3><p>视图是在一个、多个基本表或视图基础上，通过查询语句定义的虚拟表格。</p>
<ul>
<li><p>视图可用于SELECT语句中进行查询</p>
</li>
<li><p>视图<strong>只存储定义语句</strong>，不存储其数据</p>
</li>
<li><p>当使用视图进行查询时，视图包含的数据才会临时生成。</p>
</li>
</ul>
<p>视图作用：提升数据操作的便携性，提升了数据的安全性，提升了数据的逻辑独立性，视图可用于数据集成。</p>
<p>视图的工作机制：视图中的内容总是与基本表中数据保持一致，即当基本表中数据发生变化时，相关视图的数据也随之变化。</p>
<h4 id="1-视图创建"><a href="#1-视图创建" class="headerlink" title="1. 视图创建"></a>1. 视图创建</h4><p>CREATE [OR REPLACE ] [ALGORITHM&#x3D;{ UNDEFINED | MERGE | TEMPTABLE}]</p>
<p>[DEFINER &#x3D; { user | CURRENT_USER }] </p>
<p>VIEW 视图名[(视图字段列表)]</p>
<p>AS 查询语句</p>
<p>[WITH [CASCADED | LOCAL] CHECK OPTION];</p>
<ul>
<li><p>添加OR REPLACE可选参数表明可以在创建视图时替换数据库已有8同名视图。</p>
</li>
<li><p>ALGORITHM表示视图的使用方法。其中，UNDEFINE表示由MySQL自行决定使用方法。</p>
</li>
<li><p>WITH CHECK OPTION表示更新、修改和插入视图数据时，只有满足检查条件操作才会执行。</p>
</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建视图</span>
<span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">view</span> s_view <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> s <span class="token keyword">where</span> dept<span class="token operator">=</span><span class="token string">'信息学院'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 多张基本表上创建视图</span>
<span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">view</span> ts_view<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">select</span> tb_score<span class="token punctuation">.</span>name<span class="token punctuation">,</span>age <span class="token keyword">from</span> teacher<span class="token punctuation">,</span>tb_score <span class="token keyword">where</span> teacher<span class="token punctuation">.</span>id<span class="token operator">=</span>tb_score<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 在视图上创建视图</span>
<span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> s_maj_view <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> s_view <span class="token keyword">WHERE</span> maj<span class="token operator">=</span><span class="token string">'计算机'</span><span class="token punctuation">;</span>
</code></pre>
<p><strong>不能在SELECT语句中包含系统、用户变量以及处理语句参数，同时不能在FROM子句中包含子查询</strong></p>
<p><strong>删除视图依赖的基本表后，视图使用会报错，可通过“CHECK TABLE 表名”检查基本表状态。</strong></p>
<p><strong>不能为临时表创建视图。</strong></p>
<p><strong>创建视图时，ALGORITHM参数指定对部分查询结果具有影响。</strong></p>
<h4 id="2-视图管理"><a href="#2-视图管理" class="headerlink" title="2. 视图管理"></a>2. 视图管理</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看视图</span>
<span class="token keyword">describe</span> ts_view<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查看定义(字段之类)</span>
<span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">view</span> ts_view<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查看结构</span>
<span class="token comment" spellcheck="true">-- 删除视图</span>
<span class="token keyword">drop</span> <span class="token keyword">view</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> ts_view<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 更新视图的数据(其实更新的是对应的基本表数据)</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> s_update_view <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'s10'</span><span class="token punctuation">,</span><span class="token string">'韩义'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">'计算机'</span><span class="token punctuation">,</span><span class="token string">'信息学院'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">UPDATE</span> s_update_view <span class="token keyword">SET</span> age <span class="token operator">=</span> <span class="token number">20</span>　<span class="token keyword">WHERE</span> sno <span class="token operator">=</span> <span class="token string">'s10'</span><span class="token punctuation">;</span>
<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> s_update_view <span class="token keyword">WHERE</span> sno <span class="token operator">=</span> <span class="token string">'s10'</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="2-索引"><a href="#2-索引" class="headerlink" title="2. 索引"></a>2. 索引</h3><p>优点：</p>
<p>–提高查询执行的速度。</p>
<p>–强制实施数据的唯一性。</p>
<p>–提高表之间联接的速度。</p>
<p>缺点</p>
<p>–存储索引要占用磁盘空间。</p>
<p>–数据修改需要更长的时间，因为索引也要更新。</p>
<p>–创建索引要花时间。 </p>
<p><strong>按索引特征</strong>：普通索引、唯一索引(unique)、主键索引、全文索引(fulltext)和空间索引(spatial)。</p>
<p><strong>根据索引存储方式进行分类</strong>：B-Tree索引、Hash索引</p>
<p><strong>根据索引与数据物理存储关系</strong>：聚集型索引、非聚集型索引</p>
<p><strong>根据索引涉及列数进行</strong>：单列索引、复合索引</p>
<p>复合索引需要遵循最左匹配原则。</p>
<h4 id="1-索引创建"><a href="#1-索引创建" class="headerlink" title="1. 索引创建"></a>1. 索引创建</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span> <span class="token operator">|</span> FULLTEXT <span class="token operator">|</span> SPATIAL<span class="token punctuation">]</span> <span class="token keyword">INDEX</span> 索引名称
<span class="token keyword">ON</span> 表名称<span class="token punctuation">(</span>字段名称<span class="token punctuation">[</span><span class="token punctuation">(</span>索引字符长度<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>当字段名称[(索引字符长度) [ASC | DESC]]只有一项时，将建立单列索引。当字段名称[(索引字符长度) [ASC | DESC]]有多项时，将建立复合索引。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> t_name_index <span class="token keyword">on</span> teacher<span class="token punctuation">(</span>name<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 为teacher创建普通索引，针对name的前三个字符降序排列</span>
<span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> c_cn_ct_index <span class="token keyword">on</span> <span class="token number">c</span><span class="token punctuation">(</span>cn<span class="token punctuation">,</span>ct<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 为课程表c的课程名（cn）和学时（ct）字段建立复合唯一索引</span>

<span class="token keyword">create</span> <span class="token keyword">table</span> classroom<span class="token punctuation">(</span>
    cid <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    crno <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 教室编号</span>
    cbn <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 教学楼编号</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">unique</span> <span class="token keyword">index</span> nb_index<span class="token punctuation">(</span>crno<span class="token punctuation">,</span> cbn<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 建表时创建索引</span>

<span class="token comment" spellcheck="true">-- 为已有表创建索引</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token keyword">add</span> <span class="token keyword">index</span> t_name_index<span class="token punctuation">(</span>name<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="2-索引管理"><a href="#2-索引管理" class="headerlink" title="2. 索引管理"></a>2. 索引管理</h4><blockquote>
<p>查看索引</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> teacher<span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>使用索引</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token keyword">add</span> fulltext <span class="token keyword">index</span> t_name_index<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher <span class="token keyword">where</span> <span class="token keyword">MATCH</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> against<span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 全文索引使用</span>
<span class="token comment" spellcheck="true">-- 普通索引跟平常用select没区别</span>
</code></pre>
<blockquote>
<p>删除索引</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token keyword">drop</span> <span class="token keyword">index</span> t_name_index<span class="token punctuation">;</span>
<span class="token keyword">drop</span> <span class="token keyword">index</span> t_name_index <span class="token keyword">on</span> teacher<span class="token punctuation">;</span>
</code></pre>
<h2 id="10-数据库安全管理"><a href="#10-数据库安全管理" class="headerlink" title="10. 数据库安全管理"></a>10. 数据库安全管理</h2><p>安全控制的一般方法：用户登录，安全审计，权限管理，文件权限，数据加密。</p>
<h3 id="1-添加用户"><a href="#1-添加用户" class="headerlink" title="1. 添加用户"></a>1. 添加用户</h3><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230928165255873-1696489152413-23.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230928165255873-1696489152413-23.png"></p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> <span class="token string">'student'</span>@'localhost<span class="token string">' identified by '</span>student123'<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#用户为student，密码student123，只允许在mysql所在服务器上登陆</span>
</code></pre>
<h3 id="2-用户管理"><a href="#2-用户管理" class="headerlink" title="2. 用户管理"></a>2. 用户管理</h3><blockquote>
<p>重命名</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">rename</span> <span class="token keyword">user</span> <span class="token string">'student'</span>@'localhost<span class="token string">' to stu@'</span><span class="token operator">%</span>'<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 更名为stu,%表示任意位置</span>
</code></pre>
<blockquote>
<p>修改密码</p>
</blockquote>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230928170318534-1696489159820-25.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230928170318534-1696489159820-25.png"></p>
<pre class=" language-sql"><code class="language-sql">mysqladmin <span class="token operator">-</span>u stu <span class="token operator">-</span>p password<span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>修改用户</p>
</blockquote>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230928170523997-1696489164660-27.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230928170523997-1696489164660-27.png"></p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">user</span> stu@'<span class="token operator">%</span><span class="token string">' identified by '</span>student123'<span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>删除用户</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">user</span> stu@'<span class="token operator">%</span><span class="token string">';
delete from mysql.user where user='</span>stu<span class="token string">' and host='</span><span class="token operator">%</span>'<span class="token punctuation">;</span>
</code></pre>
<h3 id="3-权限管理"><a href="#3-权限管理" class="headerlink" title="3. 权限管理"></a>3. 权限管理</h3><blockquote>
<p>权限授予</p>
</blockquote>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230928170904865-1696489169867-29.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230928170904865-1696489169867-29.png"></p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'teacher1'</span><span class="token variable">@'localhost'</span> <span class="token keyword">with</span> <span class="token keyword">grant</span> <span class="token keyword">option</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#为teacher10用户赋予数据库服务器的所有使用权限（ALL），并允许权限由teacher10授予其他用户。</span>

<span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span><span class="token punctuation">,</span> <span class="token keyword">UPDATE</span> 
<span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'teacher6'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#为teacher6用户赋予数据库服务器级别的查找、插入和更新数据权限（SELECT、INSERT、UPDATE），并且不允许二次授权。</span>

<span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">(</span>tno<span class="token punctuation">,</span> tn<span class="token punctuation">)</span>
<span class="token keyword">ON</span> teaching<span class="token punctuation">.</span>t <span class="token keyword">TO</span> <span class="token string">'teacher2'</span><span class="token variable">@'192.168.1.23'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#为teacher2用户赋予teaching数据库中教师表t上tno字段和tn字段的查找数据权限SELECT，并不允许权限由teacher2授予其他用户。</span>
</code></pre>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230928171720098.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230928171720098.png"></p>
<blockquote>
<p>权限查看</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">'student'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span>
<span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token keyword">CURRENT_USER</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>权限回收</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">revoke</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">delete</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'student'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>权限转移</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'teacher1'</span><span class="token variable">@'localhost'</span> <span class="token keyword">with</span> <span class="token keyword">grant</span> <span class="token keyword">option</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#允许teacher1将权限转移给其它用户</span>
</code></pre>
<h3 id="4-角色管理"><a href="#4-角色管理" class="headerlink" title="4. 角色管理"></a>4. 角色管理</h3><p>角色（Role）是对权限集中管理的一种机制，通常根据特定需要，将一系列权限集中在一起构成角色。</p>
<p>一个用户可以分配多个角色，也允许一个角色分配给多个用户</p>
<blockquote>
<p>角色创建</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#创建可在任意主机上使用的教师角色和管理员角色。</span>
<span class="token keyword">create</span> role <span class="token string">'teacher'</span><span class="token punctuation">,</span><span class="token string">'administrator'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#创建可在本地主机上使用的开发者角色。</span>
<span class="token keyword">CREATE</span> ROLE <span class="token string">'developer'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>角色授权</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> administrator<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#为管理员角色administrator授予服务器级别全局权限。</span>
<span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span><span class="token punctuation">,</span> <span class="token keyword">UPDATE</span><span class="token punctuation">,</span> <span class="token keyword">DELETE</span> <span class="token keyword">ON</span> teaching<span class="token punctuation">.</span>sc
<span class="token keyword">TO</span> <span class="token string">'teacher'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#为教师角色teacher授予teaching.sc表级别的查找SELECT、插入数据INSERT、更新数据UPDATE和删除数据DELETE权限。</span>
</code></pre>
<blockquote>
<p>角色激活</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#为用户teacher2分配角色</span>
<span class="token keyword">grant</span> <span class="token string">'teacher'</span> <span class="token keyword">to</span> <span class="token string">'teacher2'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#角色激活</span>
<span class="token keyword">set</span> <span class="token keyword">default</span> role <span class="token string">'teacher'</span> <span class="token keyword">to</span> <span class="token string">'teacher2'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 使用户teacher2上的teacher角色生效。</span>
<span class="token keyword">SET</span> <span class="token keyword">DEFAULT</span> ROLE <span class="token keyword">ALL</span> <span class="token keyword">TO</span> <span class="token string">'teacher3'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 使用户teacher3上的所有角色生效。</span>
</code></pre>
<blockquote>
<p>角色查看</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> current_role<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 查询当前用户生效的角色。</span>
</code></pre>
<blockquote>
<p>角色注销</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">revoke</span> <span class="token string">'teacher'</span> <span class="token keyword">from</span> <span class="token string">'teacher2'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 回收用户teacher2的角色teacher。</span>
<span class="token keyword">drop</span> role <span class="token string">'teacher'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 删除角色teacher。</span>
</code></pre>
<h2 id="11-数据库并发控制与封锁"><a href="#11-数据库并发控制与封锁" class="headerlink" title="11. 数据库并发控制与封锁"></a>11. 数据库并发控制与封锁</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930222514629.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930222514629.png"></p>
<h3 id="1-数据库并发性的含义"><a href="#1-数据库并发性的含义" class="headerlink" title="1. 数据库并发性的含义"></a>1. 数据库并发性的含义</h3><p>数据库最大的特点是<strong>数据共享</strong>，允许<strong>同一时间</strong>供<strong>多个用户</strong>根据自己的需要来操作数据库。</p>
<p><strong>串行</strong>：一个用户在运行程序时，其他用户程序必须等到这个用户程序结束才能对数据库进行存取。</p>
<p><strong>并行</strong>：最大限度地利用数据库，多个用户并行执行数据库。</p>
<p>数据库的<strong>并发性及并发控制机制</strong>是衡量数据库系统性能的重要标准。</p>
<p>在 MySQL 中，<strong>会话</strong>（session）是指客户端与服务器之间的交互过程，包括连接、执行 SQL 语句、获取结果等。</p>
<h3 id="2-事务及其性质"><a href="#2-事务及其性质" class="headerlink" title="2. 事务及其性质"></a>2. 事务及其性质</h3><p>事务是一组操作的集合，事务会把所有操作作为一个<strong>整体</strong>一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>
<p>用户看到的数据总能<strong>保持一致性</strong>。</p>
<h4 id="1-Mysql支持4种事务模式"><a href="#1-Mysql支持4种事务模式" class="headerlink" title="1. Mysql支持4种事务模式"></a>1. Mysql支持4种事务模式</h4><ul>
<li><p>自动提交模式：每执行一条SQL就提交</p>
</li>
<li><p>显式模式：有明确的事务开始和结束语句</p>
</li>
<li><p>隐式模式：没有事务开始语句，但有结束语句</p>
</li>
<li><p>分布式模式：适合多服务器系统</p>
</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 开启事务</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 提交所执行的所有操作，标志事务的结束</span>
<span class="token keyword">rollback</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/*回滚语句，当事务运行过程中发生故障时，事务不能继续执行，此时回滚操作撤销了事务所做的修改，并结束当前这个事务*/</span>
</code></pre>
<h4 id="2-事务的性质（四大特性ACID）"><a href="#2-事务的性质（四大特性ACID）" class="headerlink" title="2. 事务的性质（四大特性ACID）"></a>2. 事务的性质（四大特性ACID）</h4><ul>
<li>原子性(atomicity)：事务是不可分割的最小操作单元，操作要么都执行，要么都不执行</li>
<li>一致性：数据库始终保持一致性。事务完成时，必须使所有数据都保持一致状态。</li>
<li>隔离性：并发执行的事务之间不会相互影响。</li>
<li>持久性(durability)：一个事务被提交后，对数据库中数据的改变是永久性的。</li>
</ul>
<p><strong>注意</strong>：commit没执行，虽然真表的内容没变，但是假表的内容变了，需要回滚假表。(select可以查到假表,navicat双击数据表看到真表)</p>
<h4 id="3-用户定义的模式"><a href="#3-用户定义的模式" class="headerlink" title="3. 用户定义的模式"></a>3. 用户定义的模式</h4><p>隐式模式：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看事务提交方式</span>
<span class="token keyword">SELECT</span> @<span class="token variable">@AUTOCOMMIT</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span>
<span class="token keyword">SET</span> @<span class="token variable">@AUTOCOMMIT</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- 改为0，则需要在操作完后commit才会修改数据表</span>

<span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">-</span> <span class="token number">1000</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span>
因为这一行发生错误，所以下面<span class="token keyword">commit</span>不会执行<span class="token punctuation">,</span>假表内容被改变了，需要<span class="token keyword">rollback</span>事务
<span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">+</span> <span class="token number">1000</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'李四'</span><span class="token punctuation">;</span> 
<span class="token keyword">commit</span><span class="token punctuation">;</span>
</code></pre>
<p>显式模式：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 开启事务,也可begin transaction</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span>
<span class="token keyword">update</span> account <span class="token keyword">set</span> money<span class="token operator">=</span>money<span class="token number">-1000</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">;</span>
<span class="token keyword">update</span> account <span class="token keyword">set</span> money<span class="token operator">=</span>money<span class="token operator">+</span><span class="token number">1000</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'李四'</span><span class="token punctuation">;</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 全部执行成功后，提交事务</span>
</code></pre>
<h3 id="3-并发控制与数据的不一致性"><a href="#3-并发控制与数据的不一致性" class="headerlink" title="3. 并发控制与数据的不一致性"></a>3. 并发控制与数据的不一致性</h3><p>​	能够合理调度并发事务，避免并发事务之间的互相干扰造成数据不一致性的技术称为数据库管理系统的并发控制技术。</p>
<p>数据不一致性的种类：</p>
<blockquote>
<p> 1.丢失更新</p>
</blockquote>
<p>​	一个事务把另一个对数据的已修改结果覆盖，导致这些修改好像丢失了一样</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930204533537.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930204533537.png"></p>
<blockquote>
<p>2.读取脏数据(脏读)</p>
</blockquote>
<p>​	一个事务读取了另一个事务未提交的数据，会造成两个事务得到的数据不一致</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930205018833.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930205018833.png"></p>
<blockquote>
<p>3.不可重复读</p>
</blockquote>
<p>​	一个事务对同一数据的读取结果前后不一致，这是由于读取了另一个事务已修改提交的数据。当其中一个事务需要校验或再确认数据时，出现再读数据与之前读的数据值不相同。(侧重读-读)</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930205136157.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930205136157.png"></p>
<blockquote>
<p>4.幻象读(Phantom Read)(幻读)</p>
</blockquote>
<p>读到的数据是不真实的。比如select 某记录是否存在，不存在，准备插入此记录，但执行 insert 时发现此记录已存在，无法插入，此时就发生了幻读。(侧重读-写)</p>
<p>原因：其他事务修改、插入、删除了数据。</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930205420783.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930205420783.png"></p>
<h3 id="4-事务的隔离级别"><a href="#4-事务的隔离级别" class="headerlink" title="4. 事务的隔离级别"></a>4. 事务的隔离级别</h3><p>产生上述四种数据不一致性问题的主要原因是并发的事务操作<strong>破坏了事务的隔离性</strong>。</p>
<p>为了防止数据库的并发操作导致的数据库不一致性问题，SQL标准定义了4种隔离级别：</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930210940379.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930210940379.png"></p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> @<span class="token variable">@transaction_isolation</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">-- MySQL数据库支持所有的隔离级别，查询当前事务隔离级别的语句</span>

<span class="token comment" spellcheck="true">-- 设置当前事务的隔离级别(两种方式)</span>
<span class="token keyword">SET</span> <span class="token punctuation">[</span><span class="token keyword">global</span> <span class="token operator">|</span> <span class="token keyword">session</span><span class="token punctuation">]</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation level</span> 隔离级别名称<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">#global隔离级用于所有用户，session隔离级只用于当前对话和连接</span>
<span class="token keyword">SET</span> transaction_isolation<span class="token operator">=</span>’隔离级别名称’<span class="token punctuation">;</span>
</code></pre>
<blockquote>
<ol>
<li>读取未提交事务</li>
</ol>
</blockquote>
<p>READ UNCOMMITTED是<strong>最低</strong>事务隔离级别，<strong>无法避免读取脏数据、不可重复读和幻象读</strong>。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 设置当前会话隔离级别</span>
<span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation level</span> <span class="token keyword">read</span> <span class="token keyword">uncommitted</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<ol start="2">
<li>读取提交的事务</li>
</ol>
</blockquote>
<p>read committed可以避免读取脏数据，但<strong>不可避免不可重复读和幻象读</strong>。</p>
<blockquote>
<ol start="3">
<li>可重复读</li>
</ol>
</blockquote>
<p>REPEATABLE READ是<strong>MySQL默认</strong>的隔离级别，确保同一事务内执行相同的查询语句时，读取的结果是一致的。如果事务T2对<strong>多行数据</strong>进行增加，那么将会出现<strong>幻象读</strong>的问题。</p>
<blockquote>
<ol start="4">
<li>串行化</li>
</ol>
</blockquote>
<p>SERIALIZABL通过强制事务排序，使事务之间不可能相互冲突。用户之间一个接一个顺序地执行当前事务，从而解决幻象读问题，但是可能导致<strong>大量的等待现象。</strong></p>
<h3 id="5-事务隔离性的实现"><a href="#5-事务隔离性的实现" class="headerlink" title="5. 事务隔离性的实现"></a>5. 事务隔离性的实现</h3><p>按照其对可能重读的操作采取的不同策略可以分为乐观并发控制和悲观并发控制两大类。</p>
<p><strong>乐观并发控制</strong>：对于并发执行可能冲突的操作，假定其不会真的冲突，允许并发执行，直到真正发生冲突时才去解决冲突，比如让事务回滚。</p>
<p><strong>悲观并发控制</strong>：对于并发执行可能冲突的操作，假定其必定发生冲突。</p>
<h3 id="6-封锁及封锁协议"><a href="#6-封锁及封锁协议" class="headerlink" title="6. 封锁及封锁协议"></a>6. 封锁及封锁协议</h3><p>封锁是一种用来防止多个事务同时访问数据而产生问题的机制。</p>
<p>封锁可以防止用户读取正在由其他用户修改的数据，并可以防止多个用户同时更改相同数据。</p>
<p>事务T在对某个数据对象（例如表、记录等）操作之前，先向系统发出请求，对其加锁。加锁后事务T对该数据对象就有了一定的控制，在事务T释放它的锁之前，其他事务不能更新该数据。</p>
<h4 id="1-封锁粒度"><a href="#1-封锁粒度" class="headerlink" title="1. 封锁粒度"></a>1. 封锁粒度</h4><p><strong>封锁粒度</strong>：封锁的数据库对象的大小。锁定的数据量越少，发生锁争用的可能就越小。在mysql中，封锁粒度分为<strong>行级锁</strong>和<strong>表级锁</strong>。</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930215541528.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930215541528.png"></p>
<h4 id="2-封锁类型"><a href="#2-封锁类型" class="headerlink" title="2. 封锁类型"></a>2. 封锁类型</h4><p>封锁分为<strong>排它锁</strong>和<strong>共享锁</strong>两种。</p>
<p>排它锁(eXclusive lock)，简称X锁，又称独占锁或写锁。</p>
<p>排它锁确保不会同时对同一资源进行多重更新。</p>
<p>共享锁(shared lock)，简称S锁，又称读锁。</p>
<p>共享锁允许并发事务读取同一个资源。资源上存在共享锁时，任何其他事务都不能修改数据。除非将事务隔离级别设置为可重复读或更高级别，或者在事务生存周期内用锁定提示保留共享锁，那么一旦读取数据，便立即释放资源上的共享锁。</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930220142395.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930220142395.png"></p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930220217492.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930220217492.png"></p>
<h4 id="3-封锁协议"><a href="#3-封锁协议" class="headerlink" title="3. 封锁协议"></a>3. 封锁协议</h4><p>在封锁时约定的一些规则，例如何时申请封锁、申请何种锁、持锁时间、何时释放等，被称为封锁协议（Locking Protocol）。</p>
<blockquote>
<p>一级封锁协议：</p>
</blockquote>
<p>​	事务T在修改数据A时必须先对其加X锁，直到事务结束才能释放锁。</p>
<p>​	防止丢失更新。</p>
<blockquote>
<p>二级封锁协议：</p>
</blockquote>
<p>在一级封锁协议的基础上，加上事务T在读取数据R之前必须先对其加S锁，读完后释放S锁。</p>
<p>​	防止丢失更新，读脏数据。</p>
<blockquote>
<p>三级封锁协议：</p>
</blockquote>
<p>​	在一级封锁协议的基础上，加上事务T在读取数据R之前必须先对其加S锁，读完后并不释放S锁，而直到事务T结束才释放。</p>
<p>​	防止丢失更新，读脏数据，不可重复读。</p>
<h4 id="4-死锁和活锁"><a href="#4-死锁和活锁" class="headerlink" title="4. 死锁和活锁"></a>4. 死锁和活锁</h4><p>死锁（Dead Lock）是指两个或更多的事务<strong>同时处于等待状态</strong>，每个事务都在等待其中另一个事务解除封锁，它才能继续执行下去，结果造成任何一个事务都无法继续执行。</p>
<table>
<thead>
<tr>
<th>时  间</th>
<th>事务T1</th>
<th>事务T2</th>
</tr>
</thead>
<tbody><tr>
<td>t0</td>
<td>封锁学生表</td>
<td></td>
</tr>
<tr>
<td>t1</td>
<td></td>
<td>封锁成绩表</td>
</tr>
<tr>
<td>t2</td>
<td>要求封锁成绩表，等待</td>
<td></td>
</tr>
<tr>
<td>t3</td>
<td></td>
<td>要求封锁学生表，等待</td>
</tr>
<tr>
<td>t4</td>
<td>等待</td>
<td>等待</td>
</tr>
</tbody></table>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930222240860.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930222240860.png"></p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930222325713.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20230930222325713.png"></p>
<p>活锁（Live Lock）是指由于其他事务的封锁操作使某个事务永远处于等待状态，得不到继续操作的机会。</p>
<p>​	活锁避免的方法就是采用先来先服务的策略，按照请求封锁的次序对事务进行排队。</p>
<h2 id="12-存储过程与函数"><a href="#12-存储过程与函数" class="headerlink" title="12. 存储过程与函数"></a>12. 存储过程与函数</h2><p>是一组完成特定功能的SQL语言代码段，经编译后存储在数据库中，可被触发器、其他存储过程、程序设计语言所调用。</p>
<h3 id="1-定界符与语句块"><a href="#1-定界符与语句块" class="headerlink" title="1. 定界符与语句块"></a>1. 定界符与语句块</h3><p>​	mysql默认定界符<code>;</code>，可用delimiter命令新建定界符</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> $$
<span class="token comment" spellcheck="true">#表示新的定界符为“$$”，自此开始，直到遇到下一个“$$”，MySQL才会整体执行这段语句代码。</span>
</code></pre>
<p>​	语句块是由若干条语句构成的程序代码单元，在逻辑上被当作一个整体，语句块中的语句要么被执行，要么整体都不被执行。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#用begin...end定义一个语句块</span>
</code></pre>
<h3 id="2-变量定义与使用"><a href="#2-变量定义与使用" class="headerlink" title="2. 变量定义与使用"></a>2. 变量定义与使用</h3><p>变量具有<strong>变量名，变量值，数据类型</strong>。</p>
<p>变量分为<strong>用户会话变量，局部变量，系统变量</strong>。</p>
<blockquote>
<p>用户会话变量@</p>
</blockquote>
<p>默认值为NULL，无需给出数据类型</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token variable">@a</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token variable">@b</span><span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>
<span class="token keyword">set</span> <span class="token variable">@c</span>:<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token variable">@d</span>:<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token variable">@e</span>:<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token variable">@f</span>:<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">into</span> <span class="token variable">@a</span><span class="token punctuation">,</span><span class="token variable">@b</span> <span class="token keyword">from</span> sc<span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>局部变量</p>
</blockquote>
<p>在一个语句块内部定义的变量。</p>
<p>定义存储过程时，所有局部变量的声明一定要放在存储过程体的开始</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span> total_num <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> x<span class="token punctuation">,</span>y <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> myname char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>系统变量@@</p>
</blockquote>
<p>分为<strong>全局变量和会话变量</strong></p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#查询所有全局变量</span>
<span class="token keyword">show</span> <span class="token keyword">global</span> variables<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#查询所有会话变量</span>
<span class="token keyword">show</span> <span class="token keyword">session</span> variables<span class="token punctuation">;</span>
<span class="token keyword">show</span> variables<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#查询某个系统变量的取值</span>
<span class="token keyword">select</span> @<span class="token variable">@global.wait_timeout</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 全局变量wait_timeout</span>
<span class="token keyword">select</span> @<span class="token variable">@session.version</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 会话变量version</span>
<span class="token keyword">select</span> @<span class="token variable">@version</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 优先查会话变量，再查全局变量</span>
<span class="token comment" spellcheck="true">#修改会话变量的值</span>
</code></pre>
<h3 id="3-存储过程的创建和调用"><a href="#3-存储过程的创建和调用" class="headerlink" title="3. 存储过程的创建和调用"></a>3. 存储过程的创建和调用</h3><h4 id="1-创建"><a href="#1-创建" class="headerlink" title="1. 创建"></a>1. 创建</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span>
    <span class="token punctuation">[</span><span class="token keyword">DEFINER</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; user | CURRENT_USER &amp;#125;]  #定义DEFINER,默认为当前用户</span>
<span class="token keyword">PROCEDURE</span> 存储过程名
    <span class="token punctuation">[</span>SQL SECURITY <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; DEFINER | INVOKER &amp;#125; | …]#指定DEFINER或INVOKER权限</span>
<span class="token keyword">BEGIN</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">END</span>
</code></pre>
<blockquote>
<p>创建存储过程，计算阶乘</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#记得要声明分隔符</span>
<span class="token keyword">drop</span> <span class="token keyword">procedure</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> p1<span class="token punctuation">;</span>
<span class="token keyword">delimiter</span> $$
<span class="token keyword">create</span> <span class="token keyword">procedure</span> p1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#无参构造</span>
<span class="token keyword">begin</span>
<span class="token keyword">declare</span> n<span class="token punctuation">,</span>m <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#"局部变量"</span>
<span class="token keyword">set</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">set</span> m<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> n<span class="token operator">&lt;=</span><span class="token number">10</span> <span class="token keyword">do</span> 
<span class="token keyword">set</span> m<span class="token operator">=</span>m<span class="token operator">*</span>n<span class="token punctuation">;</span>
<span class="token keyword">set</span> n<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> m<span class="token punctuation">;</span>
<span class="token keyword">end</span>$$
<span class="token keyword">delimiter</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#恢复默认分隔符</span>
<span class="token comment" spellcheck="true">#调用存储过程</span>
<span class="token keyword">call</span> p1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p> 存储过程的形参</p>
</blockquote>
<p>in 表示输入参数，调用时必须传入一个确定的值或有确定值的变量。不会影响传入的外部变量(不能被返回)。</p>
<p>out 表示输出参数，调用时必须传入一个用户会话变量，会影响传入的外部变量</p>
<p>inout 表示输入输出参数，调用时必须传入一个有确定值的用户会话变量，会影响传入的外部变量</p>
<p><strong>注意</strong>：out，inout不接受系统变量作为实参。</p>
<pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">delimiter</span> $$
<span class="token keyword">create</span> <span class="token keyword">procedure</span> p1<span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token number">a</span> char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
<span class="token keyword">set</span> <span class="token variable">@a</span><span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#用户会话变量</span>
<span class="token keyword">set</span> <span class="token number">a</span><span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#存储过程局部变量</span>
<span class="token keyword">select</span> <span class="token variable">@a</span><span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>$$
mysql<span class="token operator">></span> <span class="token keyword">delimiter</span> <span class="token punctuation">;</span>
mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token variable">@a</span><span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token variable">@b</span><span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>
mysql<span class="token operator">></span> <span class="token keyword">call</span> p1<span class="token punctuation">(</span><span class="token variable">@b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#调用存储过程，传入实参</span>
mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token variable">@a</span><span class="token punctuation">,</span><span class="token variable">@b</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#此时@a=40,@b=80</span>
</code></pre>
<h4 id="2-查看，修改特性，删除"><a href="#2-查看，修改特性，删除" class="headerlink" title="2. 查看，修改特性，删除"></a>2. 查看，修改特性，删除</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#查看存储过程的定义</span>
<span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">procedure</span> p1<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#查看存储过程的状态特征</span>
<span class="token keyword">show</span> <span class="token keyword">procedure</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">"p%"</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#只能修改存储过程的特性</span>
<span class="token keyword">alter</span> <span class="token keyword">procedure</span> p1  <span class="token keyword">comment</span> <span class="token string">'改名了'</span><span class="token punctuation">;</span>
<span class="token keyword">alter</span> <span class="token keyword">procedure</span> p1 sql security <span class="token keyword">invoker</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#删除</span>
<span class="token keyword">drop</span> <span class="token keyword">procedure</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> p1<span class="token punctuation">;</span>
</code></pre>
<h3 id="4-存储过程相关函数"><a href="#4-存储过程相关函数" class="headerlink" title="4. 存储过程相关函数"></a>4. 存储过程相关函数</h3><table>
<thead>
<tr>
<th>case when…then…when…then…else…end case;</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>while…do…end while;</td>
<td></td>
</tr>
<tr>
<td>[label:] loop…end loop [label];</td>
<td>一直循环直到执行leave [label];</td>
</tr>
<tr>
<td>[label:] repeat…until…end repeat [label];</td>
<td>类似do-while</td>
</tr>
</tbody></table>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> <span class="token comment" spellcheck="true">//</span>
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> test_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span> 
    <span class="token keyword">DECLARE</span> id <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>
    add_loop:LOOP
        <span class="token keyword">IF</span> id <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token keyword">THEN</span> <span class="token keyword">SET</span> id <span class="token operator">=</span> id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">ELSE</span>
           LEAVE add_loop<span class="token punctuation">;</span>
        <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
    <span class="token keyword">END</span> LOOP add_loop<span class="token punctuation">;</span>
    <span class="token keyword">SELECT</span> id<span class="token punctuation">;</span>
<span class="token keyword">END</span> <span class="token comment" spellcheck="true">//</span>
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>
<span class="token keyword">CALL</span> test_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="5-用户自定义函数"><a href="#5-用户自定义函数" class="headerlink" title="5. 用户自定义函数"></a>5. 用户自定义函数</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#因为开启了二进制日志，所以得设一下下面这个变量</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> log_bin_trust_function_creators<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">delimiter</span> <span class="token comment" spellcheck="true">//</span>
<span class="token keyword">create</span> <span class="token keyword">function</span> <span class="token punctuation">`</span>pt1<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">returns</span> <span class="token keyword">int</span>
<span class="token keyword">begin</span>
<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token comment" spellcheck="true">//</span>
<span class="token keyword">delimiter</span> <span class="token punctuation">;</span>
<span class="token keyword">select</span> pt1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#调用函数</span>
</code></pre>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#查看状态特征</span>
<span class="token keyword">show</span> <span class="token keyword">function</span> <span class="token keyword">status</span><span class="token punctuation">;</span>
<span class="token keyword">show</span> <span class="token keyword">function</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">"pt1"</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#查看函数代码</span>
<span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">function</span> pt1<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#修改特征信息</span>
<span class="token keyword">alter</span> <span class="token keyword">function</span> pt1 sql security <span class="token keyword">invoker</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#删除函数</span>
<span class="token keyword">drop</span> <span class="token keyword">function</span> pt1<span class="token punctuation">;</span>
</code></pre>
<h3 id="6-游标-cursor"><a href="#6-游标-cursor" class="headerlink" title="6. 游标 cursor"></a>6. 游标 cursor</h3><p>游标实际上是一种能从包括多条数据记录的结果集中逐条访问这些记录的机制。</p>
<p>游标主要包括结果集和游标位置。</p>
<p>MySQL游标只能用于存储过程和函数。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#游标声明</span>
<span class="token keyword">DECLARE</span> emp_c <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> <span class="token keyword">SELECT</span> salary <span class="token keyword">FROM</span> employees <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> salary <span class="token keyword">DESC</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#打开游标</span>
<span class="token keyword">open</span> emp_c<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#提取数据</span>
<span class="token comment" spellcheck="true">#fetch取出一条记录，游标指针自动向后移动并指向下一条记录。</span>
<span class="token keyword">FETCH</span> emp_c <span class="token keyword">INTO</span> cursor_salary<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#关闭游标</span>
<span class="token keyword">close</span> emp_c<span class="token punctuation">;</span>
</code></pre>
<h2 id="13-数据库备份还原和日志管理"><a href="#13-数据库备份还原和日志管理" class="headerlink" title="13. 数据库备份还原和日志管理"></a>13. 数据库备份还原和日志管理</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><blockquote>
<p> 数据库备份分类</p>
</blockquote>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20231001164436742.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20231001164436742.png"></p>
<blockquote>
<p>mysql常用数据库备份工具</p>
</blockquote>
<p>mysqldump 逻辑备份工具</p>
<p>mysqlhotcopy 仅支持MyISAM</p>
<h3 id="2-mysqldump命令备份"><a href="#2-mysqldump命令备份" class="headerlink" title="2. mysqldump命令备份"></a>2. mysqldump命令备份</h3><p><strong>注意</strong>：要用cmd，而不是power shell，不然导入不了。</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20231001165821721.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20231001165821721.png"></p>
<pre class=" language-bash"><code class="language-bash">chcp 65001
<span class="token comment" spellcheck="true">#登录用户主机为本地，将数据库db1中的teacher表备份到back_file1.sql下</span>
mysqldump -u root -h 127.0.0.1 -proot db1 teacher <span class="token operator">></span> C:\databasestudy\back_file1.sql

<span class="token comment" spellcheck="true">#备份所有表</span>
mysqldump -u root -h 127.0.0.1 -proot db1  <span class="token operator">></span> C:\databasestudy\back_file2.sql

<span class="token comment" spellcheck="true">#备份表结构</span>
mysqldump -u root -h 127.0.0.1 -proot --opt --no-data db1 teacher  <span class="token operator">></span> C:\databasestudy\back_file3.sql

<span class="token comment" spellcheck="true">#备份多个表</span>
mysqldump -u root -h 127.0.0.1 -proot  db1 teacher student  <span class="token operator">></span> C:\databasestudy\back_file4.sql

<span class="token comment" spellcheck="true">#备份数据库db1,db2</span>
mysqldump -u root -h 127.0.0.1 -proot --databases db1 db2  <span class="token operator">></span> C:\databasestudy\back_file5.sql

<span class="token comment" spellcheck="true">#备份所有数据库</span>
mysqldump -u root -h 127.0.0.1 -proot --all-databases   <span class="token operator">></span> C:\databasestudy\back_file6.sql

<span class="token comment" spellcheck="true">#备份数据库结构</span>
mysqldump -u root -h 127.0.0.1 -proot --opt --no-data  db1  <span class="token operator">></span> C:\databasestudy\back_file7.sql

<span class="token comment" spellcheck="true">#备份数据库数据</span>
mysqldump -u root -h 127.0.0.1 -proot --opt --no-create-info  db1  <span class="token operator">></span> C:\databasestudy\back_file8.sql

<span class="token comment" spellcheck="true">#备份部分数据</span>
mysqldump -u root -h 127.0.0.1 -proot db1 test1 --where<span class="token operator">=</span><span class="token string">"age&lt;11"</span>  <span class="token operator">></span> C:\databasestudy\back_file9.sql
</code></pre>
<h3 id="3-备份还原"><a href="#3-备份还原" class="headerlink" title="3. 备份还原"></a>3. 备份还原</h3><blockquote>
<p>未登录服务器用mysql命令还原</p>
</blockquote>
<pre class=" language-bash"><code class="language-bash">mysqldump -u root -h 127.0.0.1 -proot  db1 test2 <span class="token operator">></span> C:\databasestudy\back_file11.sql

mysql -u root  -p db2 <span class="token operator">&lt;</span>C:\databasestudy\back_file11.sql -- 还原
/*navicat有延时，需要过一段时间再刷新才能看到
据说是本地缓存机制
在cmd登录数据库查看没这个问题*/
</code></pre>
<blockquote>
<p>登陆服务器用source命令还原</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql">mysqldump <span class="token operator">-</span>u root <span class="token operator">-</span>h <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token operator">-</span>proot  <span class="token number">db1</span> test2 <span class="token operator">></span> C:\databasestudy\back_file11<span class="token punctuation">.</span>sql
mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p
<span class="token keyword">use</span> <span class="token number">db2</span><span class="token punctuation">;</span>
source  C:\databasestudy\back_file11<span class="token punctuation">.</span>sql <span class="token comment" spellcheck="true">#这里不能有;号</span>
</code></pre>
<h3 id="4-mysql日志管理"><a href="#4-mysql日志管理" class="headerlink" title="4. mysql日志管理"></a>4. mysql日志管理</h3><p><strong>注意</strong>：cmd里chcp 65001</p>
<p>​	日志文件中记录着MySQL数据库运行期间发生的变化；也就是说用来记录MySQL数据库的客户端连接状况、SQL语句的执行情况和错误信息等。</p>
<p>日志文件分为：错误日志，二进制日志，通用查询日志，慢查询日志。</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20231002131719983.png" class="lozad post-image"src="/2023/08/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86mysql%E7%89%88/image-20231002131719983.png"></p>
<h4 id="1-错误日志"><a href="#1-错误日志" class="headerlink" title="1. 错误日志"></a>1. 错误日志</h4><p>默认开启，不能禁止。文件名格式为hostname.err。</p>
<p>my.ini中：</p>
<p>log-err定义错误日志的存储位置</p>
<p>log-warnings定义是否将警告信息写入错误日志。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#查看错误日志所在目录及文件名</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%log_error%'</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">#删除错误日志(重新加载日志)</span>
mysqladmin <span class="token operator">-</span>u root <span class="token operator">-</span>p flush<span class="token operator">-</span>logs
</code></pre>
<h4 id="2-二进制日志"><a href="#2-二进制日志" class="headerlink" title="2. 二进制日志"></a>2. 二进制日志</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#查看是否开启</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%log_bin%'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#通过my.ini文件中的log-bin选项可以开启二进制日志</span>
log<span class="token operator">-</span>bin <span class="token punctuation">[</span><span class="token operator">=</span>path<span class="token operator">/</span><span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#路径</span>
expire_logs_days<span class="token operator">=</span><span class="token number">10</span> <span class="token comment" spellcheck="true">#保留时间</span>
max_binlog_size<span class="token operator">=</span>100M <span class="token comment" spellcheck="true">#单个文件大小限制</span>
</code></pre>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#登陆后查看有哪些二进制日志</span>
<span class="token keyword">show</span> <span class="token keyword">binary</span> logs<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#查看日志</span>
mysqlbinlog <span class="token number">d</span>:<span class="token operator">/</span>log<span class="token operator">/</span>DESKTOP<span class="token operator">-</span>O5KMGM8<span class="token operator">-</span>bin<span class="token number">.000013</span> 
</code></pre>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#删除二进制日志</span>
<span class="token keyword">PURGE</span> <span class="token keyword">BINARY</span> LOGS BEFORE <span class="token string">'2008-04-02 22:46:26'</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">#删除到某个时间前所有日志</span>
<span class="token keyword">PURGE</span> <span class="token keyword">BINARY</span> LOGS <span class="token keyword">TO</span> <span class="token string">'mysql-bin.010'</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">#删除到某个日志前(不包括指定日志)</span>
</code></pre>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#使用mysqlbinlog恢复数据库到某一时刻的状态</span>
mysqlbinlog <span class="token comment" spellcheck="true">--stop-datetime=”2021-03-10 10:00:00” C:\ProgramData\MySQL\MySQL Server 8.0\Data\DESKTOP-TKC62RP-bin.000005 | mysql -u root -p</span>
<span class="token comment" spellcheck="true">-- 必须是编号小的先还原</span>
</code></pre>
<p>start-datetime、stop-datetime表示恢复数据库的起始时间点和结束时间点。 start-position和stop-position表示恢复数据的开始位置和结束位置。</p>
<h4 id="3-慢查询日志"><a href="#3-慢查询日志" class="headerlink" title="3. 慢查询日志"></a>3. 慢查询日志</h4><p>慢查询日志在MySQL中默认是关闭的，可以通过配置文件my.ini或者my.cnf中的slow_query_log选项打开。</p>
<p>slow_query_log_file[&#x3D;path&#x2F;[filename]]  路径，默认hostname-slow.log</p>
<p>long_query_time&#x3D;n 查询时间超过n则记录，默认10秒</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#可以在登陆后开启</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> slow_query_log<span class="token operator">=</span><span class="token keyword">on</span><span class="token punctuation">;</span>或
<span class="token keyword">set</span> <span class="token keyword">global</span> slow_query_log<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#查看慢查询定义的时间值</span>
<span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">'long_query_time'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">#查看慢查询日志相关变量</span>
<span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">'%slow_query_log%'</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#删除慢查询日志</span>
mysqladmin <span class="token operator">-</span>u root <span class="token operator">-</span>p flush<span class="token operator">-</span>logs<span class="token punctuation">;</span>
</code></pre>
<h4 id="4-通用日志管理"><a href="#4-通用日志管理" class="headerlink" title="4. 通用日志管理"></a>4. 通用日志管理</h4><p>默认关闭，可修改my.ini开启，log[&#x3D;path&#x2F;[filename]]</p>
<p>也可在登陆后在set global general_log&#x3D;on&#x2F;1;</p>
<p>show variables like ‘general%’;</p>
<p>windows用记事本打开查看。</p>
<pre class=" language-sql"><code class="language-sql">mysqladmin <span class="token operator">-</span>u root <span class="token operator">-</span>p flush<span class="token operator">-</span>logs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#重设日志</span>
flush logs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#登陆后重设日志</span>
</code></pre>
<h2 id="中英对照"><a href="#中英对照" class="headerlink" title="中英对照"></a>中英对照</h2><p>cascade 级联 n.  [kæˈskeɪd]</p>
<p>constraint 约束 n.   [kənˈstreɪnt]</p>
<p>delimiter 定界符 n. [dɪ’lɪmɪtə]</p>
<p>exclusive 排斥的，专有的 adj. [ɪkˈskluːsɪv]</p>
<p>phantom 幽灵,幻影 n. [ˈfæntəm]</p>
<p>privilege 特权 n. [ˈprɪvəlɪdʒ]</p>
<p>procedure 程序，步骤 n. [prəˈsiːdʒə(r)]</p>
<p>protocol 协议 n. [ˈprəʊtəkɒl]</p>
]]></content>
      <categories>
        <category>大二</category>
      </categories>
  </entry>
</search>
